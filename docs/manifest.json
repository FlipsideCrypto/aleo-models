{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.8", "generated_at": "2025-07-25T17:14:52.386164Z", "invocation_id": "2ba26e46-e197-4d2b-acc5-f04b8a1b8929", "env": {}, "project_name": "aleo_models", "project_id": "f031447aaea9d9a4e3e2602ac884e7e5", "user_id": "86efe34d-b254-4372-83ea-710b2e4c2631", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.aleo_models.core__fact_block_round_batches": {"database": "ALEO", "schema": "core", "name": "core__fact_block_round_batches", "resource_type": "model", "package_name": "aleo_models", "path": "gold/core/core__fact_block_round_batches.sql", "original_file_path": "models/gold/core/core__fact_block_round_batches.sql", "unique_id": "model.aleo_models.core__fact_block_round_batches", "fqn": ["aleo_models", "gold", "core", "core__fact_block_round_batches"], "alias": "fact_block_round_batches", "checksum": {"name": "sha256", "checksum": "7bc933bc25bd22d2041d0d0cc38afb90f271372fe46bb0dd4ae6cea849aa0b94"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(batch_id,author,committee_id,transmission_ids);", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_block_round_batches_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_block_round_batches__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Records of rounds and batches within blocks on the Aleo network, capturing the consensus and block production process from genesis onward.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ROUND": {"name": "ROUND", "description": "Prover round data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BATCH_ID": {"name": "BATCH_ID", "description": "Batch ID associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AUTHOR": {"name": "AUTHOR", "description": "The author of the block round.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMMITTEE_ID": {"name": "COMMITTEE_ID", "description": "The committee ID of the block round.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSMISSION_IDS": {"name": "TRANSMISSION_IDS", "description": "The transmission IDs of the block round.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_BLOCK_ROUND_BATCHES_ID": {"name": "FACT_BLOCK_ROUND_BATCHES_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/core/core__fact_block_round_batches.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_block_round_batches__dbt_tmp)"], "unique_key": ["fact_block_round_batches_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(batch_id,author,committee_id,transmission_ids);"]}, "created_at": 1753463697.4148083, "relation_name": "ALEO.core.fact_block_round_batches", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from ' ~ generate_tmp_view_name(this) ~ ')'],\n    unique_key = ['fact_block_round_batches_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(batch_id,author,committee_id,transmission_ids);\",\n    tags = ['core', 'full_test']\n) }}\n\nSELECT\n    block_id,\n    block_timestamp,\n    ROUND,\n    batch_id,\n    author,\n    committee_id,\n    transmission_ids,\n    {{ dbt_utils.generate_surrogate_key(['block_id','batch_id']) }} AS fact_block_round_batches_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref('silver__block_round_batches') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= DATEADD(\n        'minute',\n        -5,\n        (\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n        )\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.core__fact_block_solutions": {"database": "ALEO", "schema": "core", "name": "core__fact_block_solutions", "resource_type": "model", "package_name": "aleo_models", "path": "gold/core/core__fact_block_solutions.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.sql", "unique_id": "model.aleo_models.core__fact_block_solutions", "fqn": ["aleo_models", "gold", "core", "core__fact_block_solutions"], "alias": "fact_block_solutions", "checksum": {"name": "sha256", "checksum": "60befa974c25e494c59871a9efd239ac289b1237e9178eca0efc9614fa005209"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(solution_id,address,epoch_hash);", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_block_solutions_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_block_solutions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Records of all prover solutions for each block, including block details, rewards, and solution-specific information.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_PUZZLE_REWARD": {"name": "BLOCK_PUZZLE_REWARD", "description": "The total coinbase reward issued to the network for each block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The unique address referring to an entity on the blockchain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COUNTER": {"name": "COUNTER", "description": "A counter value associated with the solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EPOCH_HASH": {"name": "EPOCH_HASH", "description": "The hash of the epoch in which the solution was found.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SOLUTION_ID": {"name": "SOLUTION_ID", "description": "A unique identifier for the prover solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TARGET": {"name": "TARGET", "description": "The target difficulty for the block solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD_RAW": {"name": "REWARD_RAW", "description": "The raw value of the reward for solving the block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD": {"name": "REWARD", "description": "The processed or formatted value of the reward for solving the block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_BLOCK_SOLUTIONS_ID": {"name": "FACT_BLOCK_SOLUTIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/core/core__fact_block_solutions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_block_solutions__dbt_tmp)"], "unique_key": ["fact_block_solutions_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(solution_id,address,epoch_hash);"]}, "created_at": 1753463697.1599863, "relation_name": "ALEO.core.fact_block_solutions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from ' ~ generate_tmp_view_name(this) ~ ')'],\n    unique_key = ['fact_block_solutions_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(solution_id,address,epoch_hash);\",\n    tags = ['core', 'full_test']\n) }}\n\nSELECT\n    block_id,\n    block_timestamp,\n    block_puzzle_reward,\n    address,\n    counter,\n    epoch_hash,\n    solution_id,\n    target,\n    reward_raw,\n    reward,\n    {{ dbt_utils.generate_surrogate_key(['block_id','solution_id']) }} AS fact_block_solutions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref('silver__block_solutions') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= DATEADD(\n        'minute',\n        -5,\n        (\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n        )\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.core__fact_transitions": {"database": "ALEO", "schema": "core", "name": "core__fact_transitions", "resource_type": "model", "package_name": "aleo_models", "path": "gold/core/core__fact_transitions.sql", "original_file_path": "models/gold/core/core__fact_transitions.sql", "unique_id": "model.aleo_models.core__fact_transitions", "fqn": ["aleo_models", "gold", "core", "core__fact_transitions"], "alias": "fact_transitions", "checksum": {"name": "sha256", "checksum": "960785064355caa023cc24ee4b02852de317ca74f94fc51f3a99fdf04bfdd7e3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_id,transition_id,program_id,function);", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_transitions_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_transitions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Fact table containing information about all transitions within transactions on the network.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "The index of the transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_ID": {"name": "TRANSITION_ID", "description": "The unique identifier for this specific transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "The identifier of the program associated with this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FUNCTION": {"name": "FUNCTION", "description": "The function executed in this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INPUTS": {"name": "INPUTS", "description": "The input parameters or data for this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OUTPUTS": {"name": "OUTPUTS", "description": "The input parameters or data for this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_TRANSITIONS_ID": {"name": "FACT_TRANSITIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/core/core__fact_transitions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_transitions__dbt_tmp)"], "unique_key": ["fact_transitions_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_id,transition_id,program_id,function);"]}, "created_at": 1753463697.3722951, "relation_name": "ALEO.core.fact_transitions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from ' ~ generate_tmp_view_name(this) ~ ')'],\n    unique_key = ['fact_transitions_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_id,transition_id,program_id,function);\",\n    tags = ['core', 'full_test']\n) }}\n\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    INDEX,\n    transition_id,\n    succeeded,\n    TYPE,\n    program_id,\n    FUNCTION,\n    inputs,\n    outputs,\n    {{ dbt_utils.generate_surrogate_key(\n        ['transition_id']\n    ) }} AS fact_transitions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref('silver__transitions') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= DATEADD(\n        'minute',\n        -5,\n        (\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n        )\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.core__fact_blocks": {"database": "ALEO", "schema": "core", "name": "core__fact_blocks", "resource_type": "model", "package_name": "aleo_models", "path": "gold/core/core__fact_blocks.sql", "original_file_path": "models/gold/core/core__fact_blocks.sql", "unique_id": "model.aleo_models.core__fact_blocks", "fqn": ["aleo_models", "gold", "core", "core__fact_blocks"], "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "c6416cd9fe59da7bda434a53db564140c7de381f5ae899fdd68d2a163f74ffe4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_blocks_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_blocks__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Records of all blocks that have occurred on the Aleo network, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "The hash of the block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "The network id corresponding to this block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The number of transactions in a given block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PREVIOUS_HASH": {"name": "PREVIOUS_HASH", "description": "The hash of the previous block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ROUND": {"name": "ROUND", "description": "The round in which crpytographic proofs were provided for a given block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ROUNDS": {"name": "ROUNDS", "description": "Blocks during which provers compete to generate cryptographic proofs and solve puzzles in order to earn rewards.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COINBASE_TARGET": {"name": "COINBASE_TARGET", "description": "The coinbase target for this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CUMULATIVE_PROOF_TARGET": {"name": "CUMULATIVE_PROOF_TARGET", "description": "The cumulative proof target for this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CUMULATIVE_WEIGHT": {"name": "CUMULATIVE_WEIGHT", "description": "The cumulative weight for this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_REWARD": {"name": "BLOCK_REWARD", "description": "The total coinbase reward issued to the network for each block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PUZZLE_REWARD": {"name": "PUZZLE_REWARD", "description": "The total coinbase reward issued to the network for each block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_BLOCKS_ID": {"name": "FACT_BLOCKS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/core/core__fact_blocks.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_blocks__dbt_tmp)"], "unique_key": ["fact_blocks_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"]}, "created_at": 1753463696.8358426, "relation_name": "ALEO.core.fact_blocks", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from ' ~ generate_tmp_view_name(this) ~ ')'],\n    unique_key = ['fact_blocks_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['core', 'full_test']\n) }}\n\nSELECT\n    block_id,\n    block_hash,\n    block_timestamp,\n    CASE\n        WHEN network_id = 0 THEN 'mainnet'\n    END AS network,\n    tx_count,\n    previous_hash,\n    ROUND,\n    rounds,\n    coinbase_target,\n    cumulative_proof_target,\n    cumulative_weight,\n    CASE WHEN block_id = 0 THEN 0 ELSE block_reward END AS block_reward,\n    CASE WHEN block_id = 0 THEN 0 ELSE puzzle_reward END AS puzzle_reward,\n    {{ dbt_utils.generate_surrogate_key(['block_id']) }} AS fact_blocks_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref('silver__blocks') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= DATEADD(\n        'minute',\n        -5,\n        (\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n        )\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.core__fact_transfers": {"database": "ALEO", "schema": "core", "name": "core__fact_transfers", "resource_type": "model", "package_name": "aleo_models", "path": "gold/core/core__fact_transfers.sql", "original_file_path": "models/gold/core/core__fact_transfers.sql", "unique_id": "model.aleo_models.core__fact_transfers", "fqn": ["aleo_models", "gold", "core", "core__fact_transfers"], "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "5ed417d4b462e103d10cd35989d1445940be96cb140d17d8fd7107325dc6aa3c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_id,sender,receiver);", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["transition_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_transfers__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Records of all wallet to wallet transfers on Aleo.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "The boolean status of the transaction. If the transaction was successful, this value will be `true`. If the transaction was unsuccessful, this value will be `false`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "The type of transfer, namely public or private.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "Address that tokens are transferred from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "Address that tokens are transferred to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Number of tokens transferred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_NATIVE": {"name": "IS_NATIVE", "description": "Whether the transfer is a native transfer (credits.aleo) or a non-native transfer (token_registry.aleo).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "Token address of the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_TRANSFERS_ID": {"name": "FACT_TRANSFERS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/core/core__fact_transfers.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_transfers__dbt_tmp)"], "unique_key": ["transition_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_id,sender,receiver);"]}, "created_at": 1753463697.2069807, "relation_name": "ALEO.core.fact_transfers", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_predicates = [\"COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \" ~ generate_tmp_view_name(this) ~ \")\"],\n    unique_key = ['transition_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_id,sender,receiver);\",\n    tags = ['core','full_test']\n) }}\n\nWITH native_transfers AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        transition_id,\n        index,\n        transfer_type,\n        sender,\n        receiver,\n        amount,\n        is_native,\n        token_id\n    FROM\n        {{ ref('silver__native_transfers') }}\n\n    {% if is_incremental() %}\n    WHERE\n        modified_timestamp >= DATEADD(\n            'minute',\n            -5,(\n                SELECT\n                    MAX(\n                        modified_timestamp\n                    )\n                FROM\n                    {{ this }}\n            )\n        )\n    {% endif %}\n),\nnonnative_transfers AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        transition_id,\n        index,\n        transfer_type,\n        sender,\n        receiver,\n        amount,\n        is_native,\n        token_id\n    FROM\n        {{ ref('silver__nonnative_transfers') }}\n\n    {% if is_incremental() %}\n    WHERE\n        modified_timestamp >= DATEADD(\n            'minute',\n            -5,(\n                SELECT\n                    MAX(\n                        modified_timestamp\n                    )\n                FROM\n                    {{ this }}\n            )\n        )\n    {% endif %}\n),\nall_transfers AS (\n    SELECT * FROM native_transfers\n    UNION ALL\n    SELECT * FROM nonnative_transfers\n)\nSELECT \n    block_id,\n    block_timestamp,\n    tx_id,\n    tx_succeeded,\n    transition_id,\n    index,\n    transfer_type,\n    sender,\n    receiver,\n    amount,\n    is_native,\n    token_id as token_address,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_id','transition_id','transfer_type']\n    ) }} AS fact_transfers_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM \n    all_transfers", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}, {"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__native_transfers", "model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.core__dim_labels": {"database": "ALEO", "schema": "core", "name": "core__dim_labels", "resource_type": "model", "package_name": "aleo_models", "path": "gold/core/core__dim_labels.sql", "original_file_path": "models/gold/core/core__dim_labels.sql", "unique_id": "model.aleo_models.core__dim_labels", "fqn": ["aleo_models", "gold", "core", "core__dim_labels"], "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "a340f8ccf6f65bcc813d60f117bfe135c26a8c5448037860e1eb31bb0df2e4e4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dim_labels_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": "modified_timestamp::DATE", "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core"], "description": "A hand curated table containing address names / labels for popular contracts, validators, tokens, etc.", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "The name associated with the address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "Name of the project or entity associated with the address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_LABELS_ID": {"name": "DIM_LABELS_ID", "description": "Unique identifier for each label record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/core/core__dim_labels.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": ["dim_labels_id"], "incremental_strategy": "merge", "cluster_by": "modified_timestamp::DATE", "merge_exclude_columns": ["inserted_timestamp"], "tags": ["core"]}, "created_at": 1753463697.2551248, "relation_name": "ALEO.core.dim_labels", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['dim_labels_id'],\n    incremental_strategy = 'merge',\n    cluster_by = 'modified_timestamp::DATE',\n    merge_exclude_columns = ['inserted_timestamp'],\n    tags = ['core']\n) }}\n\nSELECT\n    'aleo' AS blockchain,\n    creator,\n    address,\n    address_name,\n    label_type,\n    label_subtype,\n    project_name,\n    {{ dbt_utils.generate_surrogate_key(\n        [' address ']\n    ) }} AS dim_labels_id,\n    SYSDATE() AS inserted_timestamp,\n    modified_timestamp\nFROM\n    {{ ref('silver__labels') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.core__fact_transactions": {"database": "ALEO", "schema": "core", "name": "core__fact_transactions", "resource_type": "model", "package_name": "aleo_models", "path": "gold/core/core__fact_transactions.sql", "original_file_path": "models/gold/core/core__fact_transactions.sql", "unique_id": "model.aleo_models.core__fact_transactions", "fqn": ["aleo_models", "gold", "core", "core__fact_transactions"], "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "df0742e1bb20070a384dc0792cb7a218a7886c2f15c66b25b616d69c85c603c4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_id,fee_msg,execution_msg,deployment_msg,owner_msg,finalize_msg,rejected_msg,fee_payer);", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_transactions_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_transactions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Fact table containing information about all transactions on the network.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "The index of the transaction within the block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "The boolean status of the transaction. If the transaction was successful, this value will be `true`. If the transaction was unsuccessful, this value will be `false`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "The type of the transaction (e.g., 'execute', 'deploy', 'fee'.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EXECUTION_MSG": {"name": "EXECUTION_MSG", "description": "The execution message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DEPLOYMENT_MSG": {"name": "DEPLOYMENT_MSG", "description": "The deployment message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OWNER_MSG": {"name": "OWNER_MSG", "description": "The owner message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FINALIZE_MSG": {"name": "FINALIZE_MSG", "description": "The finalize message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REJECTED_MSG": {"name": "REJECTED_MSG", "description": "The rejected message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_COUNT": {"name": "TRANSITION_COUNT", "description": "The number of transitions in the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FEE_RAW": {"name": "FEE_RAW", "description": "The raw fee value from the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "The native-unit fee value from the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FEE_PAYER": {"name": "FEE_PAYER", "description": "The account that paid the fee for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_TRANSACTIONS_ID": {"name": "FACT_TRANSACTIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/core/core__fact_transactions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.core.fact_transactions__dbt_tmp)"], "unique_key": ["fact_transactions_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_id,fee_msg,execution_msg,deployment_msg,owner_msg,finalize_msg,rejected_msg,fee_payer);"]}, "created_at": 1753463697.2807345, "relation_name": "ALEO.core.fact_transactions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from ' ~ generate_tmp_view_name(this) ~ ')'],\n    unique_key = ['fact_transactions_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_id,fee_msg,execution_msg,deployment_msg,owner_msg,finalize_msg,rejected_msg,fee_payer);\",\n    tags = ['core', 'full_test']\n) }}\n\n{% if execute %}\n\n{% if is_incremental() %}\n{% set max_mod_query %}\n\nSELECT\n    DATEADD(\n        'minute',\n        -5,\n        MAX(\n            modified_timestamp\n        )\n    )\nFROM\n    {{ this }}\n\n    {% endset %}\n    {% set max_mod = run_query(max_mod_query) [0] [0] %}\n    {% set max_bd_query %}\nSELECT\n    MIN(\n        block_timestamp :: DATE\n    ) bd\nFROM\n    (\n        SELECT\n            block_timestamp\n        FROM\n            {{ ref('silver__transactions') }}\n        WHERE\n            modified_timestamp >= '{{ max_mod }}'\n        UNION ALL\n        SELECT\n            block_timestamp\n        FROM\n            {{ ref('silver__transitions_fee') }}\n        WHERE\n            modified_timestamp >= '{{ max_mod }}'\n    ) {% endset %}\n    {% set max_bd = run_query(max_bd_query) [0] [0] %}\n{% endif %}\n{% endif %}\nSELECT\n    A.block_id,\n    A.block_timestamp,\n    A.tx_id,\n    INDEX,\n    CASE\n        WHEN status = 'accepted' THEN TRUE\n        ELSE FALSE\n    END AS tx_succeeded,\n    tx_type,\n    fee_msg,\n    execution_msg,\n    deployment_msg,\n    owner_msg,\n    finalize_msg,\n    rejected_msg,\n    COALESCE(\n        transition_count,\n        0\n    ) AS transition_count,\n    COALESCE(\n        fee_raw,\n        0\n    ) AS fee_raw,\n    COALESCE(\n        fee,\n        0\n    ) AS fee,\n    b.fee_payer,\n    {{ dbt_utils.generate_surrogate_key(['a.tx_id']) }} AS fact_transactions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref('silver__transactions') }} A\n    LEFT JOIN {{ ref('silver__transitions_fee') }}\n    b\n    ON A.tx_id = b.tx_id\n    AND A.block_timestamp :: DATE = b.block_timestamp :: DATE\n\n{% if is_incremental() %}\nWHERE\n    A.block_timestamp :: DATE >= '{{ max_bd }}'\n    AND A.block_timestamp :: DATE >= '{{ max_bd }}'\n    AND (\n        A.modified_timestamp >= '{{ max_mod }}'\n        OR b.modified_timestamp >= '{{ max_mod }}'\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}, {"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__transactions", "model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.core__dim_programs": {"database": "ALEO", "schema": "core", "name": "core__dim_programs", "resource_type": "model", "package_name": "aleo_models", "path": "gold/core/core__dim_programs.sql", "original_file_path": "models/gold/core/core__dim_programs.sql", "unique_id": "model.aleo_models.core__dim_programs", "fqn": ["aleo_models", "gold", "core", "core__dim_programs"], "alias": "dim_programs", "checksum": {"name": "sha256", "checksum": "a66f23e28351cfdb37342934a8875454eef14f58b16450e4ed771c3322a9f2fd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["dim_program_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Dimension table containing information about programs deployed on the network.", "columns": {"DEPLOYMENT_BLOCK_ID": {"name": "DEPLOYMENT_BLOCK_ID", "description": "The ID of the block in which this program was deployed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DEPLOYMENT_BLOCK_TIMESTAMP": {"name": "DEPLOYMENT_BLOCK_TIMESTAMP", "description": "The timestamp of the block in which this program was deployed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "The identifier of the program associated with this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EDITION": {"name": "EDITION", "description": "The edition number of the program.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM": {"name": "PROGRAM", "description": "The full program code as a string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "VERIFYING_KEYS": {"name": "VERIFYING_KEYS", "description": "The verifying keys associated with the program, used for cryptographic verification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dim_program_id": {"name": "dim_program_id", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERT_TIMESTAMP": {"name": "INSERT_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/core/core__dim_programs.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": ["dim_program_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "tags": ["core", "full_test"]}, "created_at": 1753463697.3469722, "relation_name": "ALEO.core.dim_programs", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['dim_program_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    tags = ['core','full_test']\n) }}\n\nWITH base AS (\n    SELECT\n        deployment_block_id,\n        deployment_block_timestamp,\n        program_id,\n        edition,\n        program,\n        verifying_keys,\n        {{ dbt_utils.generate_surrogate_key(\n            ['program_id', 'edition']\n        ) }} AS dim_program_id,\n        SYSDATE() AS insert_timestamp,\n        SYSDATE() AS modified_timestamp,\n        '{{ invocation_id }}' AS invocation_id\n    FROM\n        {{ ref('silver__programs') }}\n\n    {% if is_incremental() %}\n    WHERE\n        modified_timestamp >= (\n            SELECT\n                MAX(\n                    modified_timestamp\n                )\n            FROM\n                {{ this }}\n        )\n        {% endif %}\n),\n\ncustom_programs AS (\n    SELECT \n        * \n    FROM \n        {{ ref('silver__custom_programs') }}\n)\nSELECT * FROM base\nUNION ALL\nSELECT * FROM custom_programs", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}, {"name": "silver__custom_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__programs", "model.aleo_models.silver__custom_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.core__dim_token_registrations": {"database": "ALEO", "schema": "core", "name": "core__dim_token_registrations", "resource_type": "model", "package_name": "aleo_models", "path": "gold/core/core__dim_token_registrations.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.sql", "unique_id": "model.aleo_models.core__dim_token_registrations", "fqn": ["aleo_models", "gold", "core", "core__dim_token_registrations"], "alias": "dim_token_registrations", "checksum": {"name": "sha256", "checksum": "97f146d91a2e0d10ee423f4cbb380f5232aac6f91906cfebd478e6c70426b8eb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["token_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Dimension table containing information about token registrations on the network.", "columns": {"TX_ID_CREATED": {"name": "TX_ID_CREATED", "description": "Transaction ID when the token was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID_CREATED": {"name": "BLOCK_ID_CREATED", "description": "Block ID when the token was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP_CREATED": {"name": "BLOCK_TIMESTAMP_CREATED", "description": "Block timestamp when the token was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "The ID of the token", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_NAME": {"name": "TOKEN_NAME", "description": "The decoded name of the token", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The decoded symbol of the token", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimal places for the token", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MAX_SUPPLY": {"name": "MAX_SUPPLY", "description": "The maximum supply of the token", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EXTERNAL_AUTH_REQUIRED": {"name": "EXTERNAL_AUTH_REQUIRED", "description": "Flag indicating if external authorization is required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EXTERNAL_AUTH_PARTY": {"name": "EXTERNAL_AUTH_PARTY", "description": "The party responsible for external authorization, if required", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NAME_ENCODED": {"name": "NAME_ENCODED", "description": "The original encoded name of the token", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYMBOL_ENCODED": {"name": "SYMBOL_ENCODED", "description": "The original encoded symbol of the token", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_TOKEN_REGISTRATIONS_ID": {"name": "DIM_TOKEN_REGISTRATIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/core/core__dim_token_registrations.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": ["token_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "tags": ["core", "full_test"]}, "created_at": 1753463697.1010962, "relation_name": "ALEO.core.dim_token_registrations", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['token_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    tags = ['core','full_test']\n) }}\n\nWITH token_registrations AS (\n    SELECT\n        tx_id_created,\n        block_id_created,\n        block_timestamp_created,\n        token_id,\n        token_name,\n        symbol,\n        decimals,\n        max_supply,\n        external_auth_required,\n        external_auth_party,\n        name_encoded,\n        symbol_encoded,\n        {{ dbt_utils.generate_surrogate_key(\n            ['token_id']\n        ) }} AS dim_token_registrations_id,\n        SYSDATE() AS inserted_timestamp,\n        SYSDATE() AS modified_timestamp,\n        '{{ invocation_id }}' AS invocation_id\n    FROM\n        {{ ref('silver__token_registrations') }}\n\n    {% if is_incremental() %}\n    WHERE\n        modified_timestamp >= (\n            SELECT\n                MAX(modified_timestamp)\n            FROM {{ this }}\n        )\n    {% endif %}\n)\n\nSELECT * FROM token_registrations", "language": "sql", "refs": [{"name": "silver__token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.defi__fact_swaps": {"database": "ALEO", "schema": "defi", "name": "defi__fact_swaps", "resource_type": "model", "package_name": "aleo_models", "path": "gold/defi/defi__fact_swaps.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.sql", "unique_id": "model.aleo_models.defi__fact_swaps", "fqn": ["aleo_models", "gold", "defi", "defi__fact_swaps"], "alias": "fact_swaps", "checksum": {"name": "sha256", "checksum": "c865cf2d2a3b6898df900141105201f1decd13b6b3cfbd4126a5107f93bad733"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore", "full_test"], "meta": {"database_tags": {"table": {"PURPOSE": "SWAPS"}}}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(root_action,swapper,from_symbol,to_symbol);", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_swaps_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.defi.fact_swaps__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["noncore", "full_test"], "description": "Records of all swap transactions on Aleo, including both public and private swaps.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "A boolean value indicating if the event succeeded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SWAPPER": {"name": "SWAPPER", "description": "The address that initiated the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_AMOUNT_UNADJ": {"name": "FROM_AMOUNT_UNADJ", "description": "The amount of tokens input into the swap, unadjusted for decimals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_AMOUNT": {"name": "FROM_AMOUNT", "description": "The amount of tokens input into the swap, adjusted for decimals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_SYMBOL": {"name": "FROM_SYMBOL", "description": "The token being swapped from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FROM_ID": {"name": "FROM_ID", "description": "The token id being swapped from", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_AMOUNT_UNADJ": {"name": "TO_AMOUNT_UNADJ", "description": "The amount of tokens received from the swap, unadjusted for decimals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_AMOUNT": {"name": "TO_AMOUNT", "description": "The amount of tokens received from the swap, adjusted for decimals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_SYMBOL": {"name": "TO_SYMBOL", "description": "The token being swapped to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TO_ID": {"name": "TO_ID", "description": "The token id being swapped to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ROOT_ACTION": {"name": "ROOT_ACTION", "description": "The program and function that initiated the swap", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "The name of the protocol where the swap occurred", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_SWAPS_ID": {"name": "FACT_SWAPS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "SWAPS"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/defi/defi__fact_swaps.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "meta": {"database_tags": {"table": {"PURPOSE": "SWAPS"}}}, "unique_key": ["fact_swaps_id"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.defi.fact_swaps__dbt_tmp)"], "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["noncore", "full_test"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(root_action,swapper,from_symbol,to_symbol);"]}, "created_at": 1753463697.5556066, "relation_name": "ALEO.defi.fact_swaps", "raw_code": "{{ config(\n    materialized = 'incremental',\n    meta = { 'database_tags':{ 'table':{ 'PURPOSE': 'SWAPS' }}},\n    unique_key = ['fact_swaps_id'],\n    incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from ' ~ generate_tmp_view_name(this) ~ ')'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(root_action,swapper,from_symbol,to_symbol);\",\n    merge_exclude_columns = ['inserted_timestamp'],\n    tags = ['noncore', 'full_test']\n) }}\n\nWITH arcane AS (\n    SELECT \n        block_timestamp,\n        block_id,\n        tx_id,\n        succeeded,\n        swapper,\n        from_amount_unadj,\n        from_amount,\n        from_symbol,\n        from_id,\n        to_amount_unadj,\n        to_amount,\n        to_symbol,\n        to_id,\n        root_action,\n        'Arcane Finance' as platform\n    FROM \n        {{ ref('silver__swaps_arcane') }}\n    {% if is_incremental() %}\n    WHERE\n        modified_timestamp >= DATEADD(\n            'minute',\n            -5,(\n                SELECT\n                    MAX(\n                        modified_timestamp\n                    )\n                FROM\n                    {{ this }}\n            )\n        )\n    {% endif %}\n)\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    swapper,\n    from_amount_unadj,\n    from_amount,\n    from_symbol,\n    from_id,\n    to_amount_unadj,\n    to_amount,\n    to_symbol,\n    to_id,\n    root_action,\n    platform,\n    {{ dbt_utils.generate_surrogate_key(['tx_id','platform', 'swapper']) }} AS fact_swaps_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM \n    arcane", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.defi__fact_liquidity_pool_actions": {"database": "ALEO", "schema": "defi", "name": "defi__fact_liquidity_pool_actions", "resource_type": "model", "package_name": "aleo_models", "path": "gold/defi/defi__fact_liquidity_pool_actions.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.sql", "unique_id": "model.aleo_models.defi__fact_liquidity_pool_actions", "fqn": ["aleo_models", "gold", "defi", "defi__fact_liquidity_pool_actions"], "alias": "fact_liquidity_pool_actions", "checksum": {"name": "sha256", "checksum": "eb9ea9b44a9e03430c77c24fecd5fea9ac38bd540a1543ca09d1b0a6e85d94ec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(liquidity_provider,token1_symbol,token2_symbol);", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["fact_liquidity_pool_actions_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.defi.fact_liquidity_pool_actions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["noncore", "full_test"], "description": "Records of all liquidity pool actions on Aleo, including adding and removing liquidity.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "A boolean value indicating if the event succeeded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ROOT_ACTION": {"name": "ROOT_ACTION", "description": "The program and function that initiated the liquidity pool action", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_ACTION": {"name": "LIQUIDITY_ACTION", "description": "The type of liquidity action performed (e.g., add, remove)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_PROVIDER": {"name": "LIQUIDITY_PROVIDER", "description": "The address that performed the liquidity pool action", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN1_ID": {"name": "TOKEN1_ID", "description": "The token id of the first token in the liquidity pair", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "The symbol of the first token in the liquidity pair", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN1_AMOUNT_UNADJ": {"name": "TOKEN1_AMOUNT_UNADJ", "description": "The amount of the first token added or removed from the pool, unadjusted for decimals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN1_AMOUNT": {"name": "TOKEN1_AMOUNT", "description": "The amount of the first token added or removed from the pool, adjusted for decimals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN2_ID": {"name": "TOKEN2_ID", "description": "The token id of the second token in the liquidity pair", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN2_SYMBOL": {"name": "TOKEN2_SYMBOL", "description": "The symbol of the second token in the liquidity pair", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN2_AMOUNT_UNADJ": {"name": "TOKEN2_AMOUNT_UNADJ", "description": "The amount of the second token added or removed from the pool, unadjusted for decimals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN2_AMOUNT": {"name": "TOKEN2_AMOUNT", "description": "The amount of the second token added or removed from the pool, adjusted for decimals", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LIQUIDITY_POOL_PROTOCOL": {"name": "LIQUIDITY_POOL_PROTOCOL", "description": "The liquidity pool protocol related to the action", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_LIQUIDITY_POOL_ACTIONS_ID": {"name": "FACT_LIQUIDITY_POOL_ACTIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/defi/defi__fact_liquidity_pool_actions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_predicates": ["DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from \n    \n    ALEO.defi.fact_liquidity_pool_actions__dbt_tmp)"], "unique_key": ["fact_liquidity_pool_actions_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["noncore", "full_test"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(liquidity_provider,token1_symbol,token2_symbol);"]}, "created_at": 1753463697.4527438, "relation_name": "ALEO.defi.fact_liquidity_pool_actions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_predicates = ['DBT_INTERNAL_DEST.block_timestamp::DATE >= (select min(block_timestamp::DATE) from ' ~ generate_tmp_view_name(this) ~ ')'],\n    unique_key = ['fact_liquidity_pool_actions_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(liquidity_provider,token1_symbol,token2_symbol);\",\n    tags = ['noncore', 'full_test']\n) }}\n\nWITH arcane AS (\n    SELECT \n        block_timestamp,\n        block_id,\n        tx_id,\n        succeeded,\n        root_action,\n        liquidity_action,\n        liquidity_provider,\n        token1_id,\n        token2_id,\n        token1_symbol,\n        token2_symbol,\n        token1_amount_unadj,\n        token2_amount_unadj,\n        token1_amount,\n        token2_amount,\n        'Arcane Finance' AS liquidity_pool_protocol\n    FROM \n        {{ ref('silver__liquidity_pool_actions_arcane') }}\n\n    {% if is_incremental() %}\n    WHERE\n        modified_timestamp >= DATEADD(\n            'minute',\n            -5,\n            (\n                SELECT\n                    MAX(modified_timestamp)\n                FROM\n                    {{ this }}\n            )\n        )\n    {% endif %}\n)\n\nSELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    succeeded,\n    root_action,\n    liquidity_action,\n    liquidity_provider,\n    token1_id,\n    token1_symbol,\n    token1_amount_unadj,\n    token1_amount,\n    token2_id,\n    token2_symbol,\n    token2_amount_unadj,\n    token2_amount,\n    liquidity_pool_protocol,\n    {{ dbt_utils.generate_surrogate_key(['tx_id', 'liquidity_pool_protocol', 'token1_id','token2_id']) }} AS fact_liquidity_pool_actions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    arcane -- union more later", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.stats__ez_core_metrics_hourly": {"database": "ALEO", "schema": "stats", "name": "stats__ez_core_metrics_hourly", "resource_type": "model", "package_name": "aleo_models", "path": "gold/stats/stats__ez_core_metrics_hourly.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.sql", "unique_id": "model.aleo_models.stats__ez_core_metrics_hourly", "fqn": ["aleo_models", "gold", "stats", "stats__ez_core_metrics_hourly"], "alias": "ez_core_metrics_hourly", "checksum": {"name": "sha256", "checksum": "da83f6485bd7f0aeadc478aebdc3e15df3790e86be48e74f85070b4d27aa28ff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore", "recent_test"], "meta": {"database_tags": {"table": {"PURPOSE": "STATS, METRICS, CORE, HOURLY"}}}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_timestamp_hour", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp_hour::DATE"]}, "tags": ["noncore", "recent_test"], "description": "Hourly core metrics for the Aleo blockchain.", "columns": {"BLOCK_TIMESTAMP_HOUR": {"name": "BLOCK_TIMESTAMP_HOUR", "description": "Truncated timestamp of a block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID_MIN": {"name": "BLOCK_ID_MIN", "description": "Minimum block ID in an hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID_MAX": {"name": "BLOCK_ID_MAX", "description": "Maximum block ID in an hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_COUNT": {"name": "BLOCK_COUNT", "description": "Number of blocks in an hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSACTION_COUNT": {"name": "TRANSACTION_COUNT", "description": "Number of transactions in an hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSACTION_COUNT_SUCCESS": {"name": "TRANSACTION_COUNT_SUCCESS", "description": "Number of successful transactions in an hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSACTION_COUNT_FAILED": {"name": "TRANSACTION_COUNT_FAILED", "description": "Number of failed transactions in an hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_FROM_COUNT": {"name": "UNIQUE_FROM_COUNT", "description": "Number of unique senders in an hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_FEES_NATIVE": {"name": "TOTAL_FEES_NATIVE", "description": "Total fees in native currency for an hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_FEES_USD": {"name": "TOTAL_FEES_USD", "description": "Total fees in USD for an hour.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EZ_CORE_METRICS_HOURLY_ID": {"name": "EZ_CORE_METRICS_HOURLY_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"database_tags": {"table": {"PURPOSE": "STATS, METRICS, CORE, HOURLY"}}}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/stats/stats__ez_core_metrics_hourly.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "block_timestamp_hour", "cluster_by": ["block_timestamp_hour::DATE"], "tags": ["noncore", "recent_test"], "meta": {"database_tags": {"table": {"PURPOSE": "STATS, METRICS, CORE, HOURLY"}}}}, "created_at": 1753463697.6475961, "relation_name": "ALEO.stats.ez_core_metrics_hourly", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    unique_key = \"block_timestamp_hour\",\n    cluster_by = ['block_timestamp_hour::DATE'],\n    tags = ['noncore','recent_test'],\n    meta ={ 'database_tags':{ 'table':{ 'PURPOSE': 'STATS, METRICS, CORE, HOURLY',\n    }} }\n) }}\n-- depends_on: {{ ref('core__fact_blocks') }}\n-- depends_on: {{ ref('core__fact_transactions') }}\n{% if execute %}\n\n{% if is_incremental() %}\n{% set query %}\n\nSELECT\n    MIN(DATE_TRUNC('hour', block_timestamp)) block_timestamp_hour\nFROM\n    {{ ref('core__fact_blocks') }}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    ) {% endset %}\n    {% set min_block_timestamp_hour_blocks = run_query(query).columns [0].values() [0] %}\n    {% if not min_block_timestamp_hour_blocks or min_block_timestamp_hour_blocks == 'None' %}\n        {% set min_block_timestamp_hour_blocks = '2022-09-04 00:00:00' %}\n    {% endif %}\n    {% set query2 %}\nSELECT\n    MIN(DATE_TRUNC('hour', block_timestamp)) block_timestamp_hour\nFROM\n    {{ ref('core__fact_transactions') }}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    ) {% endset %}\n    {% set min_block_timestamp_hour_txns = run_query(query2).columns [0].values() [0] %}\n    {% if not min_block_timestamp_hour_txns or min_block_timestamp_hour_txns == 'None' %}\n        {% set min_block_timestamp_hour_txns = '2024-09-04 00:00:00' %}\n    {% endif %}\n{% endif %}\n{% endif %}\nWITH txs AS (\n    SELECT\n        block_timestamp_hour,\n        transaction_count,\n        transaction_count_success,\n        transaction_count_failed,\n        unique_from_count,\n        total_fees AS total_fees_native,\n        price AS imputed_close,\n        core_metrics_hourly_id AS ez_core_metrics_hourly_id,\n        s.inserted_timestamp,\n        s.modified_timestamp\n    FROM\n        {{ ref('silver_stats__core_metrics_hourly') }}\n        s\n        LEFT JOIN {{ ref('price__ez_prices_hourly') }}\n        p\n        ON s.block_timestamp_hour = p.hour\n        AND p.symbol = 'ALEO'\n        AND p.token_address IS NULL\n    {% if is_incremental() %}\n    WHERE\n        block_timestamp_hour >= LEAST(\n            COALESCE(\n                '{{ min_block_timestamp_hour_blocks }}',\n                '2024-09-04 00:00:00'\n            ),\n            COALESCE(\n                '{{ min_block_timestamp_hour_txns }}',\n                '2024-09-04 00:00:00'\n            )\n        )\n    {% endif %}\n),\nblocks AS (\n    SELECT\n        block_timestamp_hour,\n        block_id_min,\n        block_id_max,\n        block_count,\n        core_metrics_block_hourly_id,\n        inserted_timestamp,\n        modified_timestamp\n    FROM\n        {{ ref('silver_stats__core_metrics_block_hourly') }}\n    {% if is_incremental() %}\n    WHERE\n        block_timestamp_hour >= LEAST(\n            COALESCE(\n                '{{ min_block_timestamp_hour_blocks }}',\n                '2024-09-04 00:00:00'\n            ),\n            COALESCE(\n                '{{ min_block_timestamp_hour_txns }}',\n                '2024-09-04 00:00:00'\n            )\n        )\n    {% endif %}\n)\nSELECT\n    A.block_timestamp_hour,\n    A.block_id_min,\n    A.block_id_max,\n    A.block_count,\n    b.transaction_count,\n    b.transaction_count_success,\n    b.transaction_count_failed,\n    b.unique_from_count,\n    b.total_fees_native,\n    ROUND(\n        b.total_fees_native * b.imputed_close,\n        2\n    ) AS total_fees_usd,\n    A.core_metrics_block_hourly_id AS ez_core_metrics_hourly_id,\n    GREATEST(\n        A.inserted_timestamp,\n        b.inserted_timestamp\n    ) AS inserted_timestamp,\n    GREATEST(\n        A.modified_timestamp,\n        b.modified_timestamp\n    ) AS modified_timestamp\nFROM\n    blocks A\n    JOIN txs b\n    ON A.block_timestamp_hour = b.block_timestamp_hour", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}, {"name": "core__fact_transactions", "package": null, "version": null}, {"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}, {"name": "price__ez_prices_hourly", "package": null, "version": null}, {"name": "silver_stats__core_metrics_block_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_blocks", "model.aleo_models.core__fact_transactions", "model.aleo_models.silver_stats__core_metrics_hourly", "model.aleo_models.price__ez_prices_hourly", "model.aleo_models.silver_stats__core_metrics_block_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__programs_recent": {"database": "ALEO", "schema": "test_core", "name": "test_core__programs_recent", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/programs/test_core__programs_recent.sql", "original_file_path": "models/gold/tests/programs/test_core__programs_recent.sql", "unique_id": "model.aleo_models.test_core__programs_recent", "fqn": ["aleo_models", "gold", "tests", "programs", "test_core__programs_recent"], "alias": "programs_recent", "checksum": {"name": "sha256", "checksum": "984cc5116011eea10dede8e28a6501662b6d6c2a95e79b453f673222a153dcfe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Dimension table containing information about programs deployed on the network.", "columns": {"DEPLOYMENT_BLOCK_ID": {"name": "DEPLOYMENT_BLOCK_ID", "description": "The ID of the block in which this program was deployed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DEPLOYMENT_BLOCK_TIMESTAMP": {"name": "DEPLOYMENT_BLOCK_TIMESTAMP", "description": "The timestamp of the block in which this program was deployed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "The identifier of the program associated with this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EDITION": {"name": "EDITION", "description": "The edition number of the program.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM": {"name": "PROGRAM", "description": "The full program code as a string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "VERIFYING_KEYS": {"name": "VERIFYING_KEYS", "description": "The verifying keys associated with the program, used for cryptographic verification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_PROGRAM_ID": {"name": "DIM_PROGRAM_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERT_TIMESTAMP": {"name": "INSERT_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/programs/test_core__programs_recent.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["recent_test"]}, "created_at": 1753463697.7063227, "relation_name": "ALEO.test_core.programs_recent", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['recent_test']\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_date\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_date DESC\n        ) = 3\n)\nSELECT \n    * \nFROM \n    {{ ref('core__dim_programs') }}\nWHERE \n    modified_timestamp :: DATE >= (\n        SELECT \n            block_date \n        FROM \n            last_3_days\n)", "language": "sql", "refs": [{"name": "_max_block_by_date", "package": null, "version": null}, {"name": "core__dim_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__dim_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__blocks_recent": {"database": "ALEO", "schema": "test_core", "name": "test_core__blocks_recent", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/blocks/test_core__blocks_recent.sql", "original_file_path": "models/gold/tests/blocks/test_core__blocks_recent.sql", "unique_id": "model.aleo_models.test_core__blocks_recent", "fqn": ["aleo_models", "gold", "tests", "blocks", "test_core__blocks_recent"], "alias": "blocks_recent", "checksum": {"name": "sha256", "checksum": "eb795d9d7ca28dba8d8624a75dacd4dff1c7c93af8b01504210108c74721a852"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/blocks/test_core__blocks_recent.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["recent_test"]}, "created_at": 1753463697.7163248, "relation_name": "ALEO.test_core.blocks_recent", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['recent_test']\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_date\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_date DESC\n        ) = 3\n)\nSELECT\n    *\nFROM\n    {{ ref('core__fact_blocks') }}\nWHERE\n    block_timestamp :: DATE >= (\n        SELECT\n            block_date\n        FROM\n            last_3_days\n    )", "language": "sql", "refs": [{"name": "_max_block_by_date", "package": null, "version": null}, {"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__transfers_full": {"database": "ALEO", "schema": "test_core", "name": "test_core__transfers_full", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/transfers/test_core__transfers_full.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.sql", "unique_id": "model.aleo_models.test_core__transfers_full", "fqn": ["aleo_models", "gold", "tests", "transfers", "test_core__transfers_full"], "alias": "transfers_full", "checksum": {"name": "sha256", "checksum": "dafe99b07610b0bc9993c928667b5a8a24634fd613fcb1139efa67fe869cb2fd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["full_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["full_test"], "description": "Records of all address to address transfers on Aleo.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "The boolean status of the transaction. If the transaction was successful, this value will be `true`. If the transaction was unsuccessful, this value will be `false`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_ID": {"name": "TRANSITION_ID", "description": "The unique identifier for this specific transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "The type of transfer, namely public or private.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "Address that tokens are transferred from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "Address that tokens are transferred to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Number of tokens transferred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_NATIVE": {"name": "IS_NATIVE", "description": "Whether the transfer is a native transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "Token address of the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_TRANSFERS_ID": {"name": "FACT_TRANSFERS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/transfers/test_core__transfers_full.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["full_test"]}, "created_at": 1753463697.7879355, "relation_name": "ALEO.test_core.transfers_full", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['full_test']\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__fact_transfers') }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__transfers_recent": {"database": "ALEO", "schema": "test_core", "name": "test_core__transfers_recent", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/transfers/test_core__transfers_recent.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.sql", "unique_id": "model.aleo_models.test_core__transfers_recent", "fqn": ["aleo_models", "gold", "tests", "transfers", "test_core__transfers_recent"], "alias": "transfers_recent", "checksum": {"name": "sha256", "checksum": "0cbb63683355f09a5ad8713f04cea5e156cf5c69891534c73dd045426d5b9008"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Records of all address to address transfers on Aleo.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_ID": {"name": "TRANSITION_ID", "description": "The unique identifier for this specific transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "The boolean status of the transaction. If the transaction was successful, this value will be `true`. If the transaction was unsuccessful, this value will be `false`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "The type of transfer, namely public or private.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "Address that tokens are transferred from.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "Address that tokens are transferred to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Number of tokens transferred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_NATIVE": {"name": "IS_NATIVE", "description": "Whether the transfer is a native transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "Token address of the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_TRANSFERS_ID": {"name": "FACT_TRANSFERS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/transfers/test_core__transfers_recent.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["recent_test"]}, "created_at": 1753463697.7356257, "relation_name": "ALEO.test_core.transfers_recent", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['recent_test']\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_date\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_date DESC\n        ) = 3\n)\nSELECT\n    *\nFROM\n    {{ ref('core__fact_transfers') }}\nWHERE\n    block_timestamp :: DATE >= (\n        SELECT\n            block_date\n        FROM\n            last_3_days\n    )", "language": "sql", "refs": [{"name": "_max_block_by_date", "package": null, "version": null}, {"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__block_solutions_full": {"database": "ALEO", "schema": "test_core", "name": "test_core__block_solutions_full", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/block_solutions/test_core__block_solutions_full.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.sql", "unique_id": "model.aleo_models.test_core__block_solutions_full", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "test_core__block_solutions_full"], "alias": "block_solutions_full", "checksum": {"name": "sha256", "checksum": "e93617e12c6c4cdbab383a32e908e8f246fbff9930aa931fc83f01de3bc3fad4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["full_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["full_test"], "description": "Full test suite for block solutions model", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_PUZZLE_REWARD": {"name": "BLOCK_PUZZLE_REWARD", "description": "The puzzle reward of the block solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The unique address referring to an entity on the blockchain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COUNTER": {"name": "COUNTER", "description": "The counter of the block solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EPOCH_HASH": {"name": "EPOCH_HASH", "description": "The epoch hash of the block solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SOLUTION_ID": {"name": "SOLUTION_ID", "description": "A unique identifier for the prover solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TARGET": {"name": "TARGET", "description": "The target of the block solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD_RAW": {"name": "REWARD_RAW", "description": "Raw reward for the block solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD": {"name": "REWARD", "description": "Converted reward for the block solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_BLOCK_SOLUTIONS_ID": {"name": "FACT_BLOCK_SOLUTIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_INVOCATION_ID": {"name": "_INVOCATION_ID", "description": "The invocation ID of data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["full_test"]}, "created_at": 1753463697.859371, "relation_name": "ALEO.test_core.block_solutions_full", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['full_test']\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__fact_block_solutions') }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__block_solutions_recent": {"database": "ALEO", "schema": "test_core", "name": "test_core__block_solutions_recent", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/block_solutions/test_core__block_solutions_recent.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.sql", "unique_id": "model.aleo_models.test_core__block_solutions_recent", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "test_core__block_solutions_recent"], "alias": "block_solutions_recent", "checksum": {"name": "sha256", "checksum": "933bc450c53fd796f9e557d4b633f7b2f7014063ecd6bf8c466e0abd16537800"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Records of all prover solutions for each block, including block details, rewards, and solution-specific information.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_PUZZLE_REWARD": {"name": "BLOCK_PUZZLE_REWARD", "description": "The total coinbase reward issued to the network for each block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The unique address referring to an entity on the blockchain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COUNTER": {"name": "COUNTER", "description": "A counter value associated with the solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EPOCH_HASH": {"name": "EPOCH_HASH", "description": "The hash of the epoch in which the solution was found.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SOLUTION_ID": {"name": "SOLUTION_ID", "description": "A unique identifier for the prover solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TARGET": {"name": "TARGET", "description": "The target difficulty for the block solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD_RAW": {"name": "REWARD_RAW", "description": "The raw value of the reward for solving the block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD": {"name": "REWARD", "description": "The processed or formatted value of the reward for solving the block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_BLOCK_SOLUTIONS_ID": {"name": "FACT_BLOCK_SOLUTIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["recent_test"]}, "created_at": 1753463697.9200728, "relation_name": "ALEO.test_core.block_solutions_recent", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['recent_test']\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_date\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_date DESC\n        ) = 3\n)\nSELECT\n    *\nFROM\n    {{ ref('core__fact_block_solutions') }}\nWHERE\n    block_timestamp :: DATE >= (\n        SELECT\n            block_date\n        FROM\n            last_3_days\n    )", "language": "sql", "refs": [{"name": "_max_block_by_date", "package": null, "version": null}, {"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_defi__swaps_recent": {"database": "ALEO", "schema": "test_defi", "name": "test_defi__swaps_recent", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/defi/test_defi__swaps_recent.sql", "original_file_path": "models/gold/tests/defi/test_defi__swaps_recent.sql", "unique_id": "model.aleo_models.test_defi__swaps_recent", "fqn": ["aleo_models", "gold", "tests", "defi", "test_defi__swaps_recent"], "alias": "swaps_recent", "checksum": {"name": "sha256", "checksum": "f98703d2d051f56ee2fcfd474aed084ac17fcdb554aea85d554c3d8832037ba0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Records of all swap transactions on Aleo, including both public and private swaps.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/defi/test_defi__swaps_recent.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["recent_test"]}, "created_at": 1753463697.943292, "relation_name": "ALEO.test_defi.swaps_recent", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['recent_test']\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_date\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_date DESC\n        ) = 3\n)\nSELECT\n    *\nFROM\n    {{ ref('defi__fact_swaps') }}\nWHERE\n    block_timestamp :: DATE >= (\n        SELECT\n            block_date\n        FROM\n            last_3_days\n    )", "language": "sql", "refs": [{"name": "_max_block_by_date", "package": null, "version": null}, {"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models._max_block_by_date", "model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_defi__liquidity_actions_recent": {"database": "ALEO", "schema": "test_defi", "name": "test_defi__liquidity_actions_recent", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/defi/test_defi__liquidity_actions_recent.sql", "original_file_path": "models/gold/tests/defi/test_defi__liquidity_actions_recent.sql", "unique_id": "model.aleo_models.test_defi__liquidity_actions_recent", "fqn": ["aleo_models", "gold", "tests", "defi", "test_defi__liquidity_actions_recent"], "alias": "liquidity_actions_recent", "checksum": {"name": "sha256", "checksum": "dd7058c1b286973f065141c5fdae1daeac49ea8385644985a0b611e51e276199"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Records of all liquidity pool actions on Aleo.", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/defi/test_defi__liquidity_actions_recent.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["recent_test"]}, "created_at": 1753463697.956393, "relation_name": "ALEO.test_defi.liquidity_actions_recent", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['recent_test']\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_date\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_date DESC\n        ) = 3\n)\nSELECT\n    *\nFROM\n    {{ ref('defi__fact_liquidity_pool_actions') }}\nWHERE\n    block_timestamp :: DATE >= (\n        SELECT\n            block_date\n        FROM\n            last_3_days\n    )", "language": "sql", "refs": [{"name": "_max_block_by_date", "package": null, "version": null}, {"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models._max_block_by_date", "model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__transitions_full": {"database": "ALEO", "schema": "test_core", "name": "test_core__transitions_full", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/transitions/test_core__transitions_full.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.sql", "unique_id": "model.aleo_models.test_core__transitions_full", "fqn": ["aleo_models", "gold", "tests", "transitions", "test_core__transitions_full"], "alias": "transitions_full", "checksum": {"name": "sha256", "checksum": "6d35fb9e16769b27afae045d1245ec8810e06d73f02eb5b0e63ef61ca9ae6189"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["full_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["full_test"], "description": "Fact table containing information about all transitions within transactions on the network.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "The index of the transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_ID": {"name": "TRANSITION_ID", "description": "The unique identifier for this specific transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "The identifier of the program associated with this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FUNCTION": {"name": "FUNCTION", "description": "The function executed in this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INPUTS": {"name": "INPUTS", "description": "The input parameters or data for this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OUTPUTS": {"name": "OUTPUTS", "description": "The input parameters or data for this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_TRANSITIONS_ID": {"name": "FACT_TRANSITIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/transitions/test_core__transitions_full.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["full_test"]}, "created_at": 1753463697.9841223, "relation_name": "ALEO.test_core.transitions_full", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['full_test']\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__fact_transitions') }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__transitions_recent": {"database": "ALEO", "schema": "test_core", "name": "test_core__transitions_recent", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/transitions/test_core__transitions_recent.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_recent.sql", "unique_id": "model.aleo_models.test_core__transitions_recent", "fqn": ["aleo_models", "gold", "tests", "transitions", "test_core__transitions_recent"], "alias": "transitions_recent", "checksum": {"name": "sha256", "checksum": "1e94d84de8244830cc52a552b574da81ccef02adce5156b6845c7552b6eccce6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Fact table containing information about all transitions within transactions on the network.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "The index of the transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_ID": {"name": "TRANSITION_ID", "description": "The unique identifier for this specific transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "The identifier of the program associated with this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FUNCTION": {"name": "FUNCTION", "description": "The function executed in this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INPUTS": {"name": "INPUTS", "description": "The input parameters or data for this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OUTPUTS": {"name": "OUTPUTS", "description": "The input parameters or data for this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_TRANSITIONS_ID": {"name": "FACT_TRANSITIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/transitions/test_core__transitions_recent.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["recent_test"]}, "created_at": 1753463697.9644341, "relation_name": "ALEO.test_core.transitions_recent", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['recent_test']\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_date\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_date DESC\n        ) = 3\n)\nSELECT\n    *\nFROM\n    {{ ref('core__fact_transitions') }}\nWHERE\n    block_timestamp :: DATE >= (\n        SELECT\n            block_date\n        FROM\n            last_3_days\n    )", "language": "sql", "refs": [{"name": "_max_block_by_date", "package": null, "version": null}, {"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__block_round_batches_recent": {"database": "ALEO", "schema": "test_core", "name": "test_core__block_round_batches_recent", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/block_round_batches/test_core__block_round_batches_recent.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_recent.sql", "unique_id": "model.aleo_models.test_core__block_round_batches_recent", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "test_core__block_round_batches_recent"], "alias": "block_round_batches_recent", "checksum": {"name": "sha256", "checksum": "41055519f3533703554ec8f9f998b0344c4fc60174fbd3f0e10b8126bae88b8d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Recency test suite for block_round_batches model", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ROUND": {"name": "ROUND", "description": "Prover round data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BATCH_ID": {"name": "BATCH_ID", "description": "Batch ID associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AUTHOR": {"name": "AUTHOR", "description": "The author of the block round.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMMITTEE_ID": {"name": "COMMITTEE_ID", "description": "The committee ID of the block round.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSMISSION_IDS": {"name": "TRANSMISSION_IDS", "description": "The transmission IDs of the block round.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_BLOCK_ROUND_BATCHES_ID": {"name": "FACT_BLOCK_ROUND_BATCHES_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/block_round_batches/test_core__block_round_batches_recent.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["recent_test"]}, "created_at": 1753463698.0783465, "relation_name": "ALEO.test_core.block_round_batches_recent", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['recent_test']\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_date\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_date DESC\n        ) = 3\n)\nSELECT\n    *\nFROM\n    {{ ref('core__fact_block_round_batches') }}\nWHERE\n    block_timestamp :: DATE >= (\n        SELECT\n            block_date\n        FROM\n            last_3_days\n    )", "language": "sql", "refs": [{"name": "_max_block_by_date", "package": null, "version": null}, {"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__block_round_batches_full": {"database": "ALEO", "schema": "test_core", "name": "test_core__block_round_batches_full", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/block_round_batches/test_core__block_round_batches_full.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.sql", "unique_id": "model.aleo_models.test_core__block_round_batches_full", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "test_core__block_round_batches_full"], "alias": "block_round_batches_full", "checksum": {"name": "sha256", "checksum": "ca5feaed7a4096ce1c81c8325e5ee2dfdb575428a3ade56ccdb1e6b14b1e2223"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["full_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["full_test"], "description": "Full test suite for block_round_batches model", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ROUND": {"name": "ROUND", "description": "Prover round data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BATCH_ID": {"name": "BATCH_ID", "description": "Batch ID associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AUTHOR": {"name": "AUTHOR", "description": "The author of the block round, transition, or batch type object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMMITTEE_ID": {"name": "COMMITTEE_ID", "description": "The committee ID of the block round.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSMISSION_IDS": {"name": "TRANSMISSION_IDS", "description": "The transmission IDs of the block round.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_BLOCK_ROUND_BATCHES_ID": {"name": "FACT_BLOCK_ROUND_BATCHES_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["full_test"]}, "created_at": 1753463698.0396857, "relation_name": "ALEO.test_core.block_round_batches_full", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['full_test']\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__fact_block_round_batches') }}", "language": "sql", "refs": [{"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.test_core__transactions_recent": {"database": "ALEO", "schema": "test_core", "name": "test_core__transactions_recent", "resource_type": "model", "package_name": "aleo_models", "path": "gold/tests/transactions/test_core__transactions_recent.sql", "original_file_path": "models/gold/tests/transactions/test_core__transactions_recent.sql", "unique_id": "model.aleo_models.test_core__transactions_recent", "fqn": ["aleo_models", "gold", "tests", "transactions", "test_core__transactions_recent"], "alias": "transactions_recent", "checksum": {"name": "sha256", "checksum": "9083ca4832af6dca23af18d6f2dcb3b025ab552519d0ddbfec3e52ebf5688d64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Fact table containing information about all transactions on the network.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "The index of the transaction within the block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "The boolean status of the transaction. If the transaction was successful, this value will be `true`. If the transaction was unsuccessful, this value will be `false`.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "The type of the transaction (e.g., 'execute', 'deploy', 'fee'.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EXECUTION_MSG": {"name": "EXECUTION_MSG", "description": "The execution message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DEPLOYMENT_MSG": {"name": "DEPLOYMENT_MSG", "description": "The deployment message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OWNER_MSG": {"name": "OWNER_MSG", "description": "The owner message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FINALIZE_MSG": {"name": "FINALIZE_MSG", "description": "The finalize message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REJECTED_MSG": {"name": "REJECTED_MSG", "description": "The rejected message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_COUNT": {"name": "TRANSITION_COUNT", "description": "The number of transitions in the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_TRANSACTIONS_ID": {"name": "FACT_TRANSACTIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/tests/transactions/test_core__transactions_recent.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["recent_test"]}, "created_at": 1753463698.096348, "relation_name": "ALEO.test_core.transactions_recent", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['recent_test']\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_date\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_date DESC\n        ) = 3\n)\nSELECT\n    *\nFROM\n    {{ ref('core__fact_transactions') }}\nWHERE\n    block_timestamp :: DATE >= (\n        SELECT\n            block_date\n        FROM\n            last_3_days\n    )", "language": "sql", "refs": [{"name": "_max_block_by_date", "package": null, "version": null}, {"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.price__fact_prices_ohlc_hourly": {"database": "ALEO", "schema": "price", "name": "price__fact_prices_ohlc_hourly", "resource_type": "model", "package_name": "aleo_models", "path": "gold/price/price__fact_prices_ohlc_hourly.sql", "original_file_path": "models/gold/price/price__fact_prices_ohlc_hourly.sql", "unique_id": "model.aleo_models.price__fact_prices_ohlc_hourly", "fqn": ["aleo_models", "gold", "price", "price__fact_prices_ohlc_hourly"], "alias": "fact_prices_ohlc_hourly", "checksum": {"name": "sha256", "checksum": "fbb5ad2ffe0e042bb0cdee6e8fd2575a1fdad976ce4a5e21ca7424aaa49b89db"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore", "recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["noncore", "recent_test"], "description": "A comprehensive fact table holding id and provider specific open, high, low, close hourly prices, from multiple providers. This data set includes raw, non-transformed data coming directly from the provider APIs and rows are not intended to be unique. As a result, there may be data quality issues persisting in the APIs that flow through to this fact based model. If you are interested in using a curated data set instead, please utilize ez_prices_hourly.", "columns": {"HOUR": {"name": "HOUR", "description": "Hour that the price was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "The unique identifier representing the asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OPEN": {"name": "OPEN", "description": "Opening price of the recorded hour in USD.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "HIGH": {"name": "HIGH", "description": "Highest price of the recorded hour in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "LOW": {"name": "LOW", "description": "Lowest price of the recorded hour in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CLOSE": {"name": "CLOSE", "description": "Closing price of the recorded hour in USD", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FACT_PRICES_OHLC_HOURLY_ID": {"name": "FACT_PRICES_OHLC_HOURLY_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/price/price__fact_prices_ohlc_hourly.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["noncore", "recent_test"]}, "created_at": 1753463698.1194258, "relation_name": "ALEO.price.fact_prices_ohlc_hourly", "raw_code": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true, \"columns\": true },\n    tags = ['noncore', 'recent_test']\n) }}\n\nSELECT\n    asset_id,\n    recorded_hour AS HOUR,\n    OPEN,\n    high,\n    low,\n    CLOSE,\n    provider,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_provider_prices_id AS fact_prices_ohlc_hourly_id\nFROM\n    {{ ref('silver__complete_provider_prices') }}", "language": "sql", "refs": [{"name": "silver__complete_provider_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__complete_provider_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.price__ez_asset_metadata": {"database": "ALEO", "schema": "price", "name": "price__ez_asset_metadata", "resource_type": "model", "package_name": "aleo_models", "path": "gold/price/price__ez_asset_metadata.sql", "original_file_path": "models/gold/price/price__ez_asset_metadata.sql", "unique_id": "model.aleo_models.price__ez_asset_metadata", "fqn": ["aleo_models", "gold", "price", "price__ez_asset_metadata"], "alias": "ez_asset_metadata", "checksum": {"name": "sha256", "checksum": "fd7f279fd2bd4fa7008b48c0554976e73f5de14d1ad41a40a4a0c2c46e307d59"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore", "recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["noncore", "recent_test"], "description": "A convenience table holding prioritized asset metadata and other relevant details pertaining to each token_address and native asset. This data set is highly curated and contains metadata for one unique asset per blockchain.", "columns": {"ASSET_ID": {"name": "ASSET_ID", "description": "The unique identifier representing the asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "The name of asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset. The case (upper / lower) may or may not be specified within the `dim_asset_metadata` table, as this column is raw and not transformed, coming directly from the provider APIs. However, in the `ez_` views, it will be lowercase by default for all EVMs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The Blockchain, Network, or Platform for this asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals for the asset. May be NULL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_NATIVE": {"name": "IS_NATIVE", "description": "A flag indicating assets native to the respective blockchain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_DEPRECATED": {"name": "IS_DEPRECATED", "description": "A flag indicating if the asset is deprecated or no longer supported by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EZ_ASSET_METADATA_ID": {"name": "EZ_ASSET_METADATA_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/price/price__ez_asset_metadata.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["noncore", "recent_test"]}, "created_at": 1753463698.1169438, "relation_name": "ALEO.price.ez_asset_metadata", "raw_code": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true, \"columns\": true },\n    tags = ['noncore', 'recent_test']\n) }}\n\nSELECT\n    token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    TRUE AS is_native,\n    is_deprecated,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_asset_metadata_id AS ez_asset_metadata_id\nFROM\n    {{ ref('silver__complete_token_asset_metadata') }}\nUNION ALL\nSELECT\n    NULL AS token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    TRUE AS is_native,\n    is_deprecated,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_native_asset_metadata_id AS ez_asset_metadata_id\nFROM\n    {{ ref('silver__complete_native_asset_metadata') }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}, {"name": "silver__complete_native_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__complete_token_asset_metadata", "model.aleo_models.silver__complete_native_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.price__dim_asset_metadata": {"database": "ALEO", "schema": "price", "name": "price__dim_asset_metadata", "resource_type": "model", "package_name": "aleo_models", "path": "gold/price/price__dim_asset_metadata.sql", "original_file_path": "models/gold/price/price__dim_asset_metadata.sql", "unique_id": "model.aleo_models.price__dim_asset_metadata", "fqn": ["aleo_models", "gold", "price", "price__dim_asset_metadata"], "alias": "dim_asset_metadata", "checksum": {"name": "sha256", "checksum": "9bee085684fee85d91b806224dcefd685c10f869963984f310bca2666b2ab54a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore", "recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["noncore", "recent_test"], "description": "A comprehensive dimensional table holding asset metadata and other relevant details pertaining to each id, from multiple providers. This data set includes raw, non-transformed data coming directly from the provider APIs and rows are not intended to be unique. As a result, there may be data quality issues persisting in the APIs that flow through to this dimensional model. If you are interested in using a curated data set instead, please utilize ez_asset_metadata.", "columns": {"PROVIDER": {"name": "PROVIDER", "description": "The provider or source of the data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "The unique identifier representing the asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "The name of asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset. The case (upper / lower) may or may not be specified within the `dim_asset_metadata` table, as this column is raw and not transformed, coming directly from the provider APIs. However, in the `ez_` views, it will be lowercase by default for all EVMs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The Blockchain, Network, or Platform for this asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN_ID": {"name": "BLOCKCHAIN_ID", "description": "The unique identifier of the Blockchain, Network, or Platform for this asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DIM_ASSET_METADATA_ID": {"name": "DIM_ASSET_METADATA_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/price/price__dim_asset_metadata.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["noncore", "recent_test"]}, "created_at": 1753463698.123017, "relation_name": "ALEO.price.dim_asset_metadata", "raw_code": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true, \"columns\": true },\n    tags = ['noncore','recent_test']\n) }}\n\nSELECT\n    token_address,\n    asset_id,\n    symbol,\n    NAME,\n    platform AS blockchain,\n    platform_id AS blockchain_id,\n    provider,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_provider_asset_metadata_id AS dim_asset_metadata_id\nFROM\n    {{ ref('silver__complete_provider_asset_metadata') }}", "language": "sql", "refs": [{"name": "silver__complete_provider_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__complete_provider_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.price__ez_prices_hourly": {"database": "ALEO", "schema": "price", "name": "price__ez_prices_hourly", "resource_type": "model", "package_name": "aleo_models", "path": "gold/price/price__ez_prices_hourly.sql", "original_file_path": "models/gold/price/price__ez_prices_hourly.sql", "unique_id": "model.aleo_models.price__ez_prices_hourly", "fqn": ["aleo_models", "gold", "price", "price__ez_prices_hourly"], "alias": "ez_prices_hourly", "checksum": {"name": "sha256", "checksum": "d749bd44ae3554eb603e7807f63d9f367e26f486db4a332664c5bae5f1717c7d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore", "recent_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["noncore", "recent_test"], "description": "A convenience table for determining token prices by address and blockchain, and native asset prices by symbol and blockchain. This data set is highly curated and contains metadata for one price per hour per unique asset and blockchain.", "columns": {"HOUR": {"name": "HOUR", "description": "Hour that the price was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset. The case (upper / lower) may or may not be specified within the `dim_asset_metadata` table, as this column is raw and not transformed, coming directly from the provider APIs. However, in the `ez_` views, it will be lowercase by default for all EVMs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The Blockchain, Network, or Platform for this asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals for the asset. May be NULL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "Closing price of the recorded hour in USD.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_NATIVE": {"name": "IS_NATIVE", "description": "A flag indicating assets native to the respective blockchain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_IMPUTED": {"name": "IS_IMPUTED", "description": "A flag indicating if the price was imputed, or derived, from the last arriving record. This is generally used for tokens with low-liquidity or inconsistent reporting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_DEPRECATED": {"name": "IS_DEPRECATED", "description": "A flag indicating if the asset is deprecated or no longer supported by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EZ_PRICES_HOURLY_ID": {"name": "EZ_PRICES_HOURLY_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/gold/price/price__ez_prices_hourly.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["noncore", "recent_test"]}, "created_at": 1753463698.1213522, "relation_name": "ALEO.price.ez_prices_hourly", "raw_code": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true, \"columns\": true },\n    tags = ['noncore', 'recent_test']\n) }}\n\nSELECT\n    HOUR,\n    token_address,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    FALSE AS is_native,\n    is_imputed,\n    is_deprecated,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_prices_id AS ez_prices_hourly_id\nFROM\n    {{ ref('silver__complete_token_prices') }}\nUNION ALL\nSELECT\n    HOUR,\n    NULL AS token_address,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    TRUE AS is_native,\n    is_imputed,\n    is_deprecated,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_native_prices_id AS ez_prices_hourly_id\nFROM\n    {{ ref('silver__complete_native_prices') }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}, {"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__complete_token_prices", "model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.github_actions__tasks": {"database": "ALEO", "schema": "github_actions", "name": "github_actions__tasks", "resource_type": "model", "package_name": "aleo_models", "path": "github_actions/github_actions__tasks.sql", "original_file_path": "models/github_actions/github_actions__tasks.sql", "unique_id": "model.aleo_models.github_actions__tasks", "fqn": ["aleo_models", "github_actions", "github_actions__tasks"], "alias": "tasks", "checksum": {"name": "sha256", "checksum": "5d7cc2c25b75b28b272236732d1ef2503568e316ff347b4b7cb093fa1c9dd08d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463694.989488, "relation_name": "ALEO.github_actions.tasks", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\n{{ fsc_utils.gha_tasks_view() }}", "language": "sql", "refs": [], "sources": [["github_actions", "workflows"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_tasks_view", "macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.github_actions.workflows"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.github_actions__task_history": {"database": "ALEO", "schema": "github_actions", "name": "github_actions__task_history", "resource_type": "model", "package_name": "aleo_models", "path": "github_actions/github_actions__task_history.sql", "original_file_path": "models/github_actions/github_actions__task_history.sql", "unique_id": "model.aleo_models.github_actions__task_history", "fqn": ["aleo_models", "github_actions", "github_actions__task_history"], "alias": "task_history", "checksum": {"name": "sha256", "checksum": "930efeff096136e9b4c944ffed5eaff9637db22700ad70d546b04921d45618cf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463694.9958372, "relation_name": "ALEO.github_actions.task_history", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\n{{ fsc_utils.gha_task_history_view() }}", "language": "sql", "refs": [{"name": "github_actions__tasks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_task_history_view", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.github_actions__tasks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.github_actions__task_schedule": {"database": "ALEO", "schema": "github_actions", "name": "github_actions__task_schedule", "resource_type": "model", "package_name": "aleo_models", "path": "github_actions/github_actions__task_schedule.sql", "original_file_path": "models/github_actions/github_actions__task_schedule.sql", "unique_id": "model.aleo_models.github_actions__task_schedule", "fqn": ["aleo_models", "github_actions", "github_actions__task_schedule"], "alias": "task_schedule", "checksum": {"name": "sha256", "checksum": "79fc9efc97518abfc95c04fd8a99218dd62462dbbf6bd6182488b8746d64e1e1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.0048633, "relation_name": "ALEO.github_actions.task_schedule", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\n{{ fsc_utils.gha_task_schedule_view() }}", "language": "sql", "refs": [{"name": "github_actions__tasks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_task_schedule_view", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.github_actions__tasks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.github_actions__task_performance": {"database": "ALEO", "schema": "github_actions", "name": "github_actions__task_performance", "resource_type": "model", "package_name": "aleo_models", "path": "github_actions/github_actions__task_performance.sql", "original_file_path": "models/github_actions/github_actions__task_performance.sql", "unique_id": "model.aleo_models.github_actions__task_performance", "fqn": ["aleo_models", "github_actions", "github_actions__task_performance"], "alias": "task_performance", "checksum": {"name": "sha256", "checksum": "95006f48053eea3f63f04dd9f5e5cb4d33d967c5e737d819f2eecfb05592522a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.0112507, "relation_name": "ALEO.github_actions.task_performance", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\n{{ fsc_utils.gha_task_performance_view() }}", "language": "sql", "refs": [{"name": "github_actions__task_schedule", "package": null, "version": null}, {"name": "github_actions__task_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_task_performance_view", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.github_actions__task_schedule", "model.aleo_models.github_actions__task_history"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.github_actions__current_task_status": {"database": "ALEO", "schema": "github_actions", "name": "github_actions__current_task_status", "resource_type": "model", "package_name": "aleo_models", "path": "github_actions/github_actions__current_task_status.sql", "original_file_path": "models/github_actions/github_actions__current_task_status.sql", "unique_id": "model.aleo_models.github_actions__current_task_status", "fqn": ["aleo_models", "github_actions", "github_actions__current_task_status"], "alias": "current_task_status", "checksum": {"name": "sha256", "checksum": "08e1867f676c1424245dfdd83a8012885ddcc42691c069ce4f58335feee2fd32"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gha_tasks"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["gha_tasks"], "description": "", "columns": {"PIPELINE_ACTIVE": {"name": "PIPELINE_ACTIVE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SUCCESSES": {"name": "SUCCESSES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/github_actions/github_actions__current_task_status.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["gha_tasks"]}, "created_at": 1753463698.1242142, "relation_name": "ALEO.github_actions.current_task_status", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['gha_tasks']\n) }}\n\n{{ fsc_utils.gha_task_current_status_view() }}", "language": "sql", "refs": [{"name": "github_actions__task_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.gha_task_current_status_view", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.github_actions__task_performance"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.streamline__blocks": {"database": "ALEO", "schema": "streamline", "name": "streamline__blocks", "resource_type": "model", "package_name": "aleo_models", "path": "streamline/streamline__blocks.sql", "original_file_path": "models/streamline/streamline__blocks.sql", "unique_id": "model.aleo_models.streamline__blocks", "fqn": ["aleo_models", "streamline", "streamline__blocks"], "alias": "blocks", "checksum": {"name": "sha256", "checksum": "3626a9191eeab374535e8053f0139915f6d5e2f8eb6d04c328fb37b0fecac708"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_view"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["streamline_view"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "table", "tags": ["streamline_view"]}, "created_at": 1753463695.0243819, "relation_name": "ALEO.streamline.blocks", "raw_code": "{{ config (\n    materialized = \"table\",\n    tags = ['streamline_view']\n) }}\n\nSELECT\n    _id AS block_number\nFROM\n    {{ source(\n        'crosschain_silver',\n        'number_sequence'\n    ) }}\nWHERE\n    _id <= (\n        SELECT\n            MAX(block_number)\n        FROM\n            {{ ref('streamline__chainhead') }}\n    )\nUNION ALL\nSELECT\n    0", "language": "sql", "refs": [{"name": "streamline__chainhead", "package": null, "version": null}], "sources": [["crosschain_silver", "number_sequence"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.crosschain_silver.number_sequence", "model.aleo_models.streamline__chainhead"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.streamline__chainhead": {"database": "ALEO", "schema": "streamline", "name": "streamline__chainhead", "resource_type": "model", "package_name": "aleo_models", "path": "streamline/streamline__chainhead.sql", "original_file_path": "models/streamline/streamline__chainhead.sql", "unique_id": "model.aleo_models.streamline__chainhead", "fqn": ["aleo_models", "streamline", "streamline__chainhead"], "alias": "chainhead", "checksum": {"name": "sha256", "checksum": "83c57b60dad9efd6255e45fe16a06b3197cd1cfa8adb45542a471f00202ac1fb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_view"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["streamline_view"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["streamline_view"]}, "created_at": 1753463695.0308828, "relation_name": "ALEO.streamline.chainhead", "raw_code": "{{ config (\n    materialized = \"view\",\n    tags = ['streamline_view']\n) }}\n\nSELECT\n    {{ target.database }}.live.udf_api(\n        'GET',\n        '{Service}/block/height/latest',\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json'\n        ),{},\n        'Vault/prod/aleo/mainnet'\n    ) :data :: INT AS block_number", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models._max_block_by_date": {"database": "ALEO", "schema": "_max_block_by_date", "name": "_max_block_by_date", "resource_type": "model", "package_name": "aleo_models", "path": "streamline/silver/_max_block_by_date.sql", "original_file_path": "models/streamline/silver/_max_block_by_date.sql", "unique_id": "model.aleo_models._max_block_by_date", "fqn": ["aleo_models", "streamline", "silver", "_max_block_by_date"], "alias": "_max_block_by_date", "checksum": {"name": "sha256", "checksum": "fbbd341e45a485ed82e72f666bee77490a26d1a70f5e047f9ec06471e9866302"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "ephemeral", "unique_key": "block_id"}, "created_at": 1753463695.0364704, "relation_name": null, "raw_code": "{{ config (\n    materialized = \"ephemeral\",\n    unique_key = \"block_id\",\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_timestamp :: DATE AS block_date,\n        MAX(block_id) AS block_id\n    FROM\n        {{ ref(\"silver__blocks\") }}\n    GROUP BY\n        block_timestamp :: DATE\n)\nSELECT\n    block_date,\n    block_id\nFROM\n    base\nWHERE\n    block_date <> (\n        SELECT\n            MAX(block_date)\n        FROM\n            base\n    )", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.streamline__blocks_realtime": {"database": "ALEO", "schema": "streamline", "name": "streamline__blocks_realtime", "resource_type": "model", "package_name": "aleo_models", "path": "streamline/silver/core/realtime/streamline__blocks_realtime.sql", "original_file_path": "models/streamline/silver/core/realtime/streamline__blocks_realtime.sql", "unique_id": "model.aleo_models.streamline__blocks_realtime", "fqn": ["aleo_models", "streamline", "silver", "core", "realtime", "streamline__blocks_realtime"], "alias": "blocks_realtime", "checksum": {"name": "sha256", "checksum": "6809a50679b932a4348ff9400826f1774135247b5838fb1989e55913e7290592"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        NULL\n    \n"]}, "created_at": 1753463695.0414114, "relation_name": "ALEO.streamline.blocks_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = fsc_utils.if_data_call_function_v2(\n        func = 'streamline.udf_bulk_rest_api_v2',\n        target = \"{{this.schema}}.{{this.identifier}}\",\n        params ={ \"external_table\" :\"blocks\",\n        \"sql_limit\" :\"16000\",\n        \"producer_batch_size\" :\"800\",\n        \"worker_batch_size\" :\"200\",\n        \"sql_source\" :\"{{this.identifier}}\",\n        \"order_by_column\": \"block_number\" }\n    )\n) }}\n-- depends_on: {{ ref('streamline__blocks_complete') }}\nWITH blocks AS (\n\n    SELECT\n        block_number\n    FROM\n        {{ ref(\"streamline__blocks\") }}\n    EXCEPT\n    SELECT\n        block_number\n    FROM\n        {{ ref(\"streamline__blocks_complete\") }}\n)\nSELECT\n    ROUND(\n        block_number,\n        -4\n    ) :: INT AS partition_key,\n    {{ target.database }}.live.udf_api(\n        'GET',\n        '{Service}/block/' || block_number,\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json'\n        ),{},\n        'Vault/prod/aleo/mainnet'\n    ) AS request,\n    block_number\nFROM\n    blocks", "language": "sql", "refs": [{"name": "streamline__blocks_complete", "package": null, "version": null}, {"name": "streamline__blocks", "package": null, "version": null}, {"name": "streamline__blocks_complete", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.if_data_call_function_v2", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.streamline__blocks_complete", "model.aleo_models.streamline__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.streamline__blocks_complete": {"database": "ALEO", "schema": "streamline", "name": "streamline__blocks_complete", "resource_type": "model", "package_name": "aleo_models", "path": "streamline/silver/core/complete/streamline__blocks_complete.sql", "original_file_path": "models/streamline/silver/core/complete/streamline__blocks_complete.sql", "unique_id": "model.aleo_models.streamline__blocks_complete", "fqn": ["aleo_models", "streamline", "silver", "core", "complete", "streamline__blocks_complete"], "alias": "blocks_complete", "checksum": {"name": "sha256", "checksum": "2b85ae5270a5c15e2110c9be7d6985306eb0a8f475ee8b21101ad6757cdded0d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(block_number)", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_number", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": "ROUND(block_number, -3)", "merge_exclude_columns": ["inserted_timestamp"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_strategy": "merge", "unique_key": "block_number", "cluster_by": "ROUND(block_number, -3)", "merge_exclude_columns": ["inserted_timestamp"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(block_number)"]}, "created_at": 1753463695.0513716, "relation_name": "ALEO.streamline.blocks_complete", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    incremental_strategy = 'merge',\n    unique_key = \"block_number\",\n    cluster_by = \"ROUND(block_number, -3)\",\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION on equality(block_number)\"\n) }}\n\n-- depends_on: {{ ref('bronze__blocks') }}\n\nSELECT\n    DATA :header :metadata :height :: INT AS block_number,\n    {{ dbt_utils.generate_surrogate_key(\n        ['block_number']\n    ) }} AS complete_blocks_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    file_name,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n\n{% if is_incremental() %}\n    {{ ref('bronze__blocks') }}\nWHERE\n    inserted_timestamp >= (\n        SELECT\n            MAX(modified_timestamp) modified_timestamp\n        FROM\n            {{ this }}\n    )\n{% else %}\n    {{ ref('bronze__blocks_FR') }}\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY block_number\nORDER BY\n    inserted_timestamp DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__blocks", "package": null, "version": null}, {"name": "bronze__blocks_FR", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.bronze__blocks", "model.aleo_models.bronze__blocks_FR"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__transactions": {"database": "ALEO", "schema": "silver", "name": "silver__transactions", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__transactions.sql", "original_file_path": "models/silver/core/silver__transactions.sql", "unique_id": "model.aleo_models.silver__transactions", "fqn": ["aleo_models", "silver", "core", "silver__transactions"], "alias": "transactions", "checksum": {"name": "sha256", "checksum": "62a7f44d7068332be8c21d3bef3d5f3ec977fec72d2f3a17dd50980d66779e26"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "transactions_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.transactions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "This model contains detailed information about transactions in the Aleo blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_TYPE": {"name": "TX_TYPE", "description": "The type of the transaction (e.g., 'execute', 'deploy', 'fee'.)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FEE_MSG": {"name": "FEE_MSG", "description": "The fee message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EXECUTION_MSG": {"name": "EXECUTION_MSG", "description": "The execution message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DEPLOYMENT_MSG": {"name": "DEPLOYMENT_MSG", "description": "The deployment message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OWNER_MSG": {"name": "OWNER_MSG", "description": "The owner message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FINALIZE_MSG": {"name": "FINALIZE_MSG", "description": "The finalize message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REJECTED_MSG": {"name": "REJECTED_MSG", "description": "The rejected message data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/silver__transactions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": "transactions_id", "incremental_strategy": "merge", "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.transactions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"]}, "created_at": 1753463698.3788323, "relation_name": "ALEO.silver.transactions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"transactions_id\",\n    incremental_strategy = 'merge',\n    incremental_predicates = [\"COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \" ~ generate_tmp_view_name(this) ~ \")\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['core','full_test']\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        f.value :index :: INT AS INDEX,\n        f.value :transaction :id :: STRING AS tx_id,\n        f.value :status :: STRING AS status,\n        f.value :type :: STRING AS tx_type,\n        TRY_PARSE_JSON(\n            f.value :transaction :fee\n        ) AS fee_msg,\n        TRY_PARSE_JSON(\n            f.value :transaction :execution\n        ) AS execution_msg,\n        TRY_PARSE_JSON(\n            f.value :transaction :deployment\n        ) AS deployment_msg,\n        TRY_PARSE_JSON(\n            f.value :transaction :owner\n        ) AS owner_msg,\n        TRY_PARSE_JSON(\n            f.value: finalize\n        ) AS finalize_msg,\n        TRY_PARSE_JSON(\n            f.value: rejected\n        ) AS rejected_msg,\n        f.value AS DATA\n    FROM\n        {{ ref('silver__blocks') }}\n        t,\n        LATERAL FLATTEN(\n            input => t.data :transactions\n        ) f\n    WHERE\n        tx_id IS NOT NULL\n\n{% if is_incremental() %}\nAND modified_timestamp >= DATEADD(\n    MINUTE,\n    -5,(\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n)\n{% endif %}\n)\nSELECT\n    block_id,\n    block_timestamp,\n    INDEX,\n    tx_id,\n    status,\n    tx_type,\n    fee_msg,\n    execution_msg,\n    deployment_msg,\n    REGEXP_SUBSTR(\n        deployment_msg :program :: STRING,\n        'program\\\\s+(\\\\S+);',\n        1,\n        1,\n        'e',\n        1\n    ) AS program_id,\n    owner_msg,\n    finalize_msg,\n    rejected_msg,\n    COALESCE(ARRAY_SIZE(execution_msg :transitions), ARRAY_SIZE(rejected_msg :execution :transitions)) AS transition_count,\n    DATA,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_id']\n    ) }} AS transactions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    base", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__transitions": {"database": "ALEO", "schema": "silver", "name": "silver__transitions", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__transitions.sql", "original_file_path": "models/silver/core/silver__transitions.sql", "unique_id": "model.aleo_models.silver__transitions", "fqn": ["aleo_models", "silver", "core", "silver__transitions"], "alias": "transitions", "checksum": {"name": "sha256", "checksum": "37f10f575f84e433f9f9f6ab90c95d4313c7d8448bf76a40531bd1c4c7e5e1b4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "transitions_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.transitions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "This model contains detailed information about transitions within transactions on the Aleo blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "The identifier of the program associated with this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_ID": {"name": "TRANSITION_ID", "description": "The unique identifier for this specific transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "The identifier of the program associated with this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FUNCTION": {"name": "FUNCTION", "description": "The function executed in this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INPUTS": {"name": "INPUTS", "description": "The input parameters or data for this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OUTPUTS": {"name": "OUTPUTS", "description": "The output results or data from this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITIONS_ID": {"name": "TRANSITIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/silver__transitions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": "transitions_id", "incremental_strategy": "merge", "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.transitions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"]}, "created_at": 1753463698.343239, "relation_name": "ALEO.silver.transitions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"transitions_id\",\n    incremental_strategy = 'merge',\n    incremental_predicates = [\"COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \" ~ generate_tmp_view_name(this) ~ \")\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['core','full_test']\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        tx_id,\n        block_timestamp,\n        TRUE AS succeeded,\n        execution_msg,\n        rejected_msg\n    FROM\n        {{ ref('silver__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= DATEADD(\n        MINUTE,\n        -5,(\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n        )\n    )\n{% endif %}\n),\nexe_trans AS (\n    SELECT\n        t.block_id,\n        t.tx_id,\n        t.block_timestamp,\n        TRUE AS succeeded,\n        'execution' AS TYPE,\n        f.value AS transition,\n        f.index AS INDEX\n    FROM\n        base t,\n        LATERAL FLATTEN(\n            input => execution_msg :transitions\n        ) f\n),\nrej_trans AS (\n    SELECT\n        t.block_id,\n        t.tx_id,\n        t.block_timestamp,\n        FALSE AS succeeded,\n        'execution' AS TYPE,\n        f.value AS transition,\n        f.index AS transition_index\n    FROM\n        base t,\n        LATERAL FLATTEN(\n            input => rejected_msg :execution :transitions\n        ) f\n),\ntransitions AS (\n    SELECT\n        *\n    FROM\n        exe_trans\n    UNION ALL\n    SELECT\n        *\n    FROM\n        rej_trans\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    INDEX,\n    transition :id :: STRING AS transition_id,\n    succeeded,\n    TYPE,\n    transition :program :: STRING AS program_id,\n    transition :function :: STRING AS FUNCTION,\n    TRY_PARSE_JSON(\n        transition :inputs\n    ) AS inputs,\n    TRY_PARSE_JSON(\n        transition :outputs\n    ) AS outputs,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_id','transition_id']\n    ) }} AS transitions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS invocation_id\nFROM\n    transitions", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__labels": {"database": "ALEO", "schema": "silver", "name": "silver__labels", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__labels.sql", "original_file_path": "models/silver/core/silver__labels.sql", "unique_id": "model.aleo_models.silver__labels", "fqn": ["aleo_models", "silver", "core", "silver__labels"], "alias": "labels", "checksum": {"name": "sha256", "checksum": "b2d67914a45cf49d0b47a84a0aca19a0e255cf3174b61d3d486aefe4c3112135"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["core"]}, "created_at": 1753463695.078089, "relation_name": "ALEO.silver.labels", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['core']\n) }}\n\nSELECT\n    system_created_at,\n    insert_date,\n    blockchain,\n    address,\n    creator,\n    label_type,\n    label_subtype,\n    address_name,\n    project_name,\n    modified_timestamp\nFROM\n    {{ source(\n        'crosschain',\n        'dim_labels'\n    ) }}\nWHERE\n    blockchain = 'aleo'", "language": "sql", "refs": [], "sources": [["crosschain", "dim_labels"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.crosschain.dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__transitions_fee": {"database": "ALEO", "schema": "silver", "name": "silver__transitions_fee", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__transitions_fee.sql", "original_file_path": "models/silver/core/silver__transitions_fee.sql", "unique_id": "model.aleo_models.silver__transitions_fee", "fqn": ["aleo_models", "silver", "core", "silver__transitions_fee"], "alias": "transitions_fee", "checksum": {"name": "sha256", "checksum": "c23f2699264e2b6609376e2a686df14921c3c46599cfe4f270d67c1042d5a677"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "transitions_fee_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.transitions_fee__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "This model contains detailed information about fee transitions within transactions on the Aleo blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SUCCEEDED": {"name": "SUCCEEDED", "description": "A boolean value indicating if the event succeeded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_ID": {"name": "TRANSITION_ID", "description": "The unique identifier for this specific transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "The identifier of the program associated with this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "FUNCTION": {"name": "FUNCTION", "description": "The function executed in this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INPUTS": {"name": "INPUTS", "description": "The input parameters or data for this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "OUTPUTS": {"name": "OUTPUTS", "description": "The output results or data from this transition.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITIONS_FEE_ID": {"name": "TRANSITIONS_FEE_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/silver__transitions_fee.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": "transitions_fee_id", "incremental_strategy": "merge", "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.transitions_fee__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"]}, "created_at": 1753463698.1583889, "relation_name": "ALEO.silver.transitions_fee", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"transitions_fee_id\",\n    incremental_strategy = 'merge',\n    incremental_predicates = [\"COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \" ~ generate_tmp_view_name(this) ~ \")\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['core','full_test']\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        tx_id,\n        block_timestamp,\n        TRUE AS succeeded,\n        fee_msg :transition AS transition\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE \n        fee_msg IS NOT NULL\n\n{% if is_incremental() %}\nAND\n    modified_timestamp >= DATEADD(\n        MINUTE,\n        -5,(\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n        )\n    )\n{% endif %}\n),\nparsed AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        succeeded,\n        transition :id :: STRING AS transition_id,\n        transition :program :: STRING AS program_id,\n        transition :function :: STRING AS FUNCTION,\n        TRY_PARSE_JSON(\n            transition :inputs\n        ) AS inputs,\n        TRY_PARSE_JSON(\n            transition :outputs\n        ) AS outputs\n    FROM\n        base\n),\nfee_sum AS (\n    SELECT\n        transition_id,\n        SUM(REPLACE(VALUE :value, 'u64') :: bigint) AS fee_raw,\n        fee_raw / pow(\n            10,\n            6\n        ) AS fee\n    FROM\n        parsed,\n        LATERAL FLATTEN(inputs)\n    WHERE\n        VALUE :type = 'public'\n        AND VALUE :value LIKE '%u64'\n    GROUP BY\n        transition_id\n),\nfee_payer AS (\n    SELECT\n        transition_id,\n        REGEXP_SUBSTR( \n            outputs[array_size(outputs)-1] :value :: STRING, \n            'arguments:\\\\s*\\\\[(.*?)\\\\]', 1, 1, 'sie' ) as args_string, \n        SPLIT(\n            REGEXP_REPLACE( REGEXP_REPLACE( REGEXP_REPLACE(args_string, '\\\\s+', ''), '\\\\[|\\\\]', '' ), 'u64$', '' ), ',' ) aa, \n        aa[0]::STRING as fee_payer\n    FROM\n        parsed\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    succeeded,\n    transition_id,\n    program_id,\n    FUNCTION,\n    inputs,\n    outputs,\n    fee_raw,\n    fee,\n    fee_payer,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_id','transition_id']\n    ) }} AS transitions_fee_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    parsed\n    LEFT JOIN fee_sum USING (transition_id)\n    LEFT JOIN fee_payer USING (transition_id)", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__nonnative_transfers": {"database": "ALEO", "schema": "silver", "name": "silver__nonnative_transfers", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__nonnative_transfers.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.sql", "unique_id": "model.aleo_models.silver__nonnative_transfers", "fqn": ["aleo_models", "silver", "core", "silver__nonnative_transfers"], "alias": "nonnative_transfers", "checksum": {"name": "sha256", "checksum": "713193574e48f52da779dbdca9882c389f256b31ae67bc71c1acd88660a6a343"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["transition_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.nonnative_transfers__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Records of native token transfers on Aleo between wallets", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_ID": {"name": "TRANSITION_ID", "description": "The unique identifier for this specific transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "The type of transfer, namely public or private.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "Address that tokens are transferred from. If null, the sender is private and unresolvable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "Address that tokens are transferred to. If null, the receiver is private and unresolvable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Number of tokens transferred. If null, the amount is private and unresolvable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/silver__nonnative_transfers.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.nonnative_transfers__dbt_tmp)"], "unique_key": ["transition_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"]}, "created_at": 1753463698.1785078, "relation_name": "ALEO.silver.nonnative_transfers", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_predicates = [\"COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \" ~ generate_tmp_view_name(this) ~ \")\"],\n    unique_key = ['transition_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['core', 'full_test']\n) }}\n\nWITH base AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        transition_id,\n        index,\n        outputs,\n        program_id,\n        function,\n        succeeded\n    FROM\n        {{ ref('silver__transitions') }}\n    WHERE\n        program_id = 'token_registry.aleo'\n        AND function IN (\n            'transfer_public',\n            'transfer_private',\n            'transfer_public_as_signer',\n            'transfer_private_to_public',\n            'transfer_public_to_private'\n        )\n    {% if is_incremental() %}\n    AND modified_timestamp >= DATEADD(\n        MINUTE,\n        -5,(\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n            )\n        )\n    {% endif %}\n),\noutput_args AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        transition_id,\n        index,\n        program_id,\n        function,\n        succeeded,\n        REGEXP_SUBSTR(\n            outputs[array_size(outputs)-1] :value :: STRING,\n            'arguments:\\\\s*\\\\[(.*?)\\\\]',\n            1,\n            1,\n            'sie'\n        ) as args_string\n    FROM\n        base\n),\noutput_args_cleaned AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        transition_id,\n        index,\n        program_id,\n        function,\n        succeeded,\n        SPLIT(\n            REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(args_string, '\\\\s+', ''),\n                    '\\\\[|\\\\]',\n                    ''\n                ),\n                'u64$',\n                ''\n            ),\n            ','\n        ) as args_array\n    FROM output_args\n),\nmapped_transfers AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        transition_id,\n        index,\n        program_id,\n        succeeded,\n        function,\n        CASE\n            WHEN function IN ('transfer_public', 'transfer_public_as_signer') THEN args_array[1]\n            WHEN function = 'transfer_private_to_public' THEN null\n            WHEN function = 'transfer_public_to_private' THEN args_array[2]\n            WHEN function = 'transfer_private' THEN null\n        END :: STRING as transfer_from,\n        CASE\n            WHEN function IN ('transfer_public', 'transfer_public_as_signer') THEN args_array[3]\n            WHEN function = 'transfer_private_to_public' THEN args_array[1]\n            WHEN function = 'transfer_public_to_private' THEN null\n            WHEN function = 'transfer_private' THEN null\n        END :: STRING as transfer_to,\n        CASE\n            WHEN function IN ('transfer_public', 'transfer_public_as_signer') THEN args_array[2]\n            WHEN function = 'transfer_private_to_public' THEN args_array[2]\n            WHEN function = 'transfer_public_to_private' THEN args_array[1]\n            WHEN function = 'transfer_private' THEN null\n        END :: STRING as amount,\n        CASE \n            WHEN function = 'transfer_private' THEN null\n            ELSE args_array[0] \n        END :: STRING as token_id\n    FROM output_args_cleaned\n)\nselect\n    block_id,\n    block_timestamp,\n    tx_id,\n    transition_id,\n    index,\n    succeeded as tx_succeeded,\n    function as transfer_type,\n    transfer_from as sender,\n    transfer_to as receiver,\n    REPLACE(amount, 'u128', '') :: BIGINT / pow(\n            10,\n            6\n        ) AS amount,\n    FALSE AS is_native,\n    token_id,\n    SYSDATE() as inserted_timestamp,\n    SYSDATE() as modified_timestamp,\n    '{{ invocation_id }}' as _invocation_id\nfrom \n    mapped_transfers", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__native_transfers": {"database": "ALEO", "schema": "silver", "name": "silver__native_transfers", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__native_transfers.sql", "original_file_path": "models/silver/core/silver__native_transfers.sql", "unique_id": "model.aleo_models.silver__native_transfers", "fqn": ["aleo_models", "silver", "core", "silver__native_transfers"], "alias": "native_transfers", "checksum": {"name": "sha256", "checksum": "14a115f26d7f2b6eb973844d334d4ab9f781937cac49af64db6aadea0e1ed26f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["transition_id"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.native_transfers__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Records of native token transfers on Aleo between wallets", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITION_ID": {"name": "TRANSITION_ID", "description": "The unique identifier for this specific transition within the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INDEX": {"name": "INDEX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "The type of transfer, namely public or private.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "Address that tokens are transferred from. If null, the sender is private and unresolvable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "Address that tokens are transferred to. If null, the receiver is private and unresolvable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "Number of tokens transferred. If null, the amount is private and unresolvable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/silver__native_transfers.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.native_transfers__dbt_tmp)"], "unique_key": ["transition_id"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"]}, "created_at": 1753463698.390586, "relation_name": "ALEO.silver.native_transfers", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_predicates = [\"COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \" ~ generate_tmp_view_name(this) ~ \")\"],\n    unique_key = ['transition_id'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['core', 'full_test']\n) }}\n\nWITH base AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        transition_id,\n        index,\n        outputs,\n        program_id,\n        function,\n        succeeded\n    FROM\n        {{ ref('silver__transitions') }}\n    WHERE\n        program_id = 'credits.aleo'\n        AND function IN (\n            'transfer_public',\n            'transfer_private',\n            'transfer_public_as_signer',\n            'transfer_private_to_public',\n            'transfer_public_to_private'\n        )\n    {% if is_incremental() %}\n    AND modified_timestamp >= DATEADD(\n        MINUTE,\n        -5,(\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n            )\n        )\n    {% endif %}\n),\noutput_args AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        transition_id,\n        index,\n        program_id,\n        function,\n        succeeded,\n        REGEXP_SUBSTR(\n            outputs[array_size(outputs)-1] :value :: STRING,\n            'arguments:\\\\s*\\\\[(.*?)\\\\]',\n            1,\n            1,\n            'sie'\n        ) as args_string\n    FROM\n        base\n),\noutput_args_cleaned AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        transition_id,\n        index,\n        program_id,\n        function,\n        succeeded,\n        SPLIT(\n            REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                    REGEXP_REPLACE(args_string, '\\\\s+', ''),\n                    '\\\\[|\\\\]',\n                    ''\n                ),\n                'u64$',\n                ''\n            ),\n            ','\n        ) as args_array\n    FROM output_args\n),\nmapped_transfers AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        transition_id,\n        index,\n        program_id,\n        succeeded,\n        function,\n        CASE\n            WHEN function IN ('transfer_public', 'transfer_public_as_signer') THEN args_array[0]\n            WHEN function = 'transfer_private_to_public' THEN null\n            WHEN function = 'transfer_public_to_private' THEN args_array[0]\n            WHEN function = 'transfer_private' THEN null\n        END :: STRING as transfer_from,\n        CASE\n            WHEN function IN ('transfer_public', 'transfer_public_as_signer') THEN args_array[1]\n            WHEN function = 'transfer_private_to_public' THEN args_array[0]\n            WHEN function = 'transfer_public_to_private' THEN null\n            WHEN function = 'transfer_private' THEN null\n        END :: STRING as transfer_to,\n        CASE\n            WHEN function IN ('transfer_public', 'transfer_public_as_signer') THEN args_array[2]\n            WHEN function = 'transfer_private_to_public' THEN args_array[1]\n            WHEN function = 'transfer_public_to_private' THEN args_array[1]\n            WHEN function = 'transfer_private' THEN null\n        END :: STRING as amount\n    FROM output_args_cleaned\n)\nselect\n    block_id,\n    block_timestamp,\n    tx_id,\n    transition_id,\n    index,\n    succeeded as tx_succeeded,\n    function as transfer_type,\n    transfer_from as sender,\n    transfer_to as receiver,\n    REPLACE(amount, 'u64', '') :: BIGINT / pow(\n            10,\n            6\n        ) AS amount,\n    TRUE AS is_native,\n    '3443843282313283355522573239085696902919850365217539366784739393210722344986field' AS token_id,\n    SYSDATE() as inserted_timestamp,\n    SYSDATE() as modified_timestamp,\n    '{{ invocation_id }}' as _invocation_id\nfrom \n    mapped_transfers", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__block_round_batches": {"database": "ALEO", "schema": "silver", "name": "silver__block_round_batches", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__block_round_batches.sql", "original_file_path": "models/silver/core/silver__block_round_batches.sql", "unique_id": "model.aleo_models.silver__block_round_batches", "fqn": ["aleo_models", "silver", "core", "silver__block_round_batches"], "alias": "block_round_batches", "checksum": {"name": "sha256", "checksum": "51e10796a6ea1bab6ed007e9f4b6df985c94a509b58181681f566e50aa952ee4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_idk_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.block_round_batches__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Records of rounds and batches within blocks on the Aleo network, capturing the consensus and block production process from genesis onward.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ROUND": {"name": "ROUND", "description": "Prover round data associated with the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BATCH_ID": {"name": "BATCH_ID", "description": "A unique identifier for each batch within a round", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "AUTHOR": {"name": "AUTHOR", "description": "The address of the validator who authored this batch", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMMITTEE_ID": {"name": "COMMITTEE_ID", "description": "The unique identifier for the committee responsible for this batch", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSMISSION_IDS": {"name": "TRANSMISSION_IDS", "description": "Array of transmission identifiers associated with this batch", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_IDK_ID": {"name": "BLOCK_IDK_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/silver__block_round_batches.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": "block_idk_id", "incremental_strategy": "merge", "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.block_round_batches__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"]}, "created_at": 1753463698.1367881, "relation_name": "ALEO.silver.block_round_batches", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"block_idk_id\",\n    incremental_strategy = 'merge',\n    incremental_predicates = [\"COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \" ~ generate_tmp_view_name(this) ~ \")\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['core','full_test']\n) }}\n\nSELECT\n    block_id,\n    block_timestamp,\n    b.key AS ROUND,\n    C.value :batch_header :batch_id :: STRING AS batch_id,\n    C.value :batch_header :author :: STRING AS author,\n    C.value :batch_header :committee_id :: STRING AS committee_id,\n    C.value :batch_header :transmission_ids AS transmission_ids,\n    {{ dbt_utils.generate_surrogate_key(\n        ['block_id','batch_id']\n    ) }} AS block_idk_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref('silver__blocks') }} A,\n    LATERAL FLATTEN(\n        DATA :authority :subdag :subdag\n    ) b,\n    LATERAL FLATTEN(b.value) C\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= DATEADD(\n        MINUTE,\n        -5,(\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n        )\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__block_solutions": {"database": "ALEO", "schema": "silver", "name": "silver__block_solutions", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__block_solutions.sql", "original_file_path": "models/silver/core/silver__block_solutions.sql", "unique_id": "model.aleo_models.silver__block_solutions", "fqn": ["aleo_models", "silver", "core", "silver__block_solutions"], "alias": "block_solutions", "checksum": {"name": "sha256", "checksum": "10cb93b8fa2868d2eabaad059830c209a7b0eca21ef14ce0c7a16e3576e0acae"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_solutions_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.block_solutions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Records of all prover solutions for each block, including block details, rewards, and solution-specific information.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_PUZZLE_REWARD": {"name": "BLOCK_PUZZLE_REWARD", "description": "The total coinbase reward issued to the network for each block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The unique address referring to an entity on the blockchain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COUNTER": {"name": "COUNTER", "description": "A counter value associated with the solution", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EPOCH_HASH": {"name": "EPOCH_HASH", "description": "The hash of the epoch in which the solution was found", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SOLUTION_ID": {"name": "SOLUTION_ID", "description": "A unique identifier for the prover solution.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TARGET": {"name": "TARGET", "description": "The target difficulty for this specific solution", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD_RAW": {"name": "REWARD_RAW", "description": "The sum of all solution targets for this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "REWARD": {"name": "REWARD", "description": "The sum of all solution targets for this block", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_SOLUTIONS_ID": {"name": "BLOCK_SOLUTIONS_ID", "description": "The unique identifier for each row in the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "The utc timestamp at which the row was inserted into the table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "The utc timestamp at which the row was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/silver__block_solutions.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": "block_solutions_id", "incremental_strategy": "merge", "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.block_solutions__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"]}, "created_at": 1753463698.2421758, "relation_name": "ALEO.silver.block_solutions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"block_solutions_id\",\n    incremental_strategy = 'merge',\n    incremental_predicates = [\"COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \" ~ generate_tmp_view_name(this) ~ \")\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['core','full_test']\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        puzzle_reward AS block_puzzle_reward,\n        b.value :partial_solution :address :: STRING AS address,\n        b.value :partial_solution :counter :: STRING AS counter,\n        b.value :partial_solution :epoch_hash :: STRING AS epoch_hash,\n        b.value :partial_solution :solution_id :: STRING AS solution_id,\n        b.value :target :: bigint AS target,\n        SUM(target) over(\n            PARTITION BY block_id\n        ) AS total_target,\n        target / total_target AS pct\n    FROM\n        {{ ref('silver__blocks') }} A,\n        LATERAL FLATTEN(\n            DATA :solutions :solutions :solutions\n        ) b\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= DATEADD(\n        MINUTE,\n        -5,(\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n        )\n    )\n{% endif %}\n)\nSELECT\n    block_id,\n    block_timestamp,\n    block_puzzle_reward,\n    address,\n    counter,\n    epoch_hash,\n    solution_id,\n    target,\n    pct * block_puzzle_reward AS reward_raw,\n    reward_raw / pow(\n        10,\n        6\n    ) AS reward,\n    {{ dbt_utils.generate_surrogate_key(\n        ['block_id','solution_id']\n    ) }} AS block_solutions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    base", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__blocks": {"database": "ALEO", "schema": "silver", "name": "silver__blocks", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__blocks.sql", "original_file_path": "models/silver/core/silver__blocks.sql", "unique_id": "model.aleo_models.silver__blocks", "fqn": ["aleo_models", "silver", "core", "silver__blocks"], "alias": "blocks", "checksum": {"name": "sha256", "checksum": "7acb45a8d0ccb611d6bc9ddb09722ac6d4f7ef0b66f43357e55f7d551378e802"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "blocks_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.blocks__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "Records of all blocks that have occurred on Aleo, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The timestamp at which the block began.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "NETWORK_ID": {"name": "NETWORK_ID", "description": "The network id corresponding to this block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The number of transactions in a given block.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PREVIOUS_HASH": {"name": "PREVIOUS_HASH", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ROUND": {"name": "ROUND", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COINBASE_TARGET": {"name": "COINBASE_TARGET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CUMULATIVE_PROOF_TARGET": {"name": "CUMULATIVE_PROOF_TARGET", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "CUMULATIVE_WEIGHT": {"name": "CUMULATIVE_WEIGHT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/silver__blocks.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": "blocks_id", "incremental_strategy": "merge", "incremental_predicates": ["COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \n    \n    ALEO.silver.blocks__dbt_tmp)"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core", "full_test"]}, "created_at": 1753463698.3021424, "relation_name": "ALEO.silver.blocks", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"blocks_id\",\n    incremental_strategy = 'merge',\n    incremental_predicates = [\"COALESCE(DBT_INTERNAL_DEST.block_timestamp::DATE,'2099-12-31') >= (select min(block_timestamp::DATE) from \" ~ generate_tmp_view_name(this) ~ \")\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = ['block_timestamp::DATE'],\n    tags = ['core','full_test']\n) }}\n-- depends_on: {{ ref('bronze__blocks') }}\n{% if execute %}\n\n{% if is_incremental() %}\n{% set max_mod_query %}\n\nSELECT\n    DATEADD(\n        'minute',\n        -5,\n        MAX(\n            modified_timestamp\n        )\n    )\nFROM\n    {{ this }}\n\n    {% endset %}\n    {% set max_mod = run_query(max_mod_query) [0] [0] %}\n{% endif %}\n{% endif %}\n\nWITH base AS (\n    SELECT\n        DATA,\n        DATA :header AS header,\n        header :metadata :height :: INT AS block_id,\n        header :metadata :timestamp :: datetime AS block_timestamp,\n        DATA :block_hash :: STRING AS block_hash,\n        DATA :previous_hash :: STRING AS previous_hash,\n        COALESCE(ARRAY_SIZE(DATA :transactions) :: NUMBER, 0) AS tx_count,\n        header :metadata :network AS network_id,\n        header :metadata :coinbase_target :: bigint AS coinbase_target,\n        header :metadata :cumulative_proof_target :: bigint AS cumulative_proof_target,\n        header :metadata :cumulative_weight :: bigint AS cumulative_weight,\n        header :metadata :round :: INT AS ROUND,\n        object_keys(\n            DATA :authority :subdag :subdag\n        ) AS rounds\n    FROM\n\n{% if is_incremental() %}\n{{ ref('bronze__blocks') }}\n{% else %}\n    {{ ref('bronze__blocks_FR') }}\n{% endif %}\nWHERE\n    block_id IS NOT NULL\n\n{% if is_incremental() %}\nAND inserted_timestamp >= '{{ max_mod }}'\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY network_id, block_id\nORDER BY\n    inserted_timestamp DESC)) = 1\n)\nSELECT\n    block_id,\n    block_timestamp,\n    network_id,\n    tx_count,\n    block_hash,\n    previous_hash,\n    ROUND,\n    rounds,\n    coinbase_target,\n    cumulative_proof_target,\n    cumulative_weight,\n    CASE\n        WHEN DATA :ratifications [0] :type = 'block_reward' THEN DATA :ratifications [0] :amount :: bigint\n        WHEN DATA :ratifications [1] :type = 'block_reward' THEN DATA :ratifications [1] :amount :: bigint\n    END block_reward,\n    CASE\n        WHEN DATA :ratifications [0] :type = 'puzzle_reward' THEN DATA :ratifications [0] :amount :: bigint\n        WHEN DATA :ratifications [1] :type = 'puzzle_reward' THEN DATA :ratifications [1] :amount :: bigint\n    END puzzle_reward,\n    DATA,\n    {{ dbt_utils.generate_surrogate_key(\n        ['block_id']\n    ) }} AS blocks_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    base", "language": "sql", "refs": [{"name": "bronze__blocks", "package": null, "version": null}, {"name": "bronze__blocks_FR", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.generate_tmp_view_name", "macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.bronze__blocks", "model.aleo_models.bronze__blocks_FR"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__programs": {"database": "ALEO", "schema": "silver", "name": "silver__programs", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/silver__programs.sql", "original_file_path": "models/silver/core/silver__programs.sql", "unique_id": "model.aleo_models.silver__programs", "fqn": ["aleo_models", "silver", "core", "silver__programs"], "alias": "programs", "checksum": {"name": "sha256", "checksum": "81456e64d650a5bed0f6c07922007bd3be0e2296ac2b00fa39c851841c947a71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "programs_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core", "full_test"], "description": "This model contains detailed information about programs deployed on the Aleo blockchain.", "columns": {"DEPLOYMENT_BLOCK_ID": {"name": "DEPLOYMENT_BLOCK_ID", "description": "The ID of the block in which the program was deployed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "DEPLOYMENT_BLOCK_TIMESTAMP": {"name": "DEPLOYMENT_BLOCK_TIMESTAMP", "description": "The timestamp of the block in which the program was deployed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM_ID": {"name": "PROGRAM_ID", "description": "The unique identifier of the program.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "EDITION": {"name": "EDITION", "description": "The version or edition number of the program.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAM": {"name": "PROGRAM", "description": "The full source code of the program.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "VERIFYING_KEYS": {"name": "VERIFYING_KEYS", "description": "The verifying keys associated with the program, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROGRAMS_ID": {"name": "PROGRAMS_ID", "description": "A unique identifier for each program record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/silver__programs.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": "programs_id", "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "tags": ["core", "full_test"]}, "created_at": 1753463698.3636281, "relation_name": "ALEO.silver.programs", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"programs_id\",\n    incremental_strategy = 'merge',\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['core','full_test']\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        program_id,\n        deployment_msg\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        deployment_msg IS NOT NULL\n\n{% if is_incremental() %}\nAND modified_timestamp >= DATEADD(\n    MINUTE,\n    -5,(\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n)\n{% endif %}\n)\nSELECT\n    block_id AS deployment_block_id,\n    block_timestamp AS deployment_block_timestamp,\n    program_id,\n    deployment_msg :edition :: INT AS edition,\n    deployment_msg :program :: STRING AS program,\n    TRY_PARSE_JSON(\n        deployment_msg :verifying_keys\n    ) AS verifying_keys,\n    {{ dbt_utils.generate_surrogate_key(\n        ['program_id','edition']\n    ) }} AS programs_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    base", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.silver__transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver_observability__blocks_completeness": {"database": "ALEO", "schema": "silver_observability", "name": "silver_observability__blocks_completeness", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/_observability/silver_observability__blocks_completeness.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.sql", "unique_id": "model.aleo_models.silver_observability__blocks_completeness", "fqn": ["aleo_models", "silver", "core", "_observability", "silver_observability__blocks_completeness"], "alias": "blocks_completeness", "checksum": {"name": "sha256", "checksum": "e973a9477bc70a1dfb5b3f921c85c74042812b210677b9c941d503f97bf38b0f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Records of all blocks block gaps (missing blocks) with a timestamp the test was run", "columns": {"MIN_BLOCK": {"name": "MIN_BLOCK", "description": "The lowest block id in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MAX_BLOCK": {"name": "MAX_BLOCK", "description": "The highest block id in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MIN_BLOCK_TIMESTAMP": {"name": "MIN_BLOCK_TIMESTAMP", "description": "The lowest block timestamp in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MAX_BLOCK_TIMESTAMP": {"name": "MAX_BLOCK_TIMESTAMP", "description": "The highest block timestamp in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKS_TESTED": {"name": "BLOCKS_TESTED", "description": "Count of blocks in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKS_IMPACTED_COUNT": {"name": "BLOCKS_IMPACTED_COUNT", "description": "Count of block gaps in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKS_IMPACTED_ARRAY": {"name": "BLOCKS_IMPACTED_ARRAY", "description": "Array of affected blocks", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TEST_FAILURE_DETAILS": {"name": "TEST_FAILURE_DETAILS", "description": "Array of details of the failure", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TEST_TIMESTAMP": {"name": "TEST_TIMESTAMP", "description": "When the test was run", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/_observability/silver_observability__blocks_completeness.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "full_refresh": false, "tags": ["recent_test"]}, "created_at": 1753463698.5848937, "relation_name": "ALEO.silver_observability.blocks_completeness", "raw_code": "{{ config(\n    materialized = 'incremental',\n    full_refresh = false,\n    tags = ['recent_test']\n) }}\n\nWITH source AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        LAG(\n            block_id,\n            1\n        ) over (\n            ORDER BY\n                block_id ASC\n        ) AS prev_BLOCK_ID\n    FROM\n        {{ ref('core__fact_blocks') }} A\n    WHERE\n        block_timestamp < DATEADD(\n            HOUR,\n            -24,\n            SYSDATE()\n        )\n\n{% if is_incremental() %}\nAND (\n    block_timestamp >= DATEADD(\n        HOUR,\n        -96,(\n            SELECT\n                MAX(\n                    max_block_timestamp\n                )\n            FROM\n                {{ this }}\n        )\n    )\n    OR ({% if var('OBSERV_FULL_TEST') %}\n        block_id >= 0\n    {% else %}\n        block_id >= (\n    SELECT\n        MIN(VALUE) - 1\n    FROM\n        (\n    SELECT\n        blocks_impacted_array\n    FROM\n        {{ this }}\n        qualify ROW_NUMBER() over (\n    ORDER BY\n        test_timestamp DESC) = 1), LATERAL FLATTEN(input => blocks_impacted_array))\n    {% endif %})\n)\n{% endif %}\n),\nblock_gen AS (\n    SELECT\n        _id AS block_id\n    FROM\n        {{ source(\n            'crosschain_silver',\n            'number_sequence'\n        ) }}\n    WHERE\n        _id BETWEEN (\n            SELECT\n                MIN(block_id)\n            FROM\n                source\n        )\n        AND (\n            SELECT\n                MAX(block_id)\n            FROM\n                source\n        )\n)\nSELECT\n    'blocks' AS test_name,\n    MIN(\n        b.block_id\n    ) AS min_block,\n    MAX(\n        b.block_id\n    ) AS max_block,\n    MIN(\n        b.block_timestamp\n    ) AS min_block_timestamp,\n    MAX(\n        b.block_timestamp\n    ) AS max_block_timestamp,\n    COUNT(1) AS blocks_tested,\n    COUNT(\n        CASE\n            WHEN C.block_id IS NOT NULL THEN A.block_id\n        END\n    ) AS blocks_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN C.block_id IS NOT NULL THEN A.block_id\n        END\n    ) within GROUP (\n        ORDER BY\n            A.block_id\n    ) AS blocks_impacted_array,\n    ARRAY_AGG(\n        DISTINCT CASE\n            WHEN C.block_id IS NOT NULL THEN OBJECT_CONSTRUCT(\n                'prev_block_id',\n                C.prev_block_id,\n                'block_id',\n                C.block_id\n            )\n        END\n    ) AS test_failure_details,\n    SYSDATE() AS test_timestamp\nFROM\n    block_gen A\n    LEFT JOIN source b\n    ON A.block_id = b.block_id\n    LEFT JOIN source C\n    ON A.block_id > C.prev_BLOCK_ID\n    AND A.block_id < C.block_id\n    AND C.block_id - C.prev_BLOCK_ID <> 1\nWHERE\n    COALESCE(\n        b.block_id,\n        C.block_id\n    ) IS NOT NULL", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [["crosschain_silver", "number_sequence"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.crosschain_silver.number_sequence", "model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver_observability__transitions_completeness": {"database": "ALEO", "schema": "silver_observability", "name": "silver_observability__transitions_completeness", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/_observability/silver_observability__transitions_completeness.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.sql", "unique_id": "model.aleo_models.silver_observability__transitions_completeness", "fqn": ["aleo_models", "silver", "core", "_observability", "silver_observability__transitions_completeness"], "alias": "transitions_completeness", "checksum": {"name": "sha256", "checksum": "8f89bfde067b1d32bb1ffca825df4b9055471fd42f515fa04e9a726eee02a6f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Records of all blocks with missing transitions with a timestamp the test was run", "columns": {"MIN_BLOCK": {"name": "MIN_BLOCK", "description": "The lowest block id in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MAX_BLOCK": {"name": "MAX_BLOCK", "description": "The highest block id in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MIN_BLOCK_TIMESTAMP": {"name": "MIN_BLOCK_TIMESTAMP", "description": "The lowest block timestamp in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MAX_BLOCK_TIMESTAMP": {"name": "MAX_BLOCK_TIMESTAMP", "description": "The highest block timestamp in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKS_TESTED": {"name": "BLOCKS_TESTED", "description": "Count of blocks in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKS_IMPACTED_COUNT": {"name": "BLOCKS_IMPACTED_COUNT", "description": "Count of blocks with missing transitions in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKS_IMPACTED_ARRAY": {"name": "BLOCKS_IMPACTED_ARRAY", "description": "Array of affected blocks", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSITIONS_IMPACTED_COUNT": {"name": "TRANSITIONS_IMPACTED_COUNT", "description": "Total count of missing transitions in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TEST_FAILURE_DETAILS": {"name": "TEST_FAILURE_DETAILS", "description": "blocks with missing transitions with the number of missing transitions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TEST_TIMESTAMP": {"name": "TEST_TIMESTAMP", "description": "When the test was run", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/_observability/silver_observability__transitions_completeness.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "full_refresh": false, "tags": ["recent_test"]}, "created_at": 1753463698.5212731, "relation_name": "ALEO.silver_observability.transitions_completeness", "raw_code": "{{ config(\n    materialized = 'incremental',\n    full_refresh = false,\n    tags = ['recent_test']\n) }}\n\nWITH rel_blocks AS (\n\n    SELECT\n        block_id,\n        block_timestamp\n    FROM\n        {{ ref('core__fact_blocks') }}\n    WHERE\n        block_timestamp < DATEADD(\n            HOUR,\n            -12,\n            SYSDATE()\n        )\n\n    {% if is_incremental() %}\n    AND (\n        block_timestamp >= DATEADD(\n            HOUR,\n            -72,(\n                SELECT\n                    MAX(\n                        max_block_timestamp\n                    )\n                FROM\n                    {{ this }}\n            )\n        )\n        OR ({% if var('OBSERV_FULL_TEST') %}\n            block_id >= 0\n        {% else %}\n            block_id >= (\n        SELECT\n            MIN(VALUE) - 1\n        FROM\n            (\n        SELECT\n            blocks_impacted_array\n        FROM\n            {{ this }}\n            qualify ROW_NUMBER() over (\n        ORDER BY\n            test_timestamp DESC) = 1), LATERAL FLATTEN(input => blocks_impacted_array))\n        {% endif %})\n    )\n    {% endif %}\n),\nbronze AS (\n    SELECT\n        A.block_id,\n        b.block_timestamp,\n        A.tx_id,\n        A.transition_id\n    FROM\n        {{ ref('silver__transitions') }} A\n        JOIN rel_blocks b\n        ON A.block_id = b.block_id\n\n    {% if is_incremental() %}\n    WHERE\n        A.inserted_timestamp >= CURRENT_DATE - 14\n        OR {% if var('OBSERV_FULL_TEST') %}\n            1 = 1\n        {% else %}\n            (\n                SELECT\n                    MIN(VALUE) - 1\n                FROM\n                    (\n                        SELECT\n                            blocks_impacted_array\n                        FROM\n                            {{ this }}\n                            qualify ROW_NUMBER() over (\n                                ORDER BY\n                                    test_timestamp DESC\n                            ) = 1\n                    ),\n                    LATERAL FLATTEN(\n                        input => blocks_impacted_array\n                    )\n            ) IS NOT NULL\n        {% endif %}\n    {% endif %}\n\n    qualify(ROW_NUMBER() over (PARTITION BY tx_id,transition_id\n    ORDER BY\n        succeeded DESC, A.block_id DESC, A.tx_id DESC, A.inserted_timestamp DESC)) = 1\n),\nbronze_count AS (\n    SELECT\n        block_id,\n        tx_id,\n        block_timestamp,\n        COUNT(\n            DISTINCT transition_id\n        ) AS transition_count\n    FROM\n        bronze\n    GROUP BY\n        ALL\n),\nbronze_min AS (\n    SELECT\n        MIN(block_id) block_id\n    FROM\n        bronze\n),\nbronze_node AS (\n    SELECT\n        block_id,\n        tx_id,\n        block_timestamp,\n        transition_count\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        block_timestamp BETWEEN (\n            SELECT\n                MIN(block_timestamp)\n            FROM\n                rel_blocks\n        )\n        AND (\n            SELECT\n                MAX(block_timestamp)\n            FROM\n                rel_blocks\n        )\n)\nSELECT\n    'transitions' AS test_name,\n    MIN(\n        A.block_id\n    ) AS min_block,\n    MAX(\n        A.block_id\n    ) AS max_block,\n    MIN(\n        A.block_timestamp\n    ) AS min_block_timestamp,\n    MAX(\n        A.block_timestamp\n    ) AS max_block_timestamp,\n    COUNT(1) AS blocks_tested,\n    SUM(\n        CASE\n            WHEN COALESCE(\n                b.transition_count,\n                0\n            ) - A.transition_count <> 0 THEN 1\n            ELSE 0\n        END\n    ) AS blocks_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN COALESCE(\n                b.transition_count,\n                0\n            ) - A.transition_count <> 0 THEN A.block_id\n        END\n    ) within GROUP (\n        ORDER BY\n            A.block_id\n    ) AS blocks_impacted_array,\n    SUM(\n        ABS(\n            COALESCE(\n                b.transition_count,\n                0\n            ) - A.transition_count\n        )\n    ) AS transitions_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN COALESCE(\n                b.transition_count,\n                0\n            ) - A.transition_count <> 0 THEN OBJECT_CONSTRUCT(\n                'block',\n                A.block_id,\n                'block_timestamp',\n                A.block_timestamp,\n                'diff',\n                COALESCE(\n                    b.transition_count,\n                    0\n                ) - A.transition_count,\n                'blockchain_num_transitions',\n                A.transition_count,\n                'bronze_num_transitions',\n                COALESCE(\n                    b.transition_count,\n                    0\n                )\n            )\n        END\n    ) within GROUP(\n        ORDER BY\n            A.block_id\n    ) AS test_failure_details,\n    SYSDATE() AS test_timestamp\nFROM\n    bronze_node A\n    JOIN bronze_min bm\n    ON A.block_id >= bm.block_id\n    LEFT JOIN bronze_count b\n    ON A.block_id = b.block_id\n    AND A.tx_id = b.tx_id", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}, {"name": "silver__transitions", "package": null, "version": null}, {"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_blocks", "model.aleo_models.silver__transitions", "model.aleo_models.silver__transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver_observability__transactions_completeness": {"database": "ALEO", "schema": "silver_observability", "name": "silver_observability__transactions_completeness", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/_observability/silver_observability__transactions_completeness.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.sql", "unique_id": "model.aleo_models.silver_observability__transactions_completeness", "fqn": ["aleo_models", "silver", "core", "_observability", "silver_observability__transactions_completeness"], "alias": "transactions_completeness", "checksum": {"name": "sha256", "checksum": "d86b68549cbeba7b979b834ee3fc6de5cac4da291b11e0388a0ac024124e25f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["recent_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["recent_test"], "description": "Records of all blocks with missing transactions with a timestamp the test was run", "columns": {"MIN_BLOCK": {"name": "MIN_BLOCK", "description": "The lowest block id in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MAX_BLOCK": {"name": "MAX_BLOCK", "description": "The highest block id in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MIN_BLOCK_TIMESTAMP": {"name": "MIN_BLOCK_TIMESTAMP", "description": "The lowest block timestamp in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MAX_BLOCK_TIMESTAMP": {"name": "MAX_BLOCK_TIMESTAMP", "description": "The highest block timestamp in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKS_TESTED": {"name": "BLOCKS_TESTED", "description": "Count of blocks in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKS_IMPACTED_COUNT": {"name": "BLOCKS_IMPACTED_COUNT", "description": "Count of blocks with missing transactions in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKS_IMPACTED_ARRAY": {"name": "BLOCKS_IMPACTED_ARRAY", "description": "Array of affected blocks", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSACTIONS_IMPACTED_COUNT": {"name": "TRANSACTIONS_IMPACTED_COUNT", "description": "Total count of missing transactions in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TEST_FAILURE_DETAILS": {"name": "TEST_FAILURE_DETAILS", "description": "blocks with missing transactions with the number of missing transactions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TEST_TIMESTAMP": {"name": "TEST_TIMESTAMP", "description": "When the test was run", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/core/_observability/silver_observability__transactions_completeness.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "full_refresh": false, "tags": ["recent_test"]}, "created_at": 1753463698.4565837, "relation_name": "ALEO.silver_observability.transactions_completeness", "raw_code": "{{ config(\n    materialized = 'incremental',\n    full_refresh = false,\n    tags = ['recent_test']\n) }}\n\nWITH rel_blocks AS (\n\n    SELECT\n        block_id,\n        block_timestamp\n    FROM\n        {{ ref('core__fact_blocks') }}\n    WHERE\n        block_timestamp < DATEADD(\n            HOUR,\n            -12,\n            SYSDATE()\n        )\n\n{% if is_incremental() %}\nAND (\n    block_timestamp >= DATEADD(\n        HOUR,\n        -72,(\n            SELECT\n                MAX(\n                    max_block_timestamp\n                )\n            FROM\n                {{ this }}\n        )\n    )\n    OR ({% if var('OBSERV_FULL_TEST') %}\n        block_id >= 0\n    {% else %}\n        block_id >= (\n    SELECT\n        MIN(VALUE) - 1\n    FROM\n        (\n    SELECT\n        blocks_impacted_array\n    FROM\n        {{ this }}\n        qualify ROW_NUMBER() over (\n    ORDER BY\n        test_timestamp DESC) = 1), LATERAL FLATTEN(input => blocks_impacted_array))\n    {% endif %})\n)\n{% endif %}\n),\nbronze AS (\n    SELECT\n        A.block_id,\n        b.block_timestamp,\n        A.tx_id\n    FROM\n        {{ ref('silver__transactions') }} A\n        JOIN rel_blocks b\n        ON A.block_id = b.block_id\n\n{% if is_incremental() %}\nWHERE\n    A.inserted_timestamp >= CURRENT_DATE - 14\n    OR {% if var('OBSERV_FULL_TEST') %}\n        1 = 1\n    {% else %}\n        (\n            SELECT\n                MIN(VALUE) - 1\n            FROM\n                (\n                    SELECT\n                        blocks_impacted_array\n                    FROM\n                        {{ this }}\n                        qualify ROW_NUMBER() over (\n                            ORDER BY\n                                test_timestamp DESC\n                        ) = 1\n                ),\n                LATERAL FLATTEN(\n                    input => blocks_impacted_array\n                )\n        ) IS NOT NULL\n    {% endif %}\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY tx_id\nORDER BY\n    status DESC, A.block_id DESC, A.inserted_timestamp DESC)) = 1\n),\nbronze_count AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        COUNT(\n            DISTINCT tx_id\n        ) AS tx_count\n    FROM\n        bronze\n    GROUP BY\n        block_id,\n        block_timestamp\n),\nbronze_min AS (\n    SELECT\n        MIN(block_id) block_id\n    FROM\n        bronze\n),\nbronze_node AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_count\n    FROM\n        {{ ref('silver__blocks') }}\n    WHERE\n        block_timestamp BETWEEN (\n            SELECT\n                MIN(block_timestamp)\n            FROM\n                rel_blocks\n        )\n        AND (\n            SELECT\n                MAX(block_timestamp)\n            FROM\n                rel_blocks\n        )\n)\nSELECT\n    'transactions' AS test_name,\n    MIN(\n        A.block_id\n    ) AS min_block,\n    MAX(\n        A.block_id\n    ) AS max_block,\n    MIN(\n        A.block_timestamp\n    ) AS min_block_timestamp,\n    MAX(\n        A.block_timestamp\n    ) AS max_block_timestamp,\n    COUNT(1) AS blocks_tested,\n    SUM(\n        CASE\n            WHEN COALESCE(\n                b.tx_count,\n                0\n            ) - A.tx_count <> 0 THEN 1\n            ELSE 0\n        END\n    ) AS blocks_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN COALESCE(\n                b.tx_count,\n                0\n            ) - A.tx_count <> 0 THEN A.block_id\n        END\n    ) within GROUP (\n        ORDER BY\n            A.block_id\n    ) AS blocks_impacted_array,\n    SUM(\n        ABS(\n            COALESCE(\n                b.tx_count,\n                0\n            ) - A.tx_count\n        )\n    ) AS transactions_impacted_count,\n    ARRAY_AGG(\n        CASE\n            WHEN COALESCE(\n                b.tx_count,\n                0\n            ) - A.tx_count <> 0 THEN OBJECT_CONSTRUCT(\n                'block',\n                A.block_id,\n                'block_timestamp',\n                A.block_timestamp,\n                'diff',\n                COALESCE(\n                    b.tx_count,\n                    0\n                ) - A.tx_count,\n                'blockchain_num_txs',\n                A.tx_count,\n                'bronze_num_txs',\n                COALESCE(\n                    b.tx_count,\n                    0\n                )\n            )\n        END\n    ) within GROUP(\n        ORDER BY\n            A.block_id\n    ) AS test_failure_details,\n    SYSDATE() AS test_timestamp\nFROM\n    bronze_node A\n    JOIN bronze_min bm\n    ON A.block_id >= bm.block_id\n    LEFT JOIN bronze_count b\n    ON A.block_id = b.block_id", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}, {"name": "silver__transactions", "package": null, "version": null}, {"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_blocks", "model.aleo_models.silver__transactions", "model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__custom_programs": {"database": "ALEO", "schema": "silver", "name": "silver__custom_programs", "resource_type": "model", "package_name": "aleo_models", "path": "silver/core/programs/silver__custom_programs.sql", "original_file_path": "models/silver/core/programs/silver__custom_programs.sql", "unique_id": "model.aleo_models.silver__custom_programs", "fqn": ["aleo_models", "silver", "core", "programs", "silver__custom_programs"], "alias": "custom_programs", "checksum": {"name": "sha256", "checksum": "ac31abc7e90c5fc6ddbf8373bfa30d3893f4f8e23fb4e5a242f43ae542dd6fc4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "ephemeral"}, "created_at": 1753463695.1677158, "relation_name": null, "raw_code": "{{ config(\n    materialized = 'ephemeral'\n) }}\n\nWITH credits_aleo AS (\n\n    SELECT\n        0 AS deployment_block_id,\n        '2024-09-04 15:00:00'::TIMESTAMP AS deployment_block_timestamp,\n        'credits.aleo' AS program_id,\n        0 AS edition,\n        'program credits.aleo;\n\n        mapping committee:\n            key as address.public;\n            value as committee_state.public;\n\n        struct committee_state:\n            is_open as boolean;\n            commission as u8;\n\n        mapping delegated:\n            key as address.public;\n            value as u64.public;\n\n        mapping metadata:\n            key as address.public;\n            value as u32.public;\n\n        mapping bonded:\n            key as address.public;\n            value as bond_state.public;\n\n        struct bond_state:\n            validator as address;\n            microcredits as u64;\n\n        mapping unbonding:\n            key as address.public;\n            value as unbond_state.public;\n\n        struct unbond_state:\n            microcredits as u64;\n            height as u32;\n\n        mapping account:\n            key as address.public;\n            value as u64.public;\n\n        mapping withdraw:\n            key as address.public;\n            value as address.public;\n\n        record credits:\n            owner as address.private;\n            microcredits as u64.private;\n\n        function bond_validator:\n            input r0 as address.public;\n            input r1 as u64.public;\n            input r2 as u8.public;\n            assert.neq self.signer r0;\n            gte r1 1000000u64 into r3;\n            assert.eq r3 true;\n            gt r2 100u8 into r4;\n            assert.neq r4 true;\n            async bond_validator self.signer r0 r1 r2 into r5;\n            output r5 as credits.aleo/bond_validator.future;\n        finalize bond_validator:\n            input r0 as address.public;\n            input r1 as address.public;\n            input r2 as u64.public;\n            input r3 as u8.public;\n            get.or_use withdraw[r0] r1 into r4;\n            assert.eq r1 r4;\n            cast true r3 into r5 as committee_state;\n            get.or_use committee[r0] r5 into r6;\n            assert.eq r3 r6.commission;\n            cast r0 0u64 into r7 as bond_state;\n            get.or_use bonded[r0] r7 into r8;\n            assert.eq r8.validator r0;\n            add r8.microcredits r2 into r9;\n            cast r0 r9 into r10 as bond_state;\n            get.or_use delegated[r0] 0u64 into r11;\n            add r2 r11 into r12;\n            gte r12 10000000000000u64 into r13;\n            assert.eq r13 true;\n            get account[r0] into r14;\n            sub r14 r2 into r15;\n            contains committee[r0] into r16;\n            branch.eq r16 true to validator_in_committee;\n            set r4 into withdraw[r0];\n            gte r2 100000000u64 into r17;\n            assert.eq r17 true;\n            get.or_use metadata[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc] 0u32 into r18;\n            add r18 1u32 into r19;\n            set r19 into metadata[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc];\n            contains unbonding[r0] into r20;\n            assert.eq r20 false;\n            position validator_in_committee;\n            set r6 into committee[r0];\n            set r12 into delegated[r0];\n            set r10 into bonded[r0];\n            set r15 into account[r0];\n\n        function bond_public:\n            input r0 as address.public;\n            input r1 as address.public;\n            input r2 as u64.public;\n            gte r2 1000000u64 into r3;\n            assert.eq r3 true;\n            assert.neq self.caller r0;\n            async bond_public self.caller r0 r1 r2 into r4;\n            output r4 as credits.aleo/bond_public.future;\n        finalize bond_public:\n            input r0 as address.public;\n            input r1 as address.public;\n            input r2 as address.public;\n            input r3 as u64.public;\n            get.or_use withdraw[r0] r2 into r4;\n            assert.eq r2 r4;\n            contains bonded[r0] into r5;\n            branch.eq r5 true to continue_bond_delegator;\n            set r2 into withdraw[r0];\n            cast true 0u8 into r6 as committee_state;\n            get.or_use committee[r1] r6 into r7;\n            assert.eq r7.is_open true;\n            get.or_use metadata[aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0] 0u32 into r8;\n            add r8 1u32 into r9;\n            lte r9 100000u32 into r10;\n            assert.eq r10 true;\n            set r9 into metadata[aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0];\n            position continue_bond_delegator;\n            cast r1 0u64 into r11 as bond_state;\n            get.or_use bonded[r0] r11 into r12;\n            assert.eq r12.validator r1;\n            add r12.microcredits r3 into r13;\n            gte r13 10000000000u64 into r14;\n            assert.eq r14 true;\n            cast r1 r13 into r15 as bond_state;\n            get account[r0] into r16;\n            sub r16 r3 into r17;\n            get.or_use delegated[r1] 0u64 into r18;\n            add r3 r18 into r19;\n            contains unbonding[r1] into r20;\n            assert.eq r20 false;\n            set r15 into bonded[r0];\n            set r17 into account[r0];\n            set r19 into delegated[r1];\n\n        function unbond_public:\n            input r0 as address.public;\n            input r1 as u64.public;\n            async unbond_public self.caller r0 r1 into r2;\n            output r2 as credits.aleo/unbond_public.future;\n        finalize unbond_public:\n            input r0 as address.public;\n            input r1 as address.public;\n            input r2 as u64.public;\n            add block.height 360u32 into r3;\n            cast 0u64 r3 into r4 as unbond_state;\n            get bonded[r1] into r5;\n            get withdraw[r1] into r6;\n            is.eq r0 r6 into r7;\n            contains withdraw[r5.validator] into r8;\n            get.or_use withdraw[r5.validator] aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc into r9;\n            is.eq r0 r9 into r10;\n            and r8 r10 into r11;\n            or r7 r11 into r12;\n            assert.eq r12 true;\n            is.eq r5.validator r1 into r13;\n            branch.eq r13 true to unbond_validator;\n            get.or_use unbonding[r1] r4 into r14;\n            get delegated[r5.validator] into r15;\n            sub r5.microcredits r2 into r16;\n            lt r16 10000000000u64 into r17;\n            or r11 r17 into r18;\n            ternary r18 r5.microcredits r2 into r19;\n            add r14.microcredits r19 into r20;\n            cast r20 r3 into r21 as unbond_state;\n            set r21 into unbonding[r1];\n            sub r15 r19 into r22;\n            set r22 into delegated[r5.validator];\n            branch.eq r18 true to remove_delegator;\n            cast r5.validator r16 into r23 as bond_state;\n            set r23 into bonded[r1];\n            branch.eq true true to end_unbond_delegator;\n            position remove_delegator;\n            remove bonded[r1];\n            get metadata[aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0] into r24;\n            sub r24 1u32 into r25;\n            set r25 into metadata[aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0];\n            position end_unbond_delegator;\n            gte r22 10000000000000u64 into r26;\n            branch.eq r26 true to end;\n            position unbond_validator;\n            contains committee[r5.validator] into r27;\n            nor r13 r27 into r28;\n            branch.eq r28 true to end;\n            get committee[r5.validator] into r29;\n            get bonded[r5.validator] into r30;\n            get delegated[r5.validator] into r31;\n            lt r31 10000000000000u64 into r32;\n            branch.eq r32 true to remove_validator;\n            sub r31 r2 into r33;\n            sub r30.microcredits r2 into r34;\n            gte r34 100000000u64 into r35;\n            gte r33 10000000000000u64 into r36;\n            and r35 r36 into r37;\n            branch.eq r37 false to remove_validator;\n            get.or_use unbonding[r5.validator] r4 into r38;\n            add r38.microcredits r2 into r39;\n            cast r39 r3 into r40 as unbond_state;\n            set r40 into unbonding[r5.validator];\n            set r33 into delegated[r5.validator];\n            cast r5.validator r34 into r41 as bond_state;\n            set r41 into bonded[r5.validator];\n            branch.eq true true to end;\n            position remove_validator;\n            remove committee[r5.validator];\n            get metadata[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc] into r42;\n            sub r42 1u32 into r43;\n            set r43 into metadata[aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc];\n            sub r31 r30.microcredits into r44;\n            set r44 into delegated[r5.validator];\n            remove bonded[r5.validator];\n            get.or_use unbonding[r5.validator] r4 into r45;\n            add r30.microcredits r45.microcredits into r46;\n            cast r46 r3 into r47 as unbond_state;\n            set r47 into unbonding[r5.validator];\n            position end;\n\n        function claim_unbond_public:\n            input r0 as address.public;\n            async claim_unbond_public r0 into r1;\n            output r1 as credits.aleo/claim_unbond_public.future;\n        finalize claim_unbond_public:\n            input r0 as address.public;\n            get unbonding[r0] into r1;\n            gte block.height r1.height into r2;\n            assert.eq r2 true;\n            get withdraw[r0] into r3;\n            get.or_use account[r3] 0u64 into r4;\n            add r1.microcredits r4 into r5;\n            set r5 into account[r3];\n            remove unbonding[r0];\n            contains bonded[r0] into r6;\n            branch.eq r6 true to end;\n            remove withdraw[r0];\n            position end;\n\n        function set_validator_state:\n            input r0 as boolean.public;\n            async set_validator_state self.caller r0 into r1;\n            output r1 as credits.aleo/set_validator_state.future;\n        finalize set_validator_state:\n            input r0 as address.public;\n            input r1 as boolean.public;\n            get committee[r0] into r2;\n            cast r1 r2.commission into r3 as committee_state;\n            set r3 into committee[r0];\n\n        function transfer_public:\n            input r0 as address.public;\n            input r1 as u64.public;\n            async transfer_public self.caller r0 r1 into r2;\n            output r2 as credits.aleo/transfer_public.future;\n        finalize transfer_public:\n            input r0 as address.public;\n            input r1 as address.public;\n            input r2 as u64.public;\n            get account[r0] into r3;\n            sub r3 r2 into r4;\n            set r4 into account[r0];\n            get.or_use account[r1] 0u64 into r5;\n            add r5 r2 into r6;\n            set r6 into account[r1];\n\n        function transfer_public_as_signer:\n            input r0 as address.public;\n            input r1 as u64.public;\n            async transfer_public_as_signer self.signer r0 r1 into r2;\n            output r2 as credits.aleo/transfer_public_as_signer.future;\n        finalize transfer_public_as_signer:\n            input r0 as address.public;\n            input r1 as address.public;\n            input r2 as u64.public;\n            get account[r0] into r3;\n            sub r3 r2 into r4;\n            set r4 into account[r0];\n            get.or_use account[r1] 0u64 into r5;\n            add r5 r2 into r6;\n            set r6 into account[r1];\n\n        function transfer_private:\n            input r0 as credits.record;\n            input r1 as address.private;\n            input r2 as u64.private;\n            sub r0.microcredits r2 into r3;\n            cast r1 r2 into r4 as credits.record;\n            cast r0.owner r3 into r5 as credits.record;\n            output r4 as credits.record;\n            output r5 as credits.record;\n\n        function transfer_private_to_public:\n            input r0 as credits.record;\n            input r1 as address.public;\n            input r2 as u64.public;\n            sub r0.microcredits r2 into r3;\n            cast r0.owner r3 into r4 as credits.record;\n            async transfer_private_to_public r1 r2 into r5;\n            output r4 as credits.record;\n            output r5 as credits.aleo/transfer_private_to_public.future;\n        finalize transfer_private_to_public:\n            input r0 as address.public;\n            input r1 as u64.public;\n            get.or_use account[r0] 0u64 into r2;\n            add r1 r2 into r3;\n            set r3 into account[r0];\n\n        function transfer_public_to_private:\n            input r0 as address.private;\n            input r1 as u64.public;\n            cast r0 r1 into r2 as credits.record;\n            async transfer_public_to_private self.caller r1 into r3;\n            output r2 as credits.record;\n            output r3 as credits.aleo/transfer_public_to_private.future;\n        finalize transfer_public_to_private:\n            input r0 as address.public;\n            input r1 as u64.public;\n            get account[r0] into r2;\n            sub r2 r1 into r3;\n            set r3 into account[r0];\n\n        function join:\n            input r0 as credits.record;\n            input r1 as credits.record;\n            add r0.microcredits r1.microcredits into r2;\n            cast r0.owner r2 into r3 as credits.record;\n            output r3 as credits.record;\n\n        function split:\n            input r0 as credits.record;\n            input r1 as u64.private;\n            sub r0.microcredits r1 into r2;\n            sub r2 10000u64 into r3;\n            cast r0.owner r1 into r4 as credits.record;\n            cast r0.owner r3 into r5 as credits.record;\n            output r4 as credits.record;\n            output r5 as credits.record;\n\n        function fee_private:\n            input r0 as credits.record;\n            input r1 as u64.public;\n            input r2 as u64.public;\n            input r3 as field.public;\n            assert.neq r1 0u64;\n            assert.neq r3 0field;\n            add r1 r2 into r4;\n            sub r0.microcredits r4 into r5;\n            cast r0.owner r5 into r6 as credits.record;\n            output r6 as credits.record;\n\n        function fee_public:\n            input r0 as u64.public;\n            input r1 as u64.public;\n            input r2 as field.public;\n            assert.neq r0 0u64;\n            assert.neq r2 0field;\n            add r0 r1 into r3;\n            async fee_public self.signer r3 into r4;\n            output r4 as credits.aleo/fee_public.future;\n        finalize fee_public:\n            input r0 as address.public;\n            input r1 as u64.public;\n            get account[r0] into r2;\n            sub r2 r1 into r3;\n            set r3 into account[r0];' AS program,\n        NULL AS verifying_keys,\n        {{ dbt_utils.generate_surrogate_key(\n            ['program_id','edition']\n        ) }} AS programs_id,\n        SYSDATE() AS inserted_timestamp,\n        SYSDATE() AS modified_timestamp,\n        '{{ invocation_id }}' AS _invocation_id\n)\n\nSELECT * FROM credits_aleo", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__liquidity_pool_actions_arcane": {"database": "ALEO", "schema": "silver", "name": "silver__liquidity_pool_actions_arcane", "resource_type": "model", "package_name": "aleo_models", "path": "silver/defi/silver__liquidity_pool_actions_arcane.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.sql", "unique_id": "model.aleo_models.silver__liquidity_pool_actions_arcane", "fqn": ["aleo_models", "silver", "defi", "silver__liquidity_pool_actions_arcane"], "alias": "liquidity_pool_actions_arcane", "checksum": {"name": "sha256", "checksum": "4dfc8b2c70680d98234bbd685ba0d0ce10370604869c805ca73ec026473806d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "liquidity_pool_actions_arcane_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["noncore", "full_test"], "description": "", "columns": {"liquidity_pool_actions_arcane_id": {"name": "liquidity_pool_actions_arcane_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "succeeded": {"name": "succeeded", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "root_action": {"name": "root_action", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "liquidity_action": {"name": "liquidity_action", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "liquidity_provider": {"name": "liquidity_provider", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "token1_amount_unadj": {"name": "token1_amount_unadj", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "token1_amount": {"name": "token1_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "token1_symbol": {"name": "token1_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "token1_id": {"name": "token1_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "token2_amount_unadj": {"name": "token2_amount_unadj", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "token2_amount": {"name": "token2_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "token2_symbol": {"name": "token2_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "token2_id": {"name": "token2_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": "liquidity_pool_actions_arcane_id", "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["modified_timestamp::DATE"], "tags": ["noncore", "full_test"]}, "created_at": 1753463698.6481473, "relation_name": "ALEO.silver.liquidity_pool_actions_arcane", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'liquidity_pool_actions_arcane_id',\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['modified_timestamp::DATE'],\n    tags = ['noncore', 'full_test']\n) }}\n\n-- depends on {{ ref('core__fact_transitions') }}\nWITH base_transitions AS (\n    SELECT \n        block_timestamp,\n        block_id,\n        tx_id,\n        succeeded,\n        program_id,\n        function,\n        INPUTS\n    FROM \n        {{ ref('core__fact_transitions') }}\n    WHERE \n        program_id ILIKE 'arcn%'\n        AND function NOT ILIKE '%credits%'\n        {% if is_incremental() %}\n        AND modified_timestamp >= (\n            SELECT\n                MAX(modified_timestamp)\n            FROM\n                {{ this }}\n        )\n        {% endif %}\n),\nroot_actions AS (\n    SELECT\n        tx_id,\n        program_id || '/' || function AS root_action,\n        CASE \n            WHEN function ILIKE '%add%' THEN 'Add'\n            WHEN function ILIKE '%remove%' THEN 'Remove'\n            ELSE 'OTHER'\n        END AS liquidity_action\n    FROM\n        base_transitions\n    WHERE\n        function ILIKE '%liq%'\n),\nreports AS (\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        succeeded,\n        INPUTS\n    FROM\n        base_transitions\n    WHERE\n        function = 'report'\n),\nparsed AS (\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        succeeded,\n        root_action,\n        liquidity_action,\n        inputs[1]:value::string AS liquidity_provider,\n        inputs[2]:value::string AS token1_id,\n        inputs[3]:value::string AS token2_id,\n        split_part(inputs[4]:value, 'u', 1) :: number AS token1_amount_raw,\n        split_part(inputs[5]:value, 'u', 1) :: number AS token2_amount_raw\n    FROM \n        root_actions\n    JOIN\n        reports USING(tx_id)\n),\ntokens AS (\n    SELECT\n        token_id,\n        name_encoded,\n        token_name,\n        decimals\n    FROM\n        {{ ref('silver__token_registrations') }}\n)\nSELECT \n    p.block_timestamp,\n    p.block_id,\n    p.tx_id,\n    p.succeeded,\n    p.root_action,\n    p.liquidity_action,\n    p.liquidity_provider,\n    p.token1_amount_raw as token1_amount_unadj,\n    p.token1_amount_raw / power(10, t1.decimals) AS token1_amount,\n    t1.symbol AS token1_symbol,\n    p.token1_id,\n    p.token2_amount_raw as token2_amount_unadj,\n    p.token2_amount_raw / power(10, t2.decimals) AS token2_amount,\n    t2.symbol AS token2_symbol,\n    p.token2_id,\n    {{ dbt_utils.generate_surrogate_key(['p.tx_id', 'p.token1_id', 'p.token2_id']) }} AS liquidity_pool_actions_arcane_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    parsed p\nLEFT JOIN \n    {{ ref('silver__token_registrations') }} t1 ON p.token1_id = t1.token_id\nLEFT JOIN \n    {{ ref('silver__token_registrations') }} t2 ON p.token2_id = t2.token_id\nQUALIFY(ROW_NUMBER() OVER(PARTITION BY p.tx_id ORDER BY root_action) = 1)", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}, {"name": "core__fact_transitions", "package": null, "version": null}, {"name": "silver__token_registrations", "package": null, "version": null}, {"name": "silver__token_registrations", "package": null, "version": null}, {"name": "silver__token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_transitions", "model.aleo_models.silver__token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__swaps_arcane": {"database": "ALEO", "schema": "silver", "name": "silver__swaps_arcane", "resource_type": "model", "package_name": "aleo_models", "path": "silver/defi/silver__swaps_arcane.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.sql", "unique_id": "model.aleo_models.silver__swaps_arcane", "fqn": ["aleo_models", "silver", "defi", "silver__swaps_arcane"], "alias": "swaps_arcane", "checksum": {"name": "sha256", "checksum": "42969cd8ae454d79938e7d376083f7223d51a3f72a5dc0a25f76c5554f676918"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore", "full_test"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "swaps_arcane_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["noncore", "full_test"], "description": "", "columns": {"swaps_arcane_id": {"name": "swaps_arcane_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "succeeded": {"name": "succeeded", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "swapper": {"name": "swapper", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_amount_unadj": {"name": "from_amount_unadj", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_amount": {"name": "from_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_symbol": {"name": "from_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "from_id": {"name": "from_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "to_amount_unadj": {"name": "to_amount_unadj", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "to_amount": {"name": "to_amount", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "to_symbol": {"name": "to_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "to_id": {"name": "to_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "root_action": {"name": "root_action", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/defi/silver__swaps_arcane.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "unique_key": "swaps_arcane_id", "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["modified_timestamp::DATE"], "tags": ["noncore", "full_test"]}, "created_at": 1753463698.6803198, "relation_name": "ALEO.silver.swaps_arcane", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'swaps_arcane_id',\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['modified_timestamp::DATE'],\n    tags = ['noncore', 'full_test']\n) }}\n\n-- depends on {{ ref('core__fact_transitions') }}\nWITH base_transitions AS (\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        succeeded,\n        program_id,\n        function,\n        inputs,\n        index,\n        modified_timestamp\n    FROM\n        {{ ref('core__fact_transitions') }}\n    WHERE\n        program_id ILIKE 'arcn%'\n    {% if is_incremental() %}\n    AND modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n    {% endif %}\n),\nroot_actions AS (\n    SELECT\n        tx_id,\n        program_id || '/' || function AS root_action\n    FROM\n        base_transitions\n    WHERE\n        function ILIKE '%swap%'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY tx_id ORDER BY index DESC) = 1\n),\nreports AS (\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        succeeded,\n        REPLACE(inputs[0]:value, 'field', '') AS address_from,\n        REPLACE(inputs[1]:value, 'field', '') AS address_to,\n        inputs[2]:value :: STRING AS swap_from,\n        inputs[3]:value :: STRING AS swap_to,\n        REPLACE(inputs[4]:value, 'u128', '') AS amount_from,\n        REPLACE(inputs[5]:value, 'u128', '') AS amount_to\n    FROM\n        base_transitions\n    WHERE\n        program_id = 'arcn_compliance_v1.aleo'\n        AND function = 'report'\n),\nagg AS (\n    SELECT\n        block_timestamp,\n        block_id,\n        tx_id,\n        succeeded,\n        root_action,\n        address_from,\n        address_to,\n        swap_from,\n        swap_to,\n        amount_from :: float AS amount_from,\n        amount_to :: float AS amount_to\n    FROM\n        reports\n    JOIN\n        root_actions USING(tx_id)\n)\n\nSELECT \n    a.block_timestamp,\n    a.block_id,\n    a.tx_id,\n    a.succeeded,\n    a.address_from AS swapper,\n    a.amount_from as from_amount_unadj,\n    a.amount_from / power(10, t1.decimals) AS from_amount,\n    t1.symbol AS from_symbol,\n    a.swap_from AS from_id,\n    a.amount_to as to_amount_unadj,\n    a.amount_to / power(10, t2.decimals) AS to_amount,\n    t2.symbol AS to_symbol,\n    a.swap_to AS to_id,\n    a.root_action,\n    {{ dbt_utils.generate_surrogate_key(['a.tx_id', 't1.token_id']) }} AS swaps_arcane_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    agg a\nLEFT JOIN \n    {{ ref('silver__token_registrations') }} t1 ON a.swap_from = t1.token_id\nLEFT JOIN \n    {{ ref('silver__token_registrations') }} t2 ON a.swap_to = t2.token_id", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}, {"name": "core__fact_transitions", "package": null, "version": null}, {"name": "silver__token_registrations", "package": null, "version": null}, {"name": "silver__token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_transitions", "model.aleo_models.silver__token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__token_registrations": {"database": "ALEO", "schema": "silver", "name": "silver__token_registrations", "resource_type": "model", "package_name": "aleo_models", "path": "silver/tokens/silver__token_registrations.sql", "original_file_path": "models/silver/tokens/silver__token_registrations.sql", "unique_id": "model.aleo_models.silver__token_registrations", "fqn": ["aleo_models", "silver", "tokens", "silver__token_registrations"], "alias": "token_registrations", "checksum": {"name": "sha256", "checksum": "fe3a69bd48f492e87c56a55a1e4d8720b2c0a25717dc7d64a2ef70a8436690b7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "full_test"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core", "full_test"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["core", "full_test"]}, "created_at": 1753463695.1940784, "relation_name": "ALEO.silver.token_registrations", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['core', 'full_test']\n) }}\n\n-- depends on {{ ref('core__fact_transitions') }}\nwith base_data as (\n    select \n        tx_id,\n        block_id,\n        block_timestamp,\n        INPUTS\n    from \n        {{ ref('core__fact_transitions') }}\n    where \n        program_id = 'token_registry.aleo' \n        and function = 'register_token'\n        and succeeded\n    qualify\n        row_number() over (partition by tx_id order by index) = 1\n),\n\nflattened_inputs as (\n    select \n        tx_id,\n        block_id,\n        block_timestamp,\n        value:id::string as id,\n        value:value::string as value,\n        f.index\n    from base_data,\n    lateral flatten(input => INPUTS) f\n),\n\nparsed_inputs as (\n    select \n        tx_id,\n        block_id,\n        block_timestamp,\n        OBJECT_AGG(index::STRING, value::variant) AS J,\n        J:\"0\"::STRING as token_id_raw,\n        J:\"1\"::STRING as name_raw,\n        J:\"2\"::STRING as symbol_raw,\n        J:\"3\"::STRING as decimals_raw,\n        J:\"4\"::STRING as max_supply_raw,\n        J:\"5\"::STRING as external_auth_required_raw,\n        J:\"6\"::STRING as external_auth_party\n    from \n        flattened_inputs \n    group by \n        tx_id, block_id, block_timestamp\n),\ncleaned_strings as (\n    select\n        tx_id,\n        block_id,\n        block_timestamp,\n        token_id_raw as token_id,\n        split_part(name_raw, 'u', 1) as name_encoded,\n        split_part(symbol_raw, 'u', 1) as symbol_encoded,\n        split_part(decimals_raw, 'u', 1) as decimals,\n        split_part(max_supply_raw, 'u', 1) as max_supply,\n        external_auth_required_raw :: boolean as external_auth_required,\n        external_auth_party\n    from\n        parsed_inputs\n),\nfin as (\n    select \n        tx_id as tx_id_created,\n        block_id as block_id_created,\n        block_timestamp as block_timestamp_created,\n        token_id,\n        utils.udf_hex_to_string(substr(utils.udf_int_to_hex(name_encoded), 3)) as token_name,\n        utils.udf_hex_to_string(substr(utils.udf_int_to_hex(symbol_encoded), 3)) as symbol,\n        decimals,\n        max_supply,\n        external_auth_required,\n        external_auth_party,\n        name_encoded,\n        symbol_encoded\n    from \n        cleaned_strings\n    \n    UNION ALL\n\n    SELECT\n        null as tx_id_created,\n        null as block_id_created,\n        null as block_timestamp_created,\n        '3443843282313283355522573239085696902919850365217539366784739393210722344986field' as token_id,\n        'Aleo' as token_name,\n        'ALEO' as symbol,\n        6 as decimals,\n        null as max_supply,\n        FALSE as external_auth_required,\n        null as external_auth_party,\n        null as name_encoded,\n        null as symbol_encoded\n)\nSELECT\n    tx_id_created,\n    block_id_created,\n    block_timestamp_created,\n    token_id,\n    token_name,\n    symbol,\n    decimals :: int as decimals,\n    max_supply as max_supply,\n    external_auth_required,\n    external_auth_party,\n    name_encoded,\n    symbol_encoded,\n    {{ dbt_utils.generate_surrogate_key(\n        ['token_id']\n    ) }} AS tokens_id,\n    SYSDATE() as inserted_timestamp,\n    SYSDATE() as modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    fin", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}, {"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver_stats__core_metrics_block_hourly": {"database": "ALEO", "schema": "silver_stats", "name": "silver_stats__core_metrics_block_hourly", "resource_type": "model", "package_name": "aleo_models", "path": "silver/stats/silver_stats__core_metrics_block_hourly.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_block_hourly.sql", "unique_id": "model.aleo_models.silver_stats__core_metrics_block_hourly", "fqn": ["aleo_models", "silver", "stats", "silver_stats__core_metrics_block_hourly"], "alias": "core_metrics_block_hourly", "checksum": {"name": "sha256", "checksum": "7a280d7f9cb8eba713111dec8212dfcc8fc2ed0d39cff640a128d7ba647bb864"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["noncore"], "description": "", "columns": {"BLOCK_TIMESTAMP_HOUR": {"name": "BLOCK_TIMESTAMP_HOUR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID_MIN": {"name": "BLOCK_ID_MIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_ID_MAX": {"name": "BLOCK_ID_MAX", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCK_COUNT": {"name": "BLOCK_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/stats/silver_stats__core_metrics_block_hourly.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["noncore"]}, "created_at": 1753463698.7037446, "relation_name": "ALEO.silver_stats.core_metrics_block_hourly", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['noncore']\n) }}\n\nSELECT\n    DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) AS block_timestamp_hour,\n    MIN(block_id) AS block_id_min,\n    MAX(block_id) AS block_id_max,\n    COUNT(\n        1\n    ) AS block_count,\n    {{ dbt_utils.generate_surrogate_key(\n        ['block_timestamp_hour']\n    ) }} AS core_metrics_block_hourly_id,\n    MAX(inserted_timestamp) AS inserted_timestamp,\n    MAX(modified_timestamp) AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref('core__fact_blocks') }}\nWHERE\n    block_timestamp_hour < DATE_TRUNC('hour', SYSDATE())\nGROUP BY\n    1", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver_stats__core_metrics_hourly": {"database": "ALEO", "schema": "silver_stats", "name": "silver_stats__core_metrics_hourly", "resource_type": "model", "package_name": "aleo_models", "path": "silver/stats/silver_stats__core_metrics_hourly.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.sql", "unique_id": "model.aleo_models.silver_stats__core_metrics_hourly", "fqn": ["aleo_models", "silver", "stats", "silver_stats__core_metrics_hourly"], "alias": "core_metrics_hourly", "checksum": {"name": "sha256", "checksum": "b2578a85ba652d332f49bd7e4e45c1748328d50d395107baeea43441c1a68734"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["noncore"], "description": "", "columns": {"BLOCK_TIMESTAMP_HOUR": {"name": "BLOCK_TIMESTAMP_HOUR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSACTION_COUNT": {"name": "TRANSACTION_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSACTION_COUNT_SUCCESS": {"name": "TRANSACTION_COUNT_SUCCESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TRANSACTION_COUNT_FAILED": {"name": "TRANSACTION_COUNT_FAILED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "UNIQUE_FROM_COUNT": {"name": "UNIQUE_FROM_COUNT", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOTAL_FEES": {"name": "TOTAL_FEES", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/stats/silver_stats__core_metrics_hourly.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view", "tags": ["noncore"]}, "created_at": 1753463698.7054958, "relation_name": "ALEO.silver_stats.core_metrics_hourly", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['noncore']\n) }}\nSELECT\n    DATE_TRUNC('hour', block_timestamp) AS block_timestamp_hour,\n    COUNT(\n        DISTINCT tx_id\n    ) AS transaction_count,\n    COUNT(\n        DISTINCT CASE\n            WHEN tx_succeeded THEN tx_id\n        END\n    ) AS transaction_count_success,\n    COUNT(\n        DISTINCT CASE\n            WHEN NOT tx_succeeded THEN tx_id\n        END\n    ) AS transaction_count_failed,\n    COUNT(\n        DISTINCT fee_payer\n    ) AS unique_from_count,\n    SUM(fee) AS total_fees,\n    MAX(inserted_timestamp) AS _inserted_timestamp,  \n    {{ dbt_utils.generate_surrogate_key(\n        ['block_timestamp_hour']\n    ) }} AS core_metrics_hourly_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref('core__fact_transactions') }} ts\nWHERE\n    DATE_TRUNC('hour', block_timestamp) < DATE_TRUNC(\n        'hour',\n        CURRENT_TIMESTAMP\n    )\nGROUP BY\n    1", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__complete_provider_prices": {"database": "ALEO", "schema": "silver", "name": "silver__complete_provider_prices", "resource_type": "model", "package_name": "aleo_models", "path": "silver/price/silver__complete_provider_prices.sql", "original_file_path": "models/silver/price/silver__complete_provider_prices.sql", "unique_id": "model.aleo_models.silver__complete_provider_prices", "fqn": ["aleo_models", "silver", "price", "silver__complete_provider_prices"], "alias": "complete_provider_prices", "checksum": {"name": "sha256", "checksum": "31c03283ea4e6bcd5d38c99c1e4919730fe034c3abfc8482d2210dcdfbb87151"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id),SUBSTRING(asset_id)", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "complete_provider_prices_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["recorded_hour::DATE", "provider"]}, "tags": ["noncore"], "description": "", "columns": {"PROVIDER": {"name": "PROVIDER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "RECORDED_HOUR": {"name": "RECORDED_HOUR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMPLETE_PROVIDER_PRICES_ID": {"name": "COMPLETE_PROVIDER_PRICES_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/price/silver__complete_provider_prices.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "complete_provider_prices_id", "cluster_by": ["recorded_hour::DATE", "provider"], "tags": ["noncore"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id),SUBSTRING(asset_id)"]}, "created_at": 1753463698.7594693, "relation_name": "ALEO.silver.complete_provider_prices", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    unique_key = 'complete_provider_prices_id',\n    cluster_by = ['recorded_hour::DATE','provider'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id),SUBSTRING(asset_id)\",\n    tags = ['noncore']\n) }}\n\nSELECT\n    p.asset_id,\n    recorded_hour,\n    OPEN,\n    high,\n    low,\n    CLOSE,\n    p.provider,\n    p.source,\n    p._inserted_timestamp,\n    p.inserted_timestamp,\n    p.modified_timestamp,\n    p.complete_provider_prices_id,\n    p._invocation_id\nFROM\n    {{ ref(\n        'bronze__complete_provider_prices'\n    ) }}\n    p\n    INNER JOIN {{ ref('bronze__complete_provider_asset_metadata') }}\n    m\n    ON p.asset_id = m.asset_id\n\n{% if is_incremental() %}\nWHERE\n    p.modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY p.asset_id, recorded_hour, p.provider\nORDER BY\n    p.modified_timestamp DESC)) = 1", "language": "sql", "refs": [{"name": "bronze__complete_provider_prices", "package": null, "version": null}, {"name": "bronze__complete_provider_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.bronze__complete_provider_prices", "model.aleo_models.bronze__complete_provider_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__complete_native_asset_metadata": {"database": "ALEO", "schema": "silver", "name": "silver__complete_native_asset_metadata", "resource_type": "model", "package_name": "aleo_models", "path": "silver/price/silver__complete_native_asset_metadata.sql", "original_file_path": "models/silver/price/silver__complete_native_asset_metadata.sql", "unique_id": "model.aleo_models.silver__complete_native_asset_metadata", "fqn": ["aleo_models", "silver", "price", "silver__complete_native_asset_metadata"], "alias": "complete_native_asset_metadata", "checksum": {"name": "sha256", "checksum": "1d74506185dae52fa411b7265f1e4f4ef7b7ebd63ee4c63189b6f52d82f6fe68"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, symbol, name),SUBSTRING(asset_id, symbol, name)", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "complete_native_asset_metadata_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["noncore"], "description": "", "columns": {"PROVIDER": {"name": "PROVIDER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMPLETE_NATIVE_ASSET_METADATA_ID": {"name": "COMPLETE_NATIVE_ASSET_METADATA_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/price/silver__complete_native_asset_metadata.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "complete_native_asset_metadata_id", "tags": ["noncore"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, symbol, name),SUBSTRING(asset_id, symbol, name)"]}, "created_at": 1753463698.8971653, "relation_name": "ALEO.silver.complete_native_asset_metadata", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    unique_key = 'complete_native_asset_metadata_id',\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, symbol, name),SUBSTRING(asset_id, symbol, name)\",\n    tags = ['noncore']\n) }}\n\nSELECT\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    is_deprecated,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_native_asset_metadata_id,\n    _invocation_id\nFROM\n    {{ ref(\n        'bronze__complete_native_asset_metadata'\n    ) }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "bronze__complete_native_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.bronze__complete_native_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__complete_token_prices": {"database": "ALEO", "schema": "silver", "name": "silver__complete_token_prices", "resource_type": "model", "package_name": "aleo_models", "path": "silver/price/silver__complete_token_prices.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.sql", "unique_id": "model.aleo_models.silver__complete_token_prices", "fqn": ["aleo_models", "silver", "price", "silver__complete_token_prices"], "alias": "complete_token_prices", "checksum": {"name": "sha256", "checksum": "bc2a9532705032124e8d65ec95ade24f91dc94ee15b4e2cee7385bd876b61f21"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, token_address, symbol, name),SUBSTRING(asset_id, token_address, symbol, name)", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "complete_token_prices_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["hour::DATE"]}, "tags": ["noncore"], "description": "", "columns": {"HOUR": {"name": "HOUR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN_ID": {"name": "BLOCKCHAIN_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROVIDER": {"name": "PROVIDER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_IMPUTED": {"name": "IS_IMPUTED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMPLETE_TOKEN_PRICES_ID": {"name": "COMPLETE_TOKEN_PRICES_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/price/silver__complete_token_prices.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "complete_token_prices_id", "cluster_by": ["hour::DATE"], "tags": ["noncore"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, token_address, symbol, name),SUBSTRING(asset_id, token_address, symbol, name)"]}, "created_at": 1753463698.8777854, "relation_name": "ALEO.silver.complete_token_prices", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    unique_key = 'complete_token_prices_id',\n    cluster_by = ['hour::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, token_address, symbol, name),SUBSTRING(asset_id, token_address, symbol, name)\",\n    tags = ['noncore']\n) }}\n\nSELECT\n    HOUR,\n    LOWER(\n        p.token_address\n    ) AS token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_imputed,\n    is_deprecated,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_prices_id,\n    _invocation_id\nFROM\n    {{ ref(\n        'bronze__complete_token_prices'\n    ) }}\n    p\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "bronze__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.bronze__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__complete_native_prices": {"database": "ALEO", "schema": "silver", "name": "silver__complete_native_prices", "resource_type": "model", "package_name": "aleo_models", "path": "silver/price/silver__complete_native_prices.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.sql", "unique_id": "model.aleo_models.silver__complete_native_prices", "fqn": ["aleo_models", "silver", "price", "silver__complete_native_prices"], "alias": "complete_native_prices", "checksum": {"name": "sha256", "checksum": "c996b17f283be1d16c3cb9731f0a2a040072384ca21f47cea2436f9e9b0523a2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, symbol, name),SUBSTRING(asset_id, symbol, name)", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "complete_native_prices_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "cluster_by": ["hour::DATE"]}, "tags": ["noncore"], "description": "", "columns": {"HOUR": {"name": "HOUR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PROVIDER": {"name": "PROVIDER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "IS_IMPUTED": {"name": "IS_IMPUTED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMPLETE_NATIVE_PRICES_ID": {"name": "COMPLETE_NATIVE_PRICES_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/price/silver__complete_native_prices.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "complete_native_prices_id", "cluster_by": ["hour::DATE"], "tags": ["noncore"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, symbol, name),SUBSTRING(asset_id, symbol, name)"]}, "created_at": 1753463698.845335, "relation_name": "ALEO.silver.complete_native_prices", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    unique_key = 'complete_native_prices_id',\n    cluster_by = ['hour::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, symbol, name),SUBSTRING(asset_id, symbol, name)\",\n    tags = ['noncore']\n) }}\n\nSELECT\n    HOUR,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    is_imputed,\n    is_deprecated,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_native_prices_id,\n    _invocation_id\nFROM\n    {{ ref(\n        'bronze__complete_native_prices'\n    ) }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "bronze__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.bronze__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__complete_token_asset_metadata": {"database": "ALEO", "schema": "silver", "name": "silver__complete_token_asset_metadata", "resource_type": "model", "package_name": "aleo_models", "path": "silver/price/silver__complete_token_asset_metadata.sql", "original_file_path": "models/silver/price/silver__complete_token_asset_metadata.sql", "unique_id": "model.aleo_models.silver__complete_token_asset_metadata", "fqn": ["aleo_models", "silver", "price", "silver__complete_token_asset_metadata"], "alias": "complete_token_asset_metadata", "checksum": {"name": "sha256", "checksum": "77b2da9f4abae271b2d32658e566c67f5a4b919c8b0003953f4c721be622523e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, token_address, symbol, name),SUBSTRING(asset_id, token_address, symbol, name)", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "complete_token_asset_metadata_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["noncore"], "description": "", "columns": {"PROVIDER": {"name": "PROVIDER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "BLOCKCHAIN_ID": {"name": "BLOCKCHAIN_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMPLETE_TOKEN_ASSET_METADATA_ID": {"name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/price/silver__complete_token_asset_metadata.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "complete_token_asset_metadata_id", "tags": ["noncore"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, token_address, symbol, name),SUBSTRING(asset_id, token_address, symbol, name)"]}, "created_at": 1753463698.8635821, "relation_name": "ALEO.silver.complete_token_asset_metadata", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    unique_key = 'complete_token_asset_metadata_id',\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, token_address, symbol, name),SUBSTRING(asset_id, token_address, symbol, name)\",\n    tags = ['noncore']\n) }}\n\nSELECT\n    LOWER(\n        A.token_address\n    ) AS token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_deprecated,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_asset_metadata_id,\n    _invocation_id\nFROM\n    {{ ref(\n        'bronze__complete_token_asset_metadata'\n    ) }} A\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "bronze__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.bronze__complete_token_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.silver__complete_provider_asset_metadata": {"database": "ALEO", "schema": "silver", "name": "silver__complete_provider_asset_metadata", "resource_type": "model", "package_name": "aleo_models", "path": "silver/price/silver__complete_provider_asset_metadata.sql", "original_file_path": "models/silver/price/silver__complete_provider_asset_metadata.sql", "unique_id": "model.aleo_models.silver__complete_provider_asset_metadata", "fqn": ["aleo_models", "silver", "price", "silver__complete_provider_asset_metadata"], "alias": "complete_provider_asset_metadata", "checksum": {"name": "sha256", "checksum": "fdb2a6c445d6c8a43e1a36b00194a0a84e78fd1713c25f4a1017523fae8e2e65"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["noncore"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, token_address, symbol, name),SUBSTRING(asset_id, token_address, symbol, name)", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "complete_provider_asset_metadata_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["noncore"], "description": "", "columns": {"PROVIDER": {"name": "PROVIDER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ASSET_ID": {"name": "ASSET_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "COMPLETE_PROVIDER_ASSET_METADATA_ID": {"name": "COMPLETE_PROVIDER_ASSET_METADATA_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "aleo_models://models/silver/price/silver__complete_provider_asset_metadata.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "incremental", "incremental_strategy": "delete+insert", "unique_key": "complete_provider_asset_metadata_id", "tags": ["noncore"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, token_address, symbol, name),SUBSTRING(asset_id, token_address, symbol, name)"]}, "created_at": 1753463698.7473004, "relation_name": "ALEO.silver.complete_provider_asset_metadata", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'delete+insert',\n    unique_key = 'complete_provider_asset_metadata_id',\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(asset_id, token_address, symbol, name),SUBSTRING(asset_id, token_address, symbol, name)\",\n    tags = ['noncore']\n) }}\n\nSELECT\n    asset_id,\n    token_address,\n    NAME,\n    symbol,\n    platform,\n    platform_id,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_provider_asset_metadata_id,\n    _invocation_id\nFROM\n    {{ ref(\n        'bronze__complete_provider_asset_metadata'\n    ) }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "bronze__complete_provider_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.fsc_utils.set_query_tag"], "nodes": ["model.aleo_models.bronze__complete_provider_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.bronze__blocks_FR": {"database": "ALEO", "schema": "bronze", "name": "bronze__blocks_FR", "resource_type": "model", "package_name": "aleo_models", "path": "bronze/bronze__blocks_FR.sql", "original_file_path": "models/bronze/bronze__blocks_FR.sql", "unique_id": "model.aleo_models.bronze__blocks_FR", "fqn": ["aleo_models", "bronze", "bronze__blocks_FR"], "alias": "blocks_FR", "checksum": {"name": "sha256", "checksum": "99ae8749cf87d085e38936f4c4958e7ebf4e8d193aecf18878f91014967b6810"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.2604277, "relation_name": "ALEO.bronze.blocks_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_FR_query_v2(\n    model = \"blocks\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "blocks"], ["bronze_streamline", "blocks"]], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.streamline_external_table_FR_query_v2", "macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.bronze_streamline.blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.bronze__blocks": {"database": "ALEO", "schema": "bronze", "name": "bronze__blocks", "resource_type": "model", "package_name": "aleo_models", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "unique_id": "model.aleo_models.bronze__blocks", "fqn": ["aleo_models", "bronze", "bronze__blocks"], "alias": "blocks", "checksum": {"name": "sha256", "checksum": "bf5c6c9106d4e3a6ab9c4789ffa3cf6582cbec2f4bbf09097f3c848669abc458"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.2675505, "relation_name": "ALEO.bronze.blocks", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_query_v2(\n    model = \"blocks\",\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 4), '_', 1) AS INTEGER )\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "blocks"], ["bronze_streamline", "blocks"]], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.streamline_external_table_query_v2", "macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.bronze_streamline.blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.bronze__complete_native_asset_metadata": {"database": "ALEO", "schema": "bronze", "name": "bronze__complete_native_asset_metadata", "resource_type": "model", "package_name": "aleo_models", "path": "bronze/price/bronze__complete_native_asset_metadata.sql", "original_file_path": "models/bronze/price/bronze__complete_native_asset_metadata.sql", "unique_id": "model.aleo_models.bronze__complete_native_asset_metadata", "fqn": ["aleo_models", "bronze", "price", "bronze__complete_native_asset_metadata"], "alias": "complete_native_asset_metadata", "checksum": {"name": "sha256", "checksum": "ae6c30e0da8779330279a5dc3648cc690fab3b3ee2d4e7970320674123a52fb8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.2754068, "relation_name": "ALEO.bronze.complete_native_asset_metadata", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    is_deprecated,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_native_asset_metadata_id,\n    _invocation_id\nFROM\n    {{ source(\n        'crosschain_silver',\n        'complete_native_asset_metadata'\n    ) }}\nWHERE\n    blockchain = 'aleo'", "language": "sql", "refs": [], "sources": [["crosschain_silver", "complete_native_asset_metadata"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.crosschain_silver.complete_native_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.bronze__complete_provider_prices": {"database": "ALEO", "schema": "bronze", "name": "bronze__complete_provider_prices", "resource_type": "model", "package_name": "aleo_models", "path": "bronze/price/bronze__complete_provider_prices.sql", "original_file_path": "models/bronze/price/bronze__complete_provider_prices.sql", "unique_id": "model.aleo_models.bronze__complete_provider_prices", "fqn": ["aleo_models", "bronze", "price", "bronze__complete_provider_prices"], "alias": "complete_provider_prices", "checksum": {"name": "sha256", "checksum": "e856138efb94c2684e079846dee7eb1127434129be76ce96e78d0a786b4ab54b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.281655, "relation_name": "ALEO.bronze.complete_provider_prices", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    asset_id,\n    recorded_hour,\n    OPEN,\n    high,\n    low,\n    CLOSE,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_provider_prices_id,\n    _invocation_id\nFROM\n    {{ source(\n        'crosschain_silver',\n        'complete_provider_prices'\n    ) }}\n    -- prices for all ids", "language": "sql", "refs": [], "sources": [["crosschain_silver", "complete_provider_prices"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.crosschain_silver.complete_provider_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.bronze__complete_provider_asset_metadata": {"database": "ALEO", "schema": "bronze", "name": "bronze__complete_provider_asset_metadata", "resource_type": "model", "package_name": "aleo_models", "path": "bronze/price/bronze__complete_provider_asset_metadata.sql", "original_file_path": "models/bronze/price/bronze__complete_provider_asset_metadata.sql", "unique_id": "model.aleo_models.bronze__complete_provider_asset_metadata", "fqn": ["aleo_models", "bronze", "price", "bronze__complete_provider_asset_metadata"], "alias": "complete_provider_asset_metadata", "checksum": {"name": "sha256", "checksum": "71e9c9575a730d2bf25afb9329898d3e60c30392c80ad2e7cf2ccb56aa716f17"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.2865252, "relation_name": "ALEO.bronze.complete_provider_asset_metadata", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    asset_id,\n    'aleo' AS token_address,\n    NAME,\n    symbol,\n    'aleo' AS platform,\n    platform_id,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_provider_asset_metadata_id,\n    _invocation_id\nFROM\n    {{ source(\n        'crosschain_silver',\n        'complete_provider_asset_metadata'\n    ) }}\nWHERE\n    asset_id = 'aleo'\n    AND token_address IS NULL", "language": "sql", "refs": [], "sources": [["crosschain_silver", "complete_provider_asset_metadata"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.crosschain_silver.complete_provider_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.bronze__complete_token_prices": {"database": "ALEO", "schema": "bronze", "name": "bronze__complete_token_prices", "resource_type": "model", "package_name": "aleo_models", "path": "bronze/price/bronze__complete_token_prices.sql", "original_file_path": "models/bronze/price/bronze__complete_token_prices.sql", "unique_id": "model.aleo_models.bronze__complete_token_prices", "fqn": ["aleo_models", "bronze", "price", "bronze__complete_token_prices"], "alias": "complete_token_prices", "checksum": {"name": "sha256", "checksum": "548dfd7bfd96d36ea592dc309728621fa5362e6613a415786b6cef9741ae1a1a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.2913635, "relation_name": "ALEO.bronze.complete_token_prices", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    HOUR,\n    'aleo' AS token_address,\n    asset_id,\n    symbol,\n    'Aleo' AS NAME,\n    decimals,\n    price,\n    'aleo' AS blockchain,\n    'aleo' AS blockchain_name,\n    blockchain_id,\n    is_imputed,\n    is_deprecated,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_prices_id,\n    _invocation_id\nFROM\n    {{ source(\n        'crosschain_silver',\n        'complete_token_prices'\n    ) }}\nWHERE\n    asset_id = 'aleo' qualify(ROW_NUMBER() over(PARTITION BY asset_id\nORDER BY\n    is_deprecated, blockchain_id) = 1)", "language": "sql", "refs": [], "sources": [["crosschain_silver", "complete_token_prices"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.crosschain_silver.complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.bronze__complete_token_asset_metadata": {"database": "ALEO", "schema": "bronze", "name": "bronze__complete_token_asset_metadata", "resource_type": "model", "package_name": "aleo_models", "path": "bronze/price/bronze__complete_token_asset_metadata.sql", "original_file_path": "models/bronze/price/bronze__complete_token_asset_metadata.sql", "unique_id": "model.aleo_models.bronze__complete_token_asset_metadata", "fqn": ["aleo_models", "bronze", "price", "bronze__complete_token_asset_metadata"], "alias": "complete_token_asset_metadata", "checksum": {"name": "sha256", "checksum": "4cad94420161b6c87a68bfecda508312d356aba58c66e8f70cb48437785158fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.2961915, "relation_name": "ALEO.bronze.complete_token_asset_metadata", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    'aleo' AS token_address,\n    asset_id,\n    symbol,\n    'Aleo' AS NAME,\n    decimals,\n    'aleo' AS blockchain,\n    'aleo' AS blockchain_name,\n    blockchain_id,\n    is_deprecated,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_asset_metadata_id,\n    _invocation_id\nFROM\n    {{ source(\n        'crosschain_silver',\n        'complete_token_asset_metadata'\n    ) }}\nWHERE\n    asset_id = 'aleo' qualify(ROW_NUMBER() over(PARTITION BY asset_id\nORDER BY\n    is_deprecated, blockchain_id) = 1)", "language": "sql", "refs": [], "sources": [["crosschain_silver", "complete_token_asset_metadata"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.crosschain_silver.complete_token_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.aleo_models.bronze__complete_native_prices": {"database": "ALEO", "schema": "bronze", "name": "bronze__complete_native_prices", "resource_type": "model", "package_name": "aleo_models", "path": "bronze/price/bronze__complete_native_prices.sql", "original_file_path": "models/bronze/price/bronze__complete_native_prices.sql", "unique_id": "model.aleo_models.bronze__complete_native_prices", "fqn": ["aleo_models", "bronze", "price", "bronze__complete_native_prices"], "alias": "complete_native_prices", "checksum": {"name": "sha256", "checksum": "823e03ee46774c7885553654394a8f45851fffd0966700d0f9e91f743a185513"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}", "materialized": "view"}, "created_at": 1753463695.3010628, "relation_name": "ALEO.bronze.complete_native_prices", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    HOUR,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    is_imputed,\n    is_deprecated,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_native_prices_id,\n    _invocation_id\nFROM\n    {{ source(\n        'crosschain_silver',\n        'complete_native_prices'\n    ) }}\nWHERE\n    blockchain = 'aleo'", "language": "sql", "refs": [], "sources": [["crosschain_silver", "complete_native_prices"]], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.set_query_tag"], "nodes": ["source.aleo_models.crosschain_silver.complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.aleo_models.github_actions__workflows": {"database": "ALEO", "schema": "github_actions", "name": "github_actions__workflows", "resource_type": "seed", "package_name": "aleo_models", "path": "github_actions__workflows.csv", "original_file_path": "data/github_actions__workflows.csv", "unique_id": "seed.aleo_models.github_actions__workflows", "fqn": ["aleo_models", "github_actions__workflows"], "alias": "workflows", "checksum": {"name": "sha256", "checksum": "0f9672b37fda061acda88aa3b42c62d08538dede5faa968b493da750a98c543b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463695.4372666, "relation_name": "ALEO.github_actions.workflows", "raw_code": "", "root_path": "/home/runner/work/aleo-models/aleo-models", "depends_on": {"macros": []}}, "operation.aleo_models.aleo_models-on-run-start-0": {"database": "ALEO", "schema": "aleo_models-on-run-start-0", "name": "aleo_models-on-run-start-0", "resource_type": "operation", "package_name": "aleo_models", "path": "hooks/aleo_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.aleo_models.aleo_models-on-run-start-0", "fqn": ["aleo_models", "hooks", "aleo_models-on-run-start-0"], "alias": "aleo_models-on-run-start-0", "checksum": {"name": "sha256", "checksum": "39b4aac1724f4ae0b34cc3676697d960991bdead466dbf3c68f170eb4d705bc5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}"}, "created_at": 1753463695.5605493, "relation_name": null, "raw_code": "{{create_sps()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.create_sps", "macro.fsc_utils.set_query_tag"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.aleo_models.aleo_models-on-run-start-1": {"database": "ALEO", "schema": "aleo_models-on-run-start-1", "name": "aleo_models-on-run-start-1", "resource_type": "operation", "package_name": "aleo_models", "path": "hooks/aleo_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.aleo_models.aleo_models-on-run-start-1", "fqn": ["aleo_models", "hooks", "aleo_models-on-run-start-1"], "alias": "aleo_models-on-run-start-1", "checksum": {"name": "sha256", "checksum": "39b4aac1724f4ae0b34cc3676697d960991bdead466dbf3c68f170eb4d705bc5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}"}, "created_at": 1753463695.5736806, "relation_name": null, "raw_code": "{{create_udfs()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.create_udfs", "macro.fsc_utils.set_query_tag"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 1}, "operation.aleo_models.aleo_models-on-run-end-0": {"database": "ALEO", "schema": "aleo_models-on-run-end-0", "name": "aleo_models-on-run-end-0", "resource_type": "operation", "package_name": "aleo_models", "path": "hooks/aleo_models-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.aleo_models.aleo_models-on-run-end-0", "fqn": ["aleo_models", "hooks", "aleo_models-on-run-end-0"], "alias": "aleo_models-on-run-end-0", "checksum": {"name": "sha256", "checksum": "39b4aac1724f4ae0b34cc3676697d960991bdead466dbf3c68f170eb4d705bc5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [{"sql": "{{ fsc_utils.set_query_tag() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "pre-hook": "{{ fsc_utils.set_query_tag() }}"}, "created_at": 1753463695.5804255, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.aleo_models.apply_meta_as_tags", "macro.fsc_utils.set_query_tag"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "model.fsc_utils._datashare___create_udfs": {"database": "ALEO", "schema": "_datashare", "name": "_datashare___create_udfs", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_udfs.sql", "original_file_path": "models/datashare/_datashare___create_udfs.sql", "unique_id": "model.fsc_utils._datashare___create_udfs", "fqn": ["fsc_utils", "datashare", "_datashare___create_udfs"], "alias": "_create_udfs", "checksum": {"name": "sha256", "checksum": "fc39e053d81b2ed8b8106cf5c917ea005b96942a61f37ee4850a838c6c8f7ce6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "merge_update_columns": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463695.7063363, "relation_name": "ALEO._datashare._create_udfs", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\nCONCAT_WS('\\n',{{- fsc_utils.generate_datashare_udf_ddl().strip() -}}) AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.fsc_utils._datashare___create_gold": {"database": "ALEO", "schema": "_datashare", "name": "_datashare___create_gold", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_gold.sql", "original_file_path": "models/datashare/_datashare___create_gold.sql", "unique_id": "model.fsc_utils._datashare___create_gold", "fqn": ["fsc_utils", "datashare", "_datashare___create_gold"], "alias": "_create_gold", "checksum": {"name": "sha256", "checksum": "e05db71a87f76f4cff0b9c4d1b83b975ef424d147379e2442907b1004f709887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true, "merge_update_columns": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463695.7148006, "relation_name": "ALEO._datashare._create_gold", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\n$${{- fsc_utils.generate_datashare_ddl() -}}$$ AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.live__allow_list": {"database": "ALEO", "schema": "live", "name": "live__allow_list", "resource_type": "model", "package_name": "livequery_models", "path": "live__allow_list.sql", "original_file_path": "models/live__allow_list.sql", "unique_id": "model.livequery_models.live__allow_list", "fqn": ["livequery_models", "live__allow_list"], "alias": "allow_list", "checksum": {"name": "sha256", "checksum": "0f0f0355e5f959d9d75458d90cee37209b5632f984414c3fcf65eca0e0e5de2b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463695.7569487, "relation_name": "ALEO.live.allow_list", "raw_code": "-- depends_on: {{ ref('live') }}\n{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\nSELECT '*.' || t.value AS allowed_domains\nFROM table(flatten(input => {{ this.database }}.live.udf_allow_list())) AS t\nORDER BY\n    split_part(allowed_domains, '.', -1),\n    split_part(allowed_domains, '.', -2),\n    split_part(allowed_domains, '.', -3)", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models._live": {"database": "ALEO", "schema": "_live", "name": "_live", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/_live.sql", "original_file_path": "models/deploy/core/_live.sql", "unique_id": "model.livequery_models._live", "fqn": ["livequery_models", "deploy", "core", "_live"], "alias": "", "checksum": {"name": "sha256", "checksum": "c96cbb9dfef8ff10375c8e187dc394f7a38d172e8df94f343761d485338f4036"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463695.7633307, "relation_name": null, "raw_code": "{% set config = config_core__live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.live": {"database": "ALEO", "schema": "live", "name": "live", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/live.sql", "original_file_path": "models/deploy/core/live.sql", "unique_id": "model.livequery_models.live", "fqn": ["livequery_models", "deploy", "core", "live"], "alias": "", "checksum": {"name": "sha256", "checksum": "71b371765e23aa22b9961eeaeb7657413cc7f6d5995b811f85a5c110ae1d4d00"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_api": {"name": "udf_api", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/live.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463698.9375846, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('utils') }}\n-- depends_on: {{ ref('_live') }}\n{% set config = config_core_live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}, {"name": "_live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": ["model.livequery_models._utils", "model.livequery_models.utils", "model.livequery_models._live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.utils": {"database": "ALEO", "schema": "utils", "name": "utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/utils.sql", "original_file_path": "models/deploy/core/utils.sql", "unique_id": "model.livequery_models.utils", "fqn": ["livequery_models", "deploy", "core", "utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "306321713017a3700a99c47db3a99ca2f64fdf6fe567c883a7507f13bd8095c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_json_rpc_call": {"name": "udf_json_rpc_call", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_urlencode": {"name": "udf_urlencode", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_int_to_binary": {"name": "udf_int_to_binary", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_binary_to_int": {"name": "udf_binary_to_int", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_evm_decode_log": {"name": "udf_evm_decode_log", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463698.9919343, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n{% set config = config_core_utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": ["model.livequery_models._utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models._utils": {"database": "ALEO", "schema": "_utils", "name": "_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/_utils.sql", "original_file_path": "models/deploy/core/_utils.sql", "unique_id": "model.livequery_models._utils", "fqn": ["livequery_models", "deploy", "core", "_utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "3d202cb82095728dae3b02cdca6d2c5f9521ecf50b687a50739f44b5ee828015"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_introspect": {"name": "udf_introspect", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.1655567, "relation_name": null, "raw_code": "{% set config = config_core__utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.bitquery__": {"database": "ALEO", "schema": "bitquery", "name": "bitquery__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/bitquery/bitquery__.sql", "original_file_path": "models/deploy/marketplace/bitquery/bitquery__.sql", "unique_id": "model.livequery_models.bitquery__", "fqn": ["livequery_models", "deploy", "marketplace", "bitquery", "bitquery__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c41507cb784eab92dd6f9e91932240038ec5d054378a41b7af05b350294e3709"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/bitquery/bitquery__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.1712844, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_bitquery_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.quicknode_polygon_tokens__quicknode_utils": {"database": "ALEO", "schema": "quicknode_polygon_tokens", "name": "quicknode_polygon_tokens__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_polygon_tokens__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "6eede1c8f6dd8dea7e02d996adf1f0e1d8985f42480ab38af9708ee181d5eaac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_token_metadata_by_contract_address": {"name": "get_token_metadata_by_contract_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_token_metadata_by_symbol": {"name": "get_token_metadata_by_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_transactions_by_address": {"name": "get_transactions_by_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_wallet_token_balance": {"name": "get_wallet_token_balance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_wallet_token_transactions": {"name": "get_wallet_token_transactions", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.1796706, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_polygon_tokens_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils": {"database": "ALEO", "schema": "quicknode_ethereum_tokens", "name": "quicknode_ethereum_tokens__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_ethereum_tokens__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "63a3801533cd007c9e82ad7e4a566d5708f196ae7c5262d341bfc0b7cba8678b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_token_metadata_by_contract_address": {"name": "get_token_metadata_by_contract_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_token_metadata_by_symbol": {"name": "get_token_metadata_by_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_transactions_by_address": {"name": "get_transactions_by_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_wallet_token_balance": {"name": "get_wallet_token_balance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_wallet_token_transactions": {"name": "get_wallet_token_transactions", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.247961, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_ethereum_tokens_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.quicknode_utils__quicknode_utils": {"database": "ALEO", "schema": "quicknode_utils", "name": "quicknode_utils__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_utils__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_utils__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_utils__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_utils__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "19648edc7f037d57db6423d1103148840109bb643b983410a69cc4ee15bf4185"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463695.8148015, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.quicknode_polygon_nfts__quicknode_utils": {"database": "ALEO", "schema": "quicknode_polygon_nfts", "name": "quicknode_polygon_nfts__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_polygon_nfts__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "8fa2d0247ac0c24d068b4acad95177a66924ace12e33177403b37767e64273aa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"fetch_nft_collection_details": {"name": "fetch_nft_collection_details", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts": {"name": "fetch_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts_by_collection": {"name": "fetch_nfts_by_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_transfers_by_nft": {"name": "get_transfers_by_nft", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "verify_nfts_owner": {"name": "verify_nfts_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.2740605, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_polygon_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.quicknode_solana_nfts__quicknode_utils": {"database": "ALEO", "schema": "quicknode_solana_nfts", "name": "quicknode_solana_nfts__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_solana_nfts__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "321974e17cbe3269d6e2228a11da818de60d89f6114be913ef229dc0a5342ecc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"fetch_nfts": {"name": "fetch_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts_by_creator": {"name": "fetch_nfts_by_creator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.2363663, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_solana_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils": {"database": "ALEO", "schema": "quicknode_ethereum_nfts", "name": "quicknode_ethereum_nfts__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_ethereum_nfts__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "01a0dba1033fe3cb3334fb37d12177d3ada4e9bafa4596bd1c2382df8ddd6aa6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"fetch_nft_collection_details": {"name": "fetch_nft_collection_details", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts": {"name": "fetch_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fetch_nfts_by_collection": {"name": "fetch_nfts_by_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_transfers_by_nft": {"name": "get_transfers_by_nft", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "verify_nfts_owner": {"name": "verify_nfts_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.2087753, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_ethereum_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.fred__": {"database": "ALEO", "schema": "fred", "name": "fred__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/fred/fred__.sql", "original_file_path": "models/deploy/marketplace/fred/fred__.sql", "unique_id": "model.livequery_models.fred__", "fqn": ["livequery_models", "deploy", "marketplace", "fred", "fred__"], "alias": "", "checksum": {"name": "sha256", "checksum": "44274edd9fa472dbf09b042e45ed0dec8584a34b34f49150076d23588bbb461c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_series": {"name": "get_series", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/fred/fred__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.300279, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_fred_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.strangelove__": {"database": "ALEO", "schema": "strangelove", "name": "strangelove__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/strangelove/strangelove__.sql", "original_file_path": "models/deploy/marketplace/strangelove/strangelove__.sql", "unique_id": "model.livequery_models.strangelove__", "fqn": ["livequery_models", "deploy", "marketplace", "strangelove", "strangelove__"], "alias": "", "checksum": {"name": "sha256", "checksum": "bad70832540e2461bccfa1c03d382b89b0e187b55dfbcaa2aa8bf5abe76b3ec5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/strangelove/strangelove__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.30651, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_strangelove_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.footprint_utils__footprint_utils": {"database": "ALEO", "schema": "footprint_utils", "name": "footprint_utils__footprint_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/footprint/footprint_utils__footprint_utils.sql", "original_file_path": "models/deploy/marketplace/footprint/footprint_utils__footprint_utils.sql", "unique_id": "model.livequery_models.footprint_utils__footprint_utils", "fqn": ["livequery_models", "deploy", "marketplace", "footprint", "footprint_utils__footprint_utils"], "alias": "footprint_utils", "checksum": {"name": "sha256", "checksum": "7b014ae6db72a2e0f20070bf29c433cb90b4d265f7342d52e2cea483ff06787f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/footprint/footprint_utils__footprint_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.312247, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_footprint_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.snapshot__": {"database": "ALEO", "schema": "snapshot", "name": "snapshot__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/snapshot/snapshot__.sql", "original_file_path": "models/deploy/marketplace/snapshot/snapshot__.sql", "unique_id": "model.livequery_models.snapshot__", "fqn": ["livequery_models", "deploy", "marketplace", "snapshot", "snapshot__"], "alias": "", "checksum": {"name": "sha256", "checksum": "cabcd83e37dfb9424dd9a69490d63d1204dca1ef383d300ecad295ffaed3f6ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"query": {"name": "query", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/snapshot/snapshot__ .yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.318563, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_snapshot_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.credmark_utils__": {"database": "ALEO", "schema": "credmark_utils", "name": "credmark_utils__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/credmark/credmark_utils__.sql", "original_file_path": "models/deploy/marketplace/credmark/credmark_utils__.sql", "unique_id": "model.livequery_models.credmark_utils__", "fqn": ["livequery_models", "deploy", "marketplace", "credmark", "credmark_utils__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c62bd748a22e1fd79d1f6a3a0d41552de14eb226395e2af34a65562d50a76f64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/credmark/credmark_utils__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.324545, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_credmark_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.zapper__": {"database": "ALEO", "schema": "zapper", "name": "zapper__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/zapper/zapper__.sql", "original_file_path": "models/deploy/marketplace/zapper/zapper__.sql", "unique_id": "model.livequery_models.zapper__", "fqn": ["livequery_models", "deploy", "marketplace", "zapper", "zapper__"], "alias": "", "checksum": {"name": "sha256", "checksum": "74bdb58da84c5f7c07f56e4c29050414c05178b2c660b73aea40525db985e7f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463695.8641582, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_zapper_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.allday__": {"database": "ALEO", "schema": "allday", "name": "allday__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/allday/allday__.sql", "original_file_path": "models/deploy/marketplace/allday/allday__.sql", "unique_id": "model.livequery_models.allday__", "fqn": ["livequery_models", "deploy", "marketplace", "allday", "allday__"], "alias": "", "checksum": {"name": "sha256", "checksum": "aeba24365cef1ac3a11bd50bd89eecc3df0aee8b5f2e29a57a67ca3fb6bc9861"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/allday/allday__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.330284, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_allday_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.transpose__": {"database": "ALEO", "schema": "transpose", "name": "transpose__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/transpose/transpose__.sql", "original_file_path": "models/deploy/marketplace/transpose/transpose__.sql", "unique_id": "model.livequery_models.transpose__", "fqn": ["livequery_models", "deploy", "marketplace", "transpose", "transpose__"], "alias": "", "checksum": {"name": "sha256", "checksum": "8d2ddcca714778664a2a954d5e7fadca4ff62b56e8013fce0c48b06bb2e2298d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/transpose/transpose__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.3363667, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_transpose_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.subquery__": {"database": "ALEO", "schema": "subquery", "name": "subquery__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/subquery/subquery__.sql", "original_file_path": "models/deploy/marketplace/subquery/subquery__.sql", "unique_id": "model.livequery_models.subquery__", "fqn": ["livequery_models", "deploy", "marketplace", "subquery", "subquery__"], "alias": "", "checksum": {"name": "sha256", "checksum": "41725d4e8e1a831be3ff17e4ce5f2bc8f80679f436e25b362be2ee01282f5dbf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/subquery/subquery__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.3423393, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_subquery_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.defillama__": {"database": "ALEO", "schema": "defillama", "name": "defillama__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/defillama/defillama__.sql", "original_file_path": "models/deploy/marketplace/defillama/defillama__.sql", "unique_id": "model.livequery_models.defillama__", "fqn": ["livequery_models", "deploy", "marketplace", "defillama", "defillama__"], "alias": "", "checksum": {"name": "sha256", "checksum": "09036911befd5c87aa63e7467568c629ab1cc182664c632cf92b8fc60919f485"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/defillama/defillama__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.3480973, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_defillama_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.reservoir__": {"database": "ALEO", "schema": "reservoir", "name": "reservoir__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/reservoir/reservoir__.sql", "original_file_path": "models/deploy/marketplace/reservoir/reservoir__.sql", "unique_id": "model.livequery_models.reservoir__", "fqn": ["livequery_models", "deploy", "marketplace", "reservoir", "reservoir__"], "alias": "", "checksum": {"name": "sha256", "checksum": "6ccab30c4dc7b31ce65d169622b5fe6014875eb662a2f1e229c204348df72aac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/reservoir/reservoir__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.3540914, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_reservoir_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.apilayer__": {"database": "ALEO", "schema": "apilayer", "name": "apilayer__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/apilayer/apilayer__.sql", "original_file_path": "models/deploy/marketplace/apilayer/apilayer__.sql", "unique_id": "model.livequery_models.apilayer__", "fqn": ["livequery_models", "deploy", "marketplace", "apilayer", "apilayer__"], "alias": "", "checksum": {"name": "sha256", "checksum": "3bed74d4a9a1ec55eadec250ffcecb484876c79cf42be448591ceee377714c81"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/apilayer/apilayer__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.3600621, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_apilayer_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.helius_apis__helius_utils": {"database": "ALEO", "schema": "helius_apis", "name": "helius_apis__helius_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/helius/helius_apis__helius_utils.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.sql", "unique_id": "model.livequery_models.helius_apis__helius_utils", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "helius_apis__helius_utils"], "alias": "helius_utils", "checksum": {"name": "sha256", "checksum": "c2d9fec018a695c9fdb69fc0166d07df725eadaf4c6e1b1d52f8a1161cb3e09b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"token_metadata": {"name": "token_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balances": {"name": "balances", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parse_transactions": {"name": "parse_transactions", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.4132323, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_helius_apis_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('helius_utils__helius_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "helius_utils__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.helius_utils__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.helius_das__helius_utils": {"database": "ALEO", "schema": "helius_das", "name": "helius_das__helius_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/helius/helius_das__helius_utils.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.sql", "unique_id": "model.livequery_models.helius_das__helius_utils", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "helius_das__helius_utils"], "alias": "helius_utils", "checksum": {"name": "sha256", "checksum": "28fa6015380d003e7edb1366c57119215d7fcecec9f00f660eef2b6011e94e7c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_asset": {"name": "get_asset", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_signatures_for_asset": {"name": "get_signatures_for_asset", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "search_assets": {"name": "search_assets", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_asset_proof": {"name": "get_asset_proof", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_assets_by_owner": {"name": "get_assets_by_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_assets_by_authority": {"name": "get_assets_by_authority", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_assets_by_creator": {"name": "get_assets_by_creator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_assets_by_group": {"name": "get_assets_by_group", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/helius/helius_das__helius_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.3691802, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_helius_das_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('helius_utils__helius_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "helius_utils__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.helius_utils__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.helius_utils__helius_utils": {"database": "ALEO", "schema": "helius_utils", "name": "helius_utils__helius_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/helius/helius_utils__helius_utils.sql", "original_file_path": "models/deploy/marketplace/helius/helius_utils__helius_utils.sql", "unique_id": "model.livequery_models.helius_utils__helius_utils", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "helius_utils__helius_utils"], "alias": "helius_utils", "checksum": {"name": "sha256", "checksum": "87bb2d3485bba61ea826583fa5a5773732b5cd9ca498be8b66e7d514f31f2b76"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463695.9127033, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_helius_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.cmc__": {"database": "ALEO", "schema": "cmc", "name": "cmc__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/cmc/cmc__.sql", "original_file_path": "models/deploy/marketplace/cmc/cmc__.sql", "unique_id": "model.livequery_models.cmc__", "fqn": ["livequery_models", "deploy", "marketplace", "cmc", "cmc__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c26c75aa21e109f25bcba7e695b7cef34df142384b567fce95de8b2374b33887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/cmc/cmc__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.4297357, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_cmc_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.espn__": {"database": "ALEO", "schema": "espn", "name": "espn__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/espn/espn__.sql", "original_file_path": "models/deploy/marketplace/espn/espn__.sql", "unique_id": "model.livequery_models.espn__", "fqn": ["livequery_models", "deploy", "marketplace", "espn", "espn__"], "alias": "", "checksum": {"name": "sha256", "checksum": "87f5a3b7083b803d50ac3cf614a6b734aff4cd08c776829ba2c3d93706ed130c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/espn/espn__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.4355273, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_espn_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.opensea__": {"database": "ALEO", "schema": "opensea", "name": "opensea__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/opensea/opensea__.sql", "original_file_path": "models/deploy/marketplace/opensea/opensea__.sql", "unique_id": "model.livequery_models.opensea__", "fqn": ["livequery_models", "deploy", "marketplace", "opensea", "opensea__"], "alias": "", "checksum": {"name": "sha256", "checksum": "0ea7806ecada9430a35a51a202c79a3632a56ba9b06b5bbca56473003fc14bba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/opensea/opensea__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.4415567, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_opensea_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.coingecko__": {"database": "ALEO", "schema": "coingecko", "name": "coingecko__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/coingecko/coingecko__.sql", "original_file_path": "models/deploy/marketplace/coingecko/coingecko__.sql", "unique_id": "model.livequery_models.coingecko__", "fqn": ["livequery_models", "deploy", "marketplace", "coingecko", "coingecko__"], "alias": "", "checksum": {"name": "sha256", "checksum": "a0daf27e44aed8a6507b087f7b1274784d628e4edf2fae68148de64ac46f2b90"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/coingecko/coingecko__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.4475517, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_coingecko_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.deepnftvalue__": {"database": "ALEO", "schema": "deepnftvalue", "name": "deepnftvalue__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/deepnftvalue/deepnftvalue__.sql", "original_file_path": "models/deploy/marketplace/deepnftvalue/deepnftvalue__.sql", "unique_id": "model.livequery_models.deepnftvalue__", "fqn": ["livequery_models", "deploy", "marketplace", "deepnftvalue", "deepnftvalue__"], "alias": "", "checksum": {"name": "sha256", "checksum": "a71c5173a5afd11110e3e118e2e6bd5ade443d94407151e03397de3f6789c5f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/deepnftvalue/deepnftvalue__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.453481, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_deepnftvalue_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.github_utils__github_utils": {"database": "ALEO", "schema": "github_utils", "name": "github_utils__github_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/github/github_utils__github_utils.sql", "original_file_path": "models/deploy/marketplace/github/github_utils__github_utils.sql", "unique_id": "model.livequery_models.github_utils__github_utils", "fqn": ["livequery_models", "deploy", "marketplace", "github", "github_utils__github_utils"], "alias": "github_utils", "checksum": {"name": "sha256", "checksum": "73bfd31747254bf79ad2ca91c0d363c8c8f3ba518cf7828835b5a588cd69da6a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"octocat": {"name": "octocat", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/github/github_utils__github_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.4771183, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_github_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.github_actions__github_utils": {"database": "ALEO", "schema": "github_actions", "name": "github_actions__github_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/github/github_actions__github_utils.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.sql", "unique_id": "model.livequery_models.github_actions__github_utils", "fqn": ["livequery_models", "deploy", "marketplace", "github", "github_actions__github_utils"], "alias": "github_utils", "checksum": {"name": "sha256", "checksum": "708556920b602f295cd781689c359542552043117fa4dfe3164137e7e72d6a1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"workflows": {"name": "workflows", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "runs": {"name": "runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "workflow_runs": {"name": "workflow_runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/github/github_actions__github_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.459957, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('github_utils__github_utils') }}\n{%- set configs = [\n    config_github_actions_udfs,\n    config_github_actions_udtfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "github_utils__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.github_utils__github_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.dappradar__": {"database": "ALEO", "schema": "dappradar", "name": "dappradar__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/dappradar/dappradar__.sql", "original_file_path": "models/deploy/marketplace/dappradar/dappradar__.sql", "unique_id": "model.livequery_models.dappradar__", "fqn": ["livequery_models", "deploy", "marketplace", "dappradar", "dappradar__"], "alias": "", "checksum": {"name": "sha256", "checksum": "55abd3e81a034c665926ed47361d4d248da944b9adc4a57c1a19baa11a38af57"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/dappradar/dappradar__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.4827876, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_dappradar_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.chainbase_utils__": {"database": "ALEO", "schema": "chainbase_utils", "name": "chainbase_utils__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/chainbase/chainbase_utils__.sql", "original_file_path": "models/deploy/marketplace/chainbase/chainbase_utils__.sql", "unique_id": "model.livequery_models.chainbase_utils__", "fqn": ["livequery_models", "deploy", "marketplace", "chainbase", "chainbase_utils__"], "alias": "", "checksum": {"name": "sha256", "checksum": "3acb77e875379304467b7de0996fdf7a1d519f6696cad8ab87754da38fe8e7fc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/chainbase/chainbase_utils__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.4887793, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_chainbase_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.alchemy_transfers__alchemy_utils": {"database": "ALEO", "schema": "alchemy_transfers", "name": "alchemy_transfers__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_transfers__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_transfers__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "6b6f4c070fd03d24d24751920d4bfd3873272a75b8ed8e8e8b88523ec4241c85"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_asset_transfers": {"name": "get_asset_transfers", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.4949257, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_alchemy_transfers_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('alchemy_utils__alchemy_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "alchemy_utils__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.alchemy_utils__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.alchemy_tokens__alchemy_utils": {"database": "ALEO", "schema": "alchemy_tokens", "name": "alchemy_tokens__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_tokens__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_tokens__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "f6672fd74929ac1a3aef90af7871a36707752c078fece259ed2efd898d8e75f1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_token_allowance": {"name": "get_token_allowance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_token_balances": {"name": "get_token_balances", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_token_metadata": {"name": "get_token_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.6193535, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_alchemy_tokens_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('alchemy_utils__alchemy_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "alchemy_utils__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.alchemy_utils__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.alchemy_utils__alchemy_utils": {"database": "ALEO", "schema": "alchemy_utils", "name": "alchemy_utils__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_utils__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_utils__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_utils__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_utils__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "f1262dc20957c1f57345d120d5fa804f99a3bbf73fdffb6bac4d1eb830ba841c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463695.9778755, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_alchemy_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.alchemy_nfts__alchemy_utils": {"database": "ALEO", "schema": "alchemy_nfts", "name": "alchemy_nfts__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_nfts__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_nfts__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "296d282fac83cc82133d804554b6202ccbbfa6bf30fd67217d7b61ff7d47d9c3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_nfts": {"name": "get_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_owners_for_token": {"name": "get_owners_for_token", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_owners_for_collection": {"name": "get_owners_for_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_holder_of_collection": {"name": "is_holder_of_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_contracts_for_owner": {"name": "get_contracts_for_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_nft_metadata": {"name": "get_nft_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_nft_metadata_batch": {"name": "get_nft_metadata_batch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_contract_metadata": {"name": "get_contract_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_contract_metadata_batch": {"name": "get_contract_metadata_batch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invalidate_contract": {"name": "invalidate_contract", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reingest_contract": {"name": "reingest_contract", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "search_contract_metadata": {"name": "search_contract_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_nfts_for_collection": {"name": "get_nfts_for_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_spam_contracts": {"name": "get_spam_contracts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_spam_contract": {"name": "is_spam_contract", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_airdrop": {"name": "is_airdrop", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "report_spam": {"name": "report_spam", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_floor_price": {"name": "get_floor_price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "get_nft_sales": {"name": "get_nft_sales", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "compute_rarity": {"name": "compute_rarity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "summarize_nft_attributes": {"name": "summarize_nft_attributes", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.508067, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_alchemy_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('alchemy_utils__alchemy_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "alchemy_utils__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.alchemy_utils__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.topshot__": {"database": "ALEO", "schema": "topshot", "name": "topshot__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/topshot/topshot__.sql", "original_file_path": "models/deploy/marketplace/topshot/topshot__.sql", "unique_id": "model.livequery_models.topshot__", "fqn": ["livequery_models", "deploy", "marketplace", "topshot", "topshot__"], "alias": "", "checksum": {"name": "sha256", "checksum": "114366c4e0f69de805b68085852b826d594dfae80b2dc66a4f95d2dd1dd63cc2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/topshot/topshot__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.6359336, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_topshot_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.zettablock__": {"database": "ALEO", "schema": "zettablock", "name": "zettablock__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/zettablock/zettablock__.sql", "original_file_path": "models/deploy/marketplace/zettablock/zettablock__.sql", "unique_id": "model.livequery_models.zettablock__", "fqn": ["livequery_models", "deploy", "marketplace", "zettablock", "zettablock__"], "alias": "", "checksum": {"name": "sha256", "checksum": "1fcd113d09cfbd2ec5691bbcd8b9f392e45080f7f92e45df76bf2c3f7ce0f5c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463695.9935877, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_zettablock_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.solscan__": {"database": "ALEO", "schema": "solscan", "name": "solscan__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/solscan/solscan__.sql", "original_file_path": "models/deploy/marketplace/solscan/solscan__.sql", "unique_id": "model.livequery_models.solscan__", "fqn": ["livequery_models", "deploy", "marketplace", "solscan", "solscan__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c65ffbc4dae2ec4fd19fb9863658f818db84f430a371dda7baf0a28636f4c603"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"public_api_get": {"name": "public_api_get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/solscan/solscan__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.6416264, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_solscan_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.covalent__": {"database": "ALEO", "schema": "covalent", "name": "covalent__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/covalent/covalent__.sql", "original_file_path": "models/deploy/marketplace/covalent/covalent__.sql", "unique_id": "model.livequery_models.covalent__", "fqn": ["livequery_models", "deploy", "marketplace", "covalent", "covalent__"], "alias": "", "checksum": {"name": "sha256", "checksum": "eb21a1d1de2f5a44abdba0379a7c265092caa8ae68a040b178b1f8a66ef0dbaa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/covalent/covalent__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.6475916, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_covalent_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.stakingrewards__": {"database": "ALEO", "schema": "stakingrewards", "name": "stakingrewards__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/stakingrewards/stakingrewards__.sql", "original_file_path": "models/deploy/marketplace/stakingrewards/stakingrewards__.sql", "unique_id": "model.livequery_models.stakingrewards__", "fqn": ["livequery_models", "deploy", "marketplace", "stakingrewards", "stakingrewards__"], "alias": "", "checksum": {"name": "sha256", "checksum": "b106fc542269f4bca677dd36a22951b8cf79a5bfc8cf6c8fc6a63645c963a929"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"query": {"name": "query", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/stakingrewards/stakingrewards__ .yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.6533463, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_stakingrewards_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.nftscan__": {"database": "ALEO", "schema": "nftscan", "name": "nftscan__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/nftscan/nftscan__.sql", "original_file_path": "models/deploy/marketplace/nftscan/nftscan__.sql", "unique_id": "model.livequery_models.nftscan__", "fqn": ["livequery_models", "deploy", "marketplace", "nftscan", "nftscan__"], "alias": "", "checksum": {"name": "sha256", "checksum": "00b1f0a5c932642d40b70efec0522b85821fb640a2928f67258fa415902bb9fa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/nftscan/nftscan__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.6594036, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_nftscan_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.playgrounds__": {"database": "ALEO", "schema": "playgrounds", "name": "playgrounds__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/playgrounds/playgrounds__.sql", "original_file_path": "models/deploy/marketplace/playgrounds/playgrounds__.sql", "unique_id": "model.livequery_models.playgrounds__", "fqn": ["livequery_models", "deploy", "marketplace", "playgrounds", "playgrounds__"], "alias": "", "checksum": {"name": "sha256", "checksum": "dcf2d8aba472812a413cd5630fb4e0ee4a84567370c1060b970a22c70fafda5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"query_subgraph": {"name": "query_subgraph", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/playgrounds/playgrounds__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.6658163, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_playgrounds_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.blockpour_utils__": {"database": "ALEO", "schema": "blockpour_utils", "name": "blockpour_utils__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/blockpour/blockpour_utils__.sql", "original_file_path": "models/deploy/marketplace/blockpour/blockpour_utils__.sql", "unique_id": "model.livequery_models.blockpour_utils__", "fqn": ["livequery_models", "deploy", "marketplace", "blockpour", "blockpour_utils__"], "alias": "", "checksum": {"name": "sha256", "checksum": "b42854ed08d11ee40b146d93bafb5961ed3474bf0bd335a0b38a6a30822f4a4b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "post": {"name": "post", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/blockpour/blockpour_utils__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.677504, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_blockpour_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.dapplooker__": {"database": "ALEO", "schema": "dapplooker", "name": "dapplooker__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/dapplooker/dapplooker__.sql", "original_file_path": "models/deploy/marketplace/dapplooker/dapplooker__.sql", "unique_id": "model.livequery_models.dapplooker__", "fqn": ["livequery_models", "deploy", "marketplace", "dapplooker", "dapplooker__"], "alias": "", "checksum": {"name": "sha256", "checksum": "06c50a1b30747bf59e1de42dd9b078f327f3dc5d5b595ec3a4838e0d8de8869e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_chart": {"name": "get_chart", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/dapplooker/dapplooker__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463699.6897426, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_dapplooker_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.bsc__testnet": {"database": "ALEO", "schema": "bsc", "name": "bsc__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/bsc__testnet.sql", "original_file_path": "models/deploy/evm/bsc__testnet.sql", "unique_id": "model.livequery_models.bsc__testnet", "fqn": ["livequery_models", "deploy", "evm", "bsc__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.037817, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.fantom__mainnet": {"database": "ALEO", "schema": "fantom", "name": "fantom__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/fantom__mainnet.sql", "original_file_path": "models/deploy/evm/fantom__mainnet.sql", "unique_id": "model.livequery_models.fantom__mainnet", "fqn": ["livequery_models", "deploy", "evm", "fantom__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.0485163, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.arbitrum_nova__mainnet": {"database": "ALEO", "schema": "arbitrum_nova", "name": "arbitrum_nova__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/arbitrum_nova__mainnet.sql", "original_file_path": "models/deploy/evm/arbitrum_nova__mainnet.sql", "unique_id": "model.livequery_models.arbitrum_nova__mainnet", "fqn": ["livequery_models", "deploy", "evm", "arbitrum_nova__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.0545528, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.celo__mainnet": {"database": "ALEO", "schema": "celo", "name": "celo__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/celo__mainnet.sql", "original_file_path": "models/deploy/evm/celo__mainnet.sql", "unique_id": "model.livequery_models.celo__mainnet", "fqn": ["livequery_models", "deploy", "evm", "celo__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.0605507, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.arbitrum_one__mainnet": {"database": "ALEO", "schema": "arbitrum_one", "name": "arbitrum_one__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/arbitrum_one__mainnet.sql", "original_file_path": "models/deploy/evm/arbitrum_one__mainnet.sql", "unique_id": "model.livequery_models.arbitrum_one__mainnet", "fqn": ["livequery_models", "deploy", "evm", "arbitrum_one__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.0666432, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.harmony__testnet": {"database": "ALEO", "schema": "harmony", "name": "harmony__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/harmony__testnet.sql", "original_file_path": "models/deploy/evm/harmony__testnet.sql", "unique_id": "model.livequery_models.harmony__testnet", "fqn": ["livequery_models", "deploy", "evm", "harmony__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.0740273, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.polygon_zkevm__mainnet": {"database": "ALEO", "schema": "polygon_zkevm", "name": "polygon_zkevm__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon_zkevm__mainnet.sql", "original_file_path": "models/deploy/evm/polygon_zkevm__mainnet.sql", "unique_id": "model.livequery_models.polygon_zkevm__mainnet", "fqn": ["livequery_models", "deploy", "evm", "polygon_zkevm__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.080074, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.polygon_zkevm__testnet": {"database": "ALEO", "schema": "polygon_zkevm", "name": "polygon_zkevm__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon_zkevm__testnet.sql", "original_file_path": "models/deploy/evm/polygon_zkevm__testnet.sql", "unique_id": "model.livequery_models.polygon_zkevm__testnet", "fqn": ["livequery_models", "deploy", "evm", "polygon_zkevm__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.0861025, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.base__goerli": {"database": "ALEO", "schema": "base", "name": "base__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/base__goerli.sql", "original_file_path": "models/deploy/evm/base__goerli.sql", "unique_id": "model.livequery_models.base__goerli", "fqn": ["livequery_models", "deploy", "evm", "base__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.092134, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.polygon__testnet": {"database": "ALEO", "schema": "polygon", "name": "polygon__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon__testnet.sql", "original_file_path": "models/deploy/evm/polygon__testnet.sql", "unique_id": "model.livequery_models.polygon__testnet", "fqn": ["livequery_models", "deploy", "evm", "polygon__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.0981333, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.optimism__mainnet": {"database": "ALEO", "schema": "optimism", "name": "optimism__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/optimism__mainnet.sql", "original_file_path": "models/deploy/evm/optimism__mainnet.sql", "unique_id": "model.livequery_models.optimism__mainnet", "fqn": ["livequery_models", "deploy", "evm", "optimism__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.1041698, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.avalanche_c__testnet": {"database": "ALEO", "schema": "avalanche_c", "name": "avalanche_c__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/avalanche_c__testnet.sql", "original_file_path": "models/deploy/evm/avalanche_c__testnet.sql", "unique_id": "model.livequery_models.avalanche_c__testnet", "fqn": ["livequery_models", "deploy", "evm", "avalanche_c__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.179883, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.ethereum__goerli": {"database": "ALEO", "schema": "ethereum", "name": "ethereum__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/ethereum__goerli.sql", "original_file_path": "models/deploy/evm/ethereum__goerli.sql", "unique_id": "model.livequery_models.ethereum__goerli", "fqn": ["livequery_models", "deploy", "evm", "ethereum__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.1863077, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.polygon__mainnet": {"database": "ALEO", "schema": "polygon", "name": "polygon__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon__mainnet.sql", "original_file_path": "models/deploy/evm/polygon__mainnet.sql", "unique_id": "model.livequery_models.polygon__mainnet", "fqn": ["livequery_models", "deploy", "evm", "polygon__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.1923165, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.gnosis__mainnet": {"database": "ALEO", "schema": "gnosis", "name": "gnosis__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/gnosis__mainnet.sql", "original_file_path": "models/deploy/evm/gnosis__mainnet.sql", "unique_id": "model.livequery_models.gnosis__mainnet", "fqn": ["livequery_models", "deploy", "evm", "gnosis__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.1983519, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.harmony__mainnet": {"database": "ALEO", "schema": "harmony", "name": "harmony__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/harmony__mainnet.sql", "original_file_path": "models/deploy/evm/harmony__mainnet.sql", "unique_id": "model.livequery_models.harmony__mainnet", "fqn": ["livequery_models", "deploy", "evm", "harmony__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2044559, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.avalanche_c__mainnet": {"database": "ALEO", "schema": "avalanche_c", "name": "avalanche_c__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/avalanche_c__mainnet.sql", "original_file_path": "models/deploy/evm/avalanche_c__mainnet.sql", "unique_id": "model.livequery_models.avalanche_c__mainnet", "fqn": ["livequery_models", "deploy", "evm", "avalanche_c__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2105234, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.arbitrum_one__goerli": {"database": "ALEO", "schema": "arbitrum_one", "name": "arbitrum_one__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/arbitrum_one__goerli.sql", "original_file_path": "models/deploy/evm/arbitrum_one__goerli.sql", "unique_id": "model.livequery_models.arbitrum_one__goerli", "fqn": ["livequery_models", "deploy", "evm", "arbitrum_one__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2178826, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.optimism__goerli": {"database": "ALEO", "schema": "optimism", "name": "optimism__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/optimism__goerli.sql", "original_file_path": "models/deploy/evm/optimism__goerli.sql", "unique_id": "model.livequery_models.optimism__goerli", "fqn": ["livequery_models", "deploy", "evm", "optimism__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2239401, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.ethereum__sepolia": {"database": "ALEO", "schema": "ethereum", "name": "ethereum__sepolia", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/ethereum__sepolia.sql", "original_file_path": "models/deploy/evm/ethereum__sepolia.sql", "unique_id": "model.livequery_models.ethereum__sepolia", "fqn": ["livequery_models", "deploy", "evm", "ethereum__sepolia"], "alias": "sepolia", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2300687, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.ethereum__mainnet": {"database": "ALEO", "schema": "ethereum", "name": "ethereum__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/ethereum__mainnet.sql", "original_file_path": "models/deploy/evm/ethereum__mainnet.sql", "unique_id": "model.livequery_models.ethereum__mainnet", "fqn": ["livequery_models", "deploy", "evm", "ethereum__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "42fcff256d5cc7381b3feee8e69fc5ac0df9c6c255bc772f793908ca1d70e640"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2361388, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('_eth__logs') }}\n-- depends_on: {{ ref('_eth__decoded_logs') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions,\n    config_eth_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_eth__logs", "package": null, "version": null}, {"name": "_eth__decoded_logs", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._eth__logs", "model.livequery_models._eth__decoded_logs", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.base__mainnet": {"database": "ALEO", "schema": "base", "name": "base__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/base__mainnet.sql", "original_file_path": "models/deploy/evm/base__mainnet.sql", "unique_id": "model.livequery_models.base__mainnet", "fqn": ["livequery_models", "deploy", "evm", "base__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2425485, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models.bsc__mainnet": {"database": "ALEO", "schema": "bsc", "name": "bsc__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/bsc__mainnet.sql", "original_file_path": "models/deploy/evm/bsc__mainnet.sql", "unique_id": "model.livequery_models.bsc__mainnet", "fqn": ["livequery_models", "deploy", "evm", "bsc__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.248565, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models._eth__decoded_logs": {"database": "ALEO", "schema": "_eth", "name": "_eth__decoded_logs", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_eth__decoded_logs.sql", "original_file_path": "models/mapping_tables/_eth__decoded_logs.sql", "unique_id": "model.livequery_models._eth__decoded_logs", "fqn": ["livequery_models", "mapping_tables", "_eth__decoded_logs"], "alias": "decoded_logs", "checksum": {"name": "sha256", "checksum": "3f2174b4a8be4c1cba5c8d3e79107d5699d83b1aef530e5ebafc1bc2ffdff638"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2558942, "relation_name": "ALEO._eth.decoded_logs", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT *\nFROM\n    {{ source(\n        'ethereum_core',\n        'ez_decoded_event_logs'\n    ) }}", "language": "sql", "refs": [], "sources": [["ethereum_core", "ez_decoded_event_logs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.ethereum_core.ez_decoded_event_logs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models._evm__native_symbol_map": {"database": "ALEO", "schema": "_evm", "name": "_evm__native_symbol_map", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_evm__native_symbol_map.sql", "original_file_path": "models/mapping_tables/_evm__native_symbol_map.sql", "unique_id": "model.livequery_models._evm__native_symbol_map", "fqn": ["livequery_models", "mapping_tables", "_evm__native_symbol_map"], "alias": "native_symbol_map", "checksum": {"name": "sha256", "checksum": "3ee1112fc9b568e4bfd16703969c64185eecb78266275f6572d30f9337f61b36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2620964, "relation_name": "ALEO._evm.native_symbol_map", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nWITH blockchain_assets AS (\n\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'sepolia' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_nova' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'base' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'fantom' AS blockchain,\n        'FTM' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'CELO' AS blockchain,\n        'CELO' AS asset_symbol,\n        'mainnet' AS network\n)\n\nSELECT\n    blockchain,\n    network,\n    asset_symbol AS symbol\nFROM\n    blockchain_assets", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models._eth__logs": {"database": "ALEO", "schema": "_eth", "name": "_eth__logs", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_eth__logs.sql", "original_file_path": "models/mapping_tables/_eth__logs.sql", "unique_id": "model.livequery_models._eth__logs", "fqn": ["livequery_models", "mapping_tables", "_eth__logs"], "alias": "logs", "checksum": {"name": "sha256", "checksum": "99ceaa11e1a1d01016305d322dc4ecdbfd2de223193155b186c6f9242e0bd2d0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2682576, "relation_name": "ALEO._eth.logs", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT *\nFROM\n    {{ source(\n        'ethereum_core',\n        'fact_event_logs'\n    ) }}", "language": "sql", "refs": [], "sources": [["ethereum_core", "fact_event_logs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.ethereum_core.fact_event_logs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models._evm__abi_map": {"database": "ALEO", "schema": "_evm", "name": "_evm__abi_map", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_evm__abi_map.sql", "original_file_path": "models/mapping_tables/_evm__abi_map.sql", "unique_id": "model.livequery_models._evm__abi_map", "fqn": ["livequery_models", "mapping_tables", "_evm__abi_map"], "alias": "abi_map", "checksum": {"name": "sha256", "checksum": "88cdfb107baea6454e6ea0bde9b36a8a135f15abba9d6588a18de46d8095fe46"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2744079, "relation_name": "ALEO._evm.abi_map", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT\n    parent_contract_address,\n    event_name,\n    event_signature,\n    abi,\n    start_block,\n    end_block,\n    CASE blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    {{ source(\n        'crosschain',\n        'dim_evm_event_abis'\n    ) }}", "language": "sql", "refs": [], "sources": [["crosschain", "dim_evm_event_abis"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.crosschain.dim_evm_event_abis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.livequery_models._evm__contracts_map": {"database": "ALEO", "schema": "_evm", "name": "_evm__contracts_map", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_evm__contracts_map.sql", "original_file_path": "models/mapping_tables/_evm__contracts_map.sql", "unique_id": "model.livequery_models._evm__contracts_map", "fqn": ["livequery_models", "mapping_tables", "_evm__contracts_map"], "alias": "contracts_map", "checksum": {"name": "sha256", "checksum": "735a229e83b106abf3e7fdffae2618ac6f66f8662e74c6394f232a13d43e3bd9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["AWS_LAMBDA_ALEO_API", "INTERNAL_DEV", "DBT_CLOUD_ALEO"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.2805924, "relation_name": "ALEO._evm.contracts_map", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT\n    address,\n    symbol,\n    decimals,\n    CASE\n    blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    {{ source(\n        'crosschain',\n        'dim_contracts'\n    ) }}", "language": "sql", "refs": [], "sources": [["crosschain", "dim_contracts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.crosschain.dim_contracts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "analysis.livequery_models.test_functions_py": {"database": "ALEO", "schema": "test_functions_py", "name": "test_functions_py", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_functions_py.sql", "original_file_path": "analysis/test_functions_py.sql", "unique_id": "analysis.livequery_models.test_functions_py", "fqn": ["livequery_models", "analysis", "test_functions_py"], "alias": "", "checksum": {"name": "sha256", "checksum": "3e379c91a7abf83ca2438fdd68efa21b5f98a91a7c1beb62091f7b4d13d33745"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.3672655, "relation_name": null, "raw_code": "{{ python_hex_to_int() }}\n{{ python_udf_hex_to_int_with_encoding() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.python_hex_to_int", "macro.livequery_models.python_udf_hex_to_int_with_encoding"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_models.test_crud_udfs_in_schema": {"database": "ALEO", "schema": "test_crud_udfs_in_schema", "name": "test_crud_udfs_in_schema", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_crud_udfs_in_schema.sql", "original_file_path": "analysis/test_crud_udfs_in_schema.sql", "unique_id": "analysis.livequery_models.test_crud_udfs_in_schema", "fqn": ["livequery_models", "analysis", "test_crud_udfs_in_schema"], "alias": "", "checksum": {"name": "sha256", "checksum": "f676dabac544030f70f1652a8d6908844809f667be9bd1c8719037b3070efab0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.3784354, "relation_name": null, "raw_code": "{{crud_udfs_by_chain(config_evm_high_level_abstractions, 'ethereum', 'mainnet', false)}}\n{{- crud_udfs_by_chain(config_evm_rpc_primitives, \"ethereum\", None, False) -}}\n{{- crud_udfs_by_chain(config_evm_rpc_primitives, \"ethereum\", None, true) -}}", "language": "sql", "refs": [{"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.crud_udfs_by_chain"], "nodes": ["model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_models.test_create_or_drop_function_from_config": {"database": "ALEO", "schema": "test_create_or_drop_function_from_config", "name": "test_create_or_drop_function_from_config", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_create_or_drop_function_from_config.sql", "original_file_path": "analysis/test_create_or_drop_function_from_config.sql", "unique_id": "analysis.livequery_models.test_create_or_drop_function_from_config", "fqn": ["livequery_models", "analysis", "test_create_or_drop_function_from_config"], "alias": "", "checksum": {"name": "sha256", "checksum": "6da8747a0512c8c0c522b3b56816f437171257a7544716d8795b1a4cc04c8664"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.4506826, "relation_name": null, "raw_code": "{%-  set udfs = fromyaml(config_core_live()) -%}\n{% do udfs.extend(fromyaml(config_core__live())) %}\n{% do udfs.extend(fromyaml(config_core__utils())) %}\n{% do udfs.extend(fromyaml(config_core_utils())) %}\n\n{%- for udf in udfs -%}\n{{- create_or_drop_function_from_config(udf, drop_=True) -}}\n{{- create_or_drop_function_from_config(udf, drop_=False) -}}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.config_core_live", "macro.livequery_models.config_core__live", "macro.livequery_models.config_core__utils", "macro.livequery_models.config_core_utils", "macro.livequery_models.create_or_drop_function_from_config"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_models.generate_test_udf_skeleton": {"database": "ALEO", "schema": "generate_test_udf_skeleton", "name": "generate_test_udf_skeleton", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/generate_test_udf_skeleton.sql", "original_file_path": "analysis/generate_test_udf_skeleton.sql", "unique_id": "analysis.livequery_models.generate_test_udf_skeleton", "fqn": ["livequery_models", "analysis", "generate_test_udf_skeleton"], "alias": "", "checksum": {"name": "sha256", "checksum": "2931dee110117aaa477703fa3ad1dd92e9691d5c8ca46ce0d22145d0e43294ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.5019522, "relation_name": null, "raw_code": "{% set schema = \"strangelove\" %}\n{% set config = fromyaml(config_strangelove_udfs(schema_name = schema, utils_schema_name = \"quicknode_utils\"))  %}\n{% set raw_test_queries %}\nstrangelove.get:\n  - |\n    'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash'\n  - |\n    {\n      'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n    }\n\n\nstrangelove.post:\n  - |\n    'https://endpoint'\n  - |\n    {\n      'foo': 'bar'\n    }\n\n{% endset %}\n{% set test_queries = fromyaml(raw_test_queries) %}\n{{ test_queries }}\n{{ schema }}\n_____\n    columns:\n{%- for item in config %}\n      - name: {{ item[\"name\"] | replace(schema~\".\", \"\") }}\n        tests:\n          - test_marketplace_udf:\n              name: test_{{ item[\"name\"].replace(\".\", \"__\") ~ \"_status_200\" }}\n              args: >\n                {{ test_queries[item[\"name\"]] | join(\", \") | indent(16) }}\n              validations:\n                - result:status_code = 200\n{%- endfor %}\n\n=====================\n\n{{ config | pprint}}\n{# {% for item in config %}\n{% if item[\"return_type\"][0] != \"VARIANT\"%}\n  {{ item[\"return_type\"][0] }}\n{% endif %}\n{% endfor %} #}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.config_strangelove_udfs"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_models.test_functions": {"database": "ALEO", "schema": "test_functions", "name": "test_functions", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_functions.sql", "original_file_path": "analysis/test_functions.sql", "unique_id": "analysis.livequery_models.test_functions", "fqn": ["livequery_models", "analysis", "test_functions"], "alias": "", "checksum": {"name": "sha256", "checksum": "0ab84ce91d84a3416f20a65f80f6226b0dec39313dbd0f555f40cdf721121b9e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.511639, "relation_name": null, "raw_code": "{{ sql_udf_json_rpc_call(True) }}\n{# {{ sql_udf_json_rpc_call(False) }} #}\n{{ config_core__live() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.sql_udf_json_rpc_call", "macro.livequery_models.config_core__live"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.livequery_models.live__verified_api_endpoints": {"database": "ALEO", "schema": "live", "name": "live__verified_api_endpoints", "resource_type": "seed", "package_name": "livequery_models", "path": "live__verified_api_endpoints.csv", "original_file_path": "data/live__verified_api_endpoints.csv", "unique_id": "seed.livequery_models.live__verified_api_endpoints", "fqn": ["livequery_models", "live__verified_api_endpoints"], "alias": "verified_api_endpoints", "checksum": {"name": "sha256", "checksum": "f801025b0fb9a370678db2b5b63ead57dc1371caffa0688266d9be12605a8afa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463696.5303805, "relation_name": "ALEO.live.verified_api_endpoints", "raw_code": "", "root_path": "/home/runner/work/aleo-models/aleo-models/dbt_packages/livequery_models", "depends_on": {"macros": []}}, "operation.livequery_models.livequery_models-on-run-start-0": {"database": "ALEO", "schema": "livequery_models-on-run-start-0", "name": "livequery_models-on-run-start-0", "resource_type": "operation", "package_name": "livequery_models", "path": "hooks/livequery_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_models.livequery_models-on-run-start-0", "fqn": ["livequery_models", "hooks", "livequery_models-on-run-start-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "21164b61c7e1df792b0f9738abd358ff8069bac2c658ccf812b44f7fdbe08202"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.5460777, "relation_name": null, "raw_code": "{{ create_sps() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.create_sps"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.livequery_models.livequery_models-on-run-end-0": {"database": "ALEO", "schema": "livequery_models-on-run-end-0", "name": "livequery_models-on-run-end-0", "resource_type": "operation", "package_name": "livequery_models", "path": "hooks/livequery_models-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_models.livequery_models-on-run-end-0", "fqn": ["livequery_models", "hooks", "livequery_models-on-run-end-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "21164b61c7e1df792b0f9738abd358ff8069bac2c658ccf812b44f7fdbe08202"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "copy_grants": true}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463696.5520682, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.apply_meta_as_tags"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID"], "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295"}, "created_at": 1753463696.928005, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_BLOCK_ID.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_BLOCK_ID"], "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463696.9462695, "relation_name": "ALEO.not_null_core.fact_blocks_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER.9d55d56330": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_9dc8727686ae269f934258e5bea60972.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER.9d55d56330", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER"], "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9dc8727686ae269f934258e5bea60972", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_9dc8727686ae269f934258e5bea60972"}, "created_at": 1753463696.9477777, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9dc8727686ae269f934258e5bea60972\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_065a1414150952b1a2e1542323685686.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH"], "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_065a1414150952b1a2e1542323685686", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_065a1414150952b1a2e1542323685686"}, "created_at": 1753463696.95554, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_HASH", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_065a1414150952b1a2e1542323685686\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_BLOCK_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_BLOCK_HASH.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_BLOCK_HASH"], "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463696.9594102, "relation_name": "ALEO.not_null_core.fact_blocks_BLOCK_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP"], "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6"}, "created_at": 1753463696.960901, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_BLOCK_TIMESTAMP"], "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463696.9645836, "relation_name": "ALEO.not_null_core.fact_blocks_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1"], "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7"}, "created_at": 1753463696.9660678, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_blocks_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc"}, "created_at": 1753463696.9883347, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK"], "alias": "fact_blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4"}, "created_at": 1753463696.99269, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_NETWORK", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a8d4462293ad24d09979445afb10e1b4\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NETWORK", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_NETWORK.b3fe8ae22a": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_NETWORK", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_NETWORK.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_NETWORK.b3fe8ae22a", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_NETWORK"], "alias": "fact_blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463696.9964707, "relation_name": "ALEO.not_null_core.fact_blocks_NETWORK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NETWORK", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NETWORK__STRING__VARCHAR.d57c531d17": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NETWORK__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_1b2a2b527399ebab92d34ade11fc6332.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NETWORK__STRING__VARCHAR.d57c531d17", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NETWORK__STRING__VARCHAR"], "alias": "fact_blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1b2a2b527399ebab92d34ade11fc6332", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_1b2a2b527399ebab92d34ade11fc6332"}, "created_at": 1753463696.9979315, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_NETWORK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1b2a2b527399ebab92d34ade11fc6332\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NETWORK", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NETWORK", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT"], "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a"}, "created_at": 1753463697.0024865, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_TX_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_COUNT", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_TX_COUNT.dd649c1087": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_TX_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_TX_COUNT.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_TX_COUNT.dd649c1087", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_TX_COUNT"], "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.0063324, "relation_name": "ALEO.not_null_core.fact_blocks_TX_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_COUNT", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b3dc819a33d01c658df527721a829634.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT"], "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b3dc819a33d01c658df527721a829634", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b3dc819a33d01c658df527721a829634"}, "created_at": 1753463697.0077968, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_TX_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b3dc819a33d01c658df527721a829634\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_COUNT", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_HASH.303c5cdb2c": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_37f94f424f9f331701c91b17a67c10d6.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_HASH.303c5cdb2c", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_HASH"], "alias": "fact_blocks_PREVIOUS_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_37f94f424f9f331701c91b17a67c10d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_37f94f424f9f331701c91b17a67c10d6"}, "created_at": 1753463697.0117817, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_PREVIOUS_HASH", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_37f94f424f9f331701c91b17a67c10d6\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PREVIOUS_HASH", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PREVIOUS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_PREVIOUS_HASH.a5b9336c67": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_PREVIOUS_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_PREVIOUS_HASH.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_PREVIOUS_HASH.a5b9336c67", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_PREVIOUS_HASH"], "alias": "fact_blocks_PREVIOUS_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.015645, "relation_name": "ALEO.not_null_core.fact_blocks_PREVIOUS_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PREVIOUS_HASH", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREVIOUS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_ROUND.e005d3250f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_ROUND", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_to_exist_core__fact_blocks_ROUND.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_ROUND.e005d3250f", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_ROUND"], "alias": "fact_blocks_ROUND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.01707, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_ROUND", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROUND", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ROUND", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_ROUND.6a7ae2c6cd": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_ROUND", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_ROUND.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_ROUND.6a7ae2c6cd", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_ROUND"], "alias": "fact_blocks_ROUND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.020509, "relation_name": "ALEO.not_null_core.fact_blocks_ROUND", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROUND", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROUND", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_ROUND__NUMBER__FLOAT.713c92704e": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_ROUND__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_18e9671ec88b0ebdce93c1c2079f6120.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_ROUND__NUMBER__FLOAT.713c92704e", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_ROUND__NUMBER__FLOAT"], "alias": "fact_blocks_ROUND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_18e9671ec88b0ebdce93c1c2079f6120", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_18e9671ec88b0ebdce93c1c2079f6120"}, "created_at": 1753463697.022125, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_ROUND", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_18e9671ec88b0ebdce93c1c2079f6120\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROUND", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ROUND", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_COINBASE_TARGET.17ff1fa530": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_COINBASE_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_931249dd61fa2080e75a2f968497c074.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_COINBASE_TARGET.17ff1fa530", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_COINBASE_TARGET"], "alias": "fact_blocks_COINBASE_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_931249dd61fa2080e75a2f968497c074", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_931249dd61fa2080e75a2f968497c074"}, "created_at": 1753463697.025779, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_COINBASE_TARGET", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_931249dd61fa2080e75a2f968497c074\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COINBASE_TARGET", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "COINBASE_TARGET", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_COINBASE_TARGET.59fb9ba542": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_COINBASE_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_COINBASE_TARGET.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_COINBASE_TARGET.59fb9ba542", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_COINBASE_TARGET"], "alias": "fact_blocks_COINBASE_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.0295784, "relation_name": "ALEO.not_null_core.fact_blocks_COINBASE_TARGET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COINBASE_TARGET", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COINBASE_TARGET", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_COINBASE_TARGET__NUMBER__FLOAT.b3386b7291": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_COINBASE_TARGET__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_e87ee9c9282cdfc635e3fc4bbf7d5107.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_COINBASE_TARGET__NUMBER__FLOAT.b3386b7291", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_COINBASE_TARGET__NUMBER__FLOAT"], "alias": "fact_blocks_COINBASE_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e87ee9c9282cdfc635e3fc4bbf7d5107", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_e87ee9c9282cdfc635e3fc4bbf7d5107"}, "created_at": 1753463697.03099, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_COINBASE_TARGET", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e87ee9c9282cdfc635e3fc4bbf7d5107\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COINBASE_TARGET", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "COINBASE_TARGET", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_PROOF_TARGET.5082e2821b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_PROOF_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_2834b3c35ec0eb65bb14f40112f776bb.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_PROOF_TARGET.5082e2821b", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_PROOF_TARGET"], "alias": "fact_blocks_CUMULATIVE_PROOF_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2834b3c35ec0eb65bb14f40112f776bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_2834b3c35ec0eb65bb14f40112f776bb"}, "created_at": 1753463697.0346324, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_CUMULATIVE_PROOF_TARGET", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2834b3c35ec0eb65bb14f40112f776bb\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CUMULATIVE_PROOF_TARGET", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CUMULATIVE_PROOF_TARGET", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_PROOF_TARGET.94ec4ffc5d": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_CUMULATIVE_PROOF_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_CUMULATIVE_PROOF_TARGET.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_PROOF_TARGET.94ec4ffc5d", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_CUMULATIVE_PROOF_TARGET"], "alias": "fact_blocks_CUMULATIVE_PROOF_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.038419, "relation_name": "ALEO.not_null_core.fact_blocks_CUMULATIVE_PROOF_TARGET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CUMULATIVE_PROOF_TARGET", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUMULATIVE_PROOF_TARGET", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_PROOF_TARGET__NUMBER__FLOAT.e049f0f54d": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_PROOF_TARGET__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_0479f97addf27a1f18cf327ba44b631e.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_PROOF_TARGET__NUMBER__FLOAT.e049f0f54d", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_PROOF_TARGET__NUMBER__FLOAT"], "alias": "fact_blocks_CUMULATIVE_PROOF_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0479f97addf27a1f18cf327ba44b631e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0479f97addf27a1f18cf327ba44b631e"}, "created_at": 1753463697.0399544, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_CUMULATIVE_PROOF_TARGET", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0479f97addf27a1f18cf327ba44b631e\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CUMULATIVE_PROOF_TARGET", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CUMULATIVE_PROOF_TARGET", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_WEIGHT.54ded95d23": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_WEIGHT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_5c02ed269685b3cfcabe89297ee08deb.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_WEIGHT.54ded95d23", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_WEIGHT"], "alias": "fact_blocks_CUMULATIVE_WEIGHT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5c02ed269685b3cfcabe89297ee08deb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_5c02ed269685b3cfcabe89297ee08deb"}, "created_at": 1753463697.0435987, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_CUMULATIVE_WEIGHT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5c02ed269685b3cfcabe89297ee08deb\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CUMULATIVE_WEIGHT", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CUMULATIVE_WEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_WEIGHT.d5cc5607fc": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_CUMULATIVE_WEIGHT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_CUMULATIVE_WEIGHT.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_WEIGHT.d5cc5607fc", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_CUMULATIVE_WEIGHT"], "alias": "fact_blocks_CUMULATIVE_WEIGHT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.0479228, "relation_name": "ALEO.not_null_core.fact_blocks_CUMULATIVE_WEIGHT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CUMULATIVE_WEIGHT", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUMULATIVE_WEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_WEIGHT__NUMBER__FLOAT.7998cba785": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_WEIGHT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_84faea110932f036ddf544ec851b2a1d.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_WEIGHT__NUMBER__FLOAT.7998cba785", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_WEIGHT__NUMBER__FLOAT"], "alias": "fact_blocks_CUMULATIVE_WEIGHT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_84faea110932f036ddf544ec851b2a1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_84faea110932f036ddf544ec851b2a1d"}, "created_at": 1753463697.0493624, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_CUMULATIVE_WEIGHT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_84faea110932f036ddf544ec851b2a1d\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CUMULATIVE_WEIGHT", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CUMULATIVE_WEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_REWARD.8a7df7ccb4": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_613b0226dbfdda720eca95f420d8b7d5.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_REWARD.8a7df7ccb4", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_REWARD"], "alias": "fact_blocks_BLOCK_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_613b0226dbfdda720eca95f420d8b7d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_613b0226dbfdda720eca95f420d8b7d5"}, "created_at": 1753463697.0531507, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_613b0226dbfdda720eca95f420d8b7d5\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_REWARD", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_REWARD", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_BLOCK_REWARD.bb713926f5": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_BLOCK_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_BLOCK_REWARD.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_BLOCK_REWARD.bb713926f5", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_BLOCK_REWARD"], "alias": "fact_blocks_BLOCK_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.056774, "relation_name": "ALEO.not_null_core.fact_blocks_BLOCK_REWARD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_REWARD", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARD", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_REWARD__NUMBER__FLOAT.7b3f7c5222": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_REWARD__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_0988bf1703358fd605eb4c2c137912dc.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_REWARD__NUMBER__FLOAT.7b3f7c5222", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_REWARD__NUMBER__FLOAT"], "alias": "fact_blocks_BLOCK_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0988bf1703358fd605eb4c2c137912dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0988bf1703358fd605eb4c2c137912dc"}, "created_at": 1753463697.058183, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0988bf1703358fd605eb4c2c137912dc\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_REWARD", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_REWARD", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PUZZLE_REWARD.9abdd6d4bc": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_PUZZLE_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_f67ce53ad66f90e8b601998bb3258bf8.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PUZZLE_REWARD.9abdd6d4bc", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_PUZZLE_REWARD"], "alias": "fact_blocks_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f67ce53ad66f90e8b601998bb3258bf8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f67ce53ad66f90e8b601998bb3258bf8"}, "created_at": 1753463697.0619912, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_PUZZLE_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f67ce53ad66f90e8b601998bb3258bf8\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PUZZLE_REWARD", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_PUZZLE_REWARD.7e6616d5f4": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_PUZZLE_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_PUZZLE_REWARD.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_PUZZLE_REWARD.7e6616d5f4", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_PUZZLE_REWARD"], "alias": "fact_blocks_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.0656257, "relation_name": "ALEO.not_null_core.fact_blocks_PUZZLE_REWARD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PUZZLE_REWARD", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PUZZLE_REWARD__NUMBER__FLOAT.deaa8237fa": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PUZZLE_REWARD__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_995af95f7c30ab0e5c6d4aa5caab7ed8.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PUZZLE_REWARD__NUMBER__FLOAT.deaa8237fa", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PUZZLE_REWARD__NUMBER__FLOAT"], "alias": "fact_blocks_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_995af95f7c30ab0e5c6d4aa5caab7ed8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_995af95f7c30ab0e5c6d4aa5caab7ed8"}, "created_at": 1753463697.067052, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_PUZZLE_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_995af95f7c30ab0e5c6d4aa5caab7ed8\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PUZZLE_REWARD", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_FACT_BLOCKS_ID.9f3cfdc8fc": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_FACT_BLOCKS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_92bda7065604539b95583827d53e8ad1.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_FACT_BLOCKS_ID.9f3cfdc8fc", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_FACT_BLOCKS_ID"], "alias": "fact_blocks_FACT_BLOCKS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_92bda7065604539b95583827d53e8ad1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_92bda7065604539b95583827d53e8ad1"}, "created_at": 1753463697.07087, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_FACT_BLOCKS_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_92bda7065604539b95583827d53e8ad1\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_BLOCKS_ID", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_BLOCKS_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_FACT_BLOCKS_ID.e04af95ef1": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_FACT_BLOCKS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_FACT_BLOCKS_ID.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_FACT_BLOCKS_ID.e04af95ef1", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_FACT_BLOCKS_ID"], "alias": "fact_blocks_FACT_BLOCKS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.0747051, "relation_name": "ALEO.not_null_core.fact_blocks_FACT_BLOCKS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_BLOCKS_ID", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_BLOCKS_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.unique_core__fact_blocks_FACT_BLOCKS_ID.ae21b89ade": {"database": "ALEO", "schema": "unique_core", "name": "unique_core__fact_blocks_FACT_BLOCKS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_core__fact_blocks_FACT_BLOCKS_ID.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.unique_core__fact_blocks_FACT_BLOCKS_ID.ae21b89ade", "fqn": ["aleo_models", "gold", "core", "unique_core__fact_blocks_FACT_BLOCKS_ID"], "alias": "fact_blocks_FACT_BLOCKS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.0761328, "relation_name": "ALEO.unique_core.fact_blocks_FACT_BLOCKS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_BLOCKS_ID", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_BLOCKS_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_INSERTED_TIMESTAMP.2409df43de": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_041edcfafe833af7956fe2d1f18fca92.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_INSERTED_TIMESTAMP.2409df43de", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_INSERTED_TIMESTAMP"], "alias": "fact_blocks_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_041edcfafe833af7956fe2d1f18fca92", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_041edcfafe833af7956fe2d1f18fca92"}, "created_at": 1753463697.0775437, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_INSERTED_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_041edcfafe833af7956fe2d1f18fca92\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_INSERTED_TIMESTAMP.2bc7f6716c": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_INSERTED_TIMESTAMP.2bc7f6716c", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_INSERTED_TIMESTAMP"], "alias": "fact_blocks_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.0811539, "relation_name": "ALEO.not_null_core.fact_blocks_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_MODIFIED_TIMESTAMP.a134d35ed2": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_bf4e42dc78dfb5001717a2dbfa9fd32f.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_MODIFIED_TIMESTAMP.a134d35ed2", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_blocks_MODIFIED_TIMESTAMP"], "alias": "fact_blocks_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf4e42dc78dfb5001717a2dbfa9fd32f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_bf4e42dc78dfb5001717a2dbfa9fd32f"}, "created_at": 1753463697.0826151, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_blocks_MODIFIED_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf4e42dc78dfb5001717a2dbfa9fd32f\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__fact_blocks_MODIFIED_TIMESTAMP.ba893bde8a": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__fact_blocks_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__fact_blocks_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.not_null_core__fact_blocks_MODIFIED_TIMESTAMP.ba893bde8a", "fqn": ["aleo_models", "gold", "core", "not_null_core__fact_blocks_MODIFIED_TIMESTAMP"], "alias": "fact_blocks_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.08642, "relation_name": "ALEO.not_null_core.fact_blocks_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_core__fact_blocks_NETWORK__BLOCK_ID.54f426e528": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_core", "name": "dbt_utils_unique_combination_of_columns_core__fact_blocks_NETWORK__BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_cc2a1ea3dbf9a89de24b6d6754e2d51c.sql", "original_file_path": "models/gold/core/core__fact_blocks.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_core__fact_blocks_NETWORK__BLOCK_ID.54f426e528", "fqn": ["aleo_models", "gold", "core", "dbt_utils_unique_combination_of_columns_core__fact_blocks_NETWORK__BLOCK_ID"], "alias": "fact_blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cc2a1ea3dbf9a89de24b6d6754e2d51c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cc2a1ea3dbf9a89de24b6d6754e2d51c"}, "created_at": 1753463697.0878923, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_core.fact_blocks_NETWORK", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cc2a1ea3dbf9a89de24b6d6754e2d51c\") }}", "language": "sql", "refs": [{"name": "core__fact_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_blocks", "attached_node": "model.aleo_models.core__fact_blocks", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["NETWORK", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TX_ID_CREATED.5d8f125e21": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TX_ID_CREATED", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ac67e0a8274b371373be9f4482bde474.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TX_ID_CREATED.5d8f125e21", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TX_ID_CREATED"], "alias": "dim_token_registrations_TX_ID_CREATED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ac67e0a8274b371373be9f4482bde474", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ac67e0a8274b371373be9f4482bde474"}, "created_at": 1753463697.1018972, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_TX_ID_CREATED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ac67e0a8274b371373be9f4482bde474\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID_CREATED", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID_CREATED", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_ID_CREATED.0f1db2f3a5": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_ID_CREATED", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3bfbcdc18206e3fded76a6a4cd0ed3e1.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_ID_CREATED.0f1db2f3a5", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_ID_CREATED"], "alias": "dim_token_registrations_BLOCK_ID_CREATED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3bfbcdc18206e3fded76a6a4cd0ed3e1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3bfbcdc18206e3fded76a6a4cd0ed3e1"}, "created_at": 1753463697.1058109, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_BLOCK_ID_CREATED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3bfbcdc18206e3fded76a6a4cd0ed3e1\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID_CREATED", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID_CREATED", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_TIMESTAMP_CREATED.65bb29727d": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_TIMESTAMP_CREATED", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_718e46d8a2d36944be87efff749e7b09.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_TIMESTAMP_CREATED.65bb29727d", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_TIMESTAMP_CREATED"], "alias": "dim_token_registrations_BLOCK_TIMESTAMP_CREATED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_718e46d8a2d36944be87efff749e7b09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_718e46d8a2d36944be87efff749e7b09"}, "created_at": 1753463697.109426, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_BLOCK_TIMESTAMP_CREATED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_718e46d8a2d36944be87efff749e7b09\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP_CREATED", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP_CREATED", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_ID.28ae55e881": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_76f40e21b73994436e928c6924aad412.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_ID.28ae55e881", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_ID"], "alias": "dim_token_registrations_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_76f40e21b73994436e928c6924aad412", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_76f40e21b73994436e928c6924aad412"}, "created_at": 1753463697.113254, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_TOKEN_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_76f40e21b73994436e928c6924aad412\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ID", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__dim_token_registrations_TOKEN_ID.3af44258e3": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_token_registrations_TOKEN_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_token_registrations_TOKEN_ID.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.not_null_core__dim_token_registrations_TOKEN_ID.3af44258e3", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_token_registrations_TOKEN_ID"], "alias": "dim_token_registrations_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.116895, "relation_name": "ALEO.not_null_core.dim_token_registrations_TOKEN_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ID", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": null}}, "test.aleo_models.unique_core__dim_token_registrations_TOKEN_ID.022fc34b0d": {"database": "ALEO", "schema": "unique_core", "name": "unique_core__dim_token_registrations_TOKEN_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_core__dim_token_registrations_TOKEN_ID.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.unique_core__dim_token_registrations_TOKEN_ID.022fc34b0d", "fqn": ["aleo_models", "gold", "core", "unique_core__dim_token_registrations_TOKEN_ID"], "alias": "dim_token_registrations_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.118534, "relation_name": "ALEO.unique_core.dim_token_registrations_TOKEN_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ID", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_NAME.c1a4850472": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_NAME", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_118d48ebb1f35e5298cb326c9d852a3c.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_NAME.c1a4850472", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_NAME"], "alias": "dim_token_registrations_TOKEN_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_118d48ebb1f35e5298cb326c9d852a3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_118d48ebb1f35e5298cb326c9d852a3c"}, "created_at": 1753463697.1199622, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_TOKEN_NAME", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_118d48ebb1f35e5298cb326c9d852a3c\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_NAME", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_NAME", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL.c71d617563": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_659b59da570cb0f671a94892bed27044.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL.c71d617563", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL"], "alias": "dim_token_registrations_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_659b59da570cb0f671a94892bed27044", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_659b59da570cb0f671a94892bed27044"}, "created_at": 1753463697.123592, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_SYMBOL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_659b59da570cb0f671a94892bed27044\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYMBOL", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_DECIMALS.bd77ccf50f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_DECIMALS", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3d58c8fb5e166ac12fba15e5050b2db9.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_DECIMALS.bd77ccf50f", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_DECIMALS"], "alias": "dim_token_registrations_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3d58c8fb5e166ac12fba15e5050b2db9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3d58c8fb5e166ac12fba15e5050b2db9"}, "created_at": 1753463697.1273885, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_DECIMALS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d58c8fb5e166ac12fba15e5050b2db9\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DECIMALS", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_MAX_SUPPLY.e1d9fb49f3": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_MAX_SUPPLY", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_7e926ca8a1db01e59024fb74c9c75508.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_MAX_SUPPLY.e1d9fb49f3", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_MAX_SUPPLY"], "alias": "dim_token_registrations_MAX_SUPPLY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7e926ca8a1db01e59024fb74c9c75508", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_7e926ca8a1db01e59024fb74c9c75508"}, "created_at": 1753463697.1310012, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_MAX_SUPPLY", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7e926ca8a1db01e59024fb74c9c75508\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_SUPPLY", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MAX_SUPPLY", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_REQUIRED.4aad5b0f85": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_REQUIRED", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_c98ddbdda343d604eaa19d953fdaca2b.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_REQUIRED.4aad5b0f85", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_REQUIRED"], "alias": "dim_token_registrations_EXTERNAL_AUTH_REQUIRED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c98ddbdda343d604eaa19d953fdaca2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_c98ddbdda343d604eaa19d953fdaca2b"}, "created_at": 1753463697.1348464, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_EXTERNAL_AUTH_REQUIRED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c98ddbdda343d604eaa19d953fdaca2b\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EXTERNAL_AUTH_REQUIRED", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "EXTERNAL_AUTH_REQUIRED", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_PARTY.03ebb47f35": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_PARTY", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_92b8fe1f2401a8a3c0059f5b0ad0fb0f.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_PARTY.03ebb47f35", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_PARTY"], "alias": "dim_token_registrations_EXTERNAL_AUTH_PARTY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_92b8fe1f2401a8a3c0059f5b0ad0fb0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_92b8fe1f2401a8a3c0059f5b0ad0fb0f"}, "created_at": 1753463697.1384885, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_EXTERNAL_AUTH_PARTY", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_92b8fe1f2401a8a3c0059f5b0ad0fb0f\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EXTERNAL_AUTH_PARTY", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "EXTERNAL_AUTH_PARTY", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_NAME_ENCODED.4ec37ad556": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_NAME_ENCODED", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_faa4ef9e1c85203aa6edd7409c3fe5f5.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_NAME_ENCODED.4ec37ad556", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_NAME_ENCODED"], "alias": "dim_token_registrations_NAME_ENCODED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_faa4ef9e1c85203aa6edd7409c3fe5f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_faa4ef9e1c85203aa6edd7409c3fe5f5"}, "created_at": 1753463697.1427693, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_NAME_ENCODED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_faa4ef9e1c85203aa6edd7409c3fe5f5\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NAME_ENCODED", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "NAME_ENCODED", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL_ENCODED.ce6a79e6f0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL_ENCODED", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_586a137b5d1602bbf22983cfc0369e21.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL_ENCODED.ce6a79e6f0", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL_ENCODED"], "alias": "dim_token_registrations_SYMBOL_ENCODED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_586a137b5d1602bbf22983cfc0369e21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_586a137b5d1602bbf22983cfc0369e21"}, "created_at": 1753463697.1464736, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_token_registrations_SYMBOL_ENCODED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_586a137b5d1602bbf22983cfc0369e21\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYMBOL_ENCODED", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SYMBOL_ENCODED", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.unique_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.805acb60e8": {"database": "ALEO", "schema": "unique_core", "name": "unique_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.unique_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.805acb60e8", "fqn": ["aleo_models", "gold", "core", "unique_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID"], "alias": "dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.1502864, "relation_name": "ALEO.unique_core.dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_TOKEN_REGISTRATIONS_ID", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DIM_TOKEN_REGISTRATIONS_ID", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.66976bee8c": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_token_regis_56cc9d2ac1d7f79e360a77bf384eca51.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.not_null_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.66976bee8c", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID"], "alias": "dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_core__dim_token_regis_56cc9d2ac1d7f79e360a77bf384eca51", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_core__dim_token_regis_56cc9d2ac1d7f79e360a77bf384eca51"}, "created_at": 1753463697.1517923, "relation_name": "ALEO.not_null_core.dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__dim_token_regis_56cc9d2ac1d7f79e360a77bf384eca51\") }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_TOKEN_REGISTRATIONS_ID", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_TOKEN_REGISTRATIONS_ID", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_token_registrations_INSERTED_TIMESTAMP.d01fb16229": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_token_registrations_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_token_registrations_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.not_null_core__dim_token_registrations_INSERTED_TIMESTAMP.d01fb16229", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_token_registrations_INSERTED_TIMESTAMP"], "alias": "dim_token_registrations_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.1535668, "relation_name": "ALEO.not_null_core.dim_token_registrations_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_token_registrations_MODIFIED_TIMESTAMP.c241d92ffe": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_token_registrations_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_token_registrations_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__dim_token_registrations.yml", "unique_id": "test.aleo_models.not_null_core__dim_token_registrations_MODIFIED_TIMESTAMP.c241d92ffe", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_token_registrations_MODIFIED_TIMESTAMP"], "alias": "dim_token_registrations_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.155001, "relation_name": "ALEO.not_null_core.dim_token_registrations_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_token_registrations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_token_registrations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__dim_token_registrations", "attached_node": "model.aleo_models.core__dim_token_registrations", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_token_registrations')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_ID.22feac23a3": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b8dd0d3a1eb42c79c127e59d0082e035.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_ID.22feac23a3", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_ID"], "alias": "fact_block_solutions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b8dd0d3a1eb42c79c127e59d0082e035", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b8dd0d3a1eb42c79c127e59d0082e035"}, "created_at": 1753463697.1607602, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b8dd0d3a1eb42c79c127e59d0082e035\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_TIMESTAMP.934763eab7": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_be1be6d5aa55bcb54972c8e4dcdaae15.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_TIMESTAMP.934763eab7", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_TIMESTAMP"], "alias": "fact_block_solutions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be1be6d5aa55bcb54972c8e4dcdaae15", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_be1be6d5aa55bcb54972c8e4dcdaae15"}, "created_at": 1753463697.1644304, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be1be6d5aa55bcb54972c8e4dcdaae15\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_solutions_BLOCK_TIMESTAMP__day__1.e8ab764679": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_solutions_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_6ceb6b68a7dda637c5d1bb1fbe142edf.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_solutions_BLOCK_TIMESTAMP__day__1.e8ab764679", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_solutions_BLOCK_TIMESTAMP__day__1"], "alias": "fact_block_solutions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6ceb6b68a7dda637c5d1bb1fbe142edf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_6ceb6b68a7dda637c5d1bb1fbe142edf"}, "created_at": 1753463697.1682494, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_block_solutions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6ceb6b68a7dda637c5d1bb1fbe142edf\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_PUZZLE_REWARD.558b82bad3": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_PUZZLE_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_cd4ebc433feb3555714312e1f48f7bf6.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_PUZZLE_REWARD.558b82bad3", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_PUZZLE_REWARD"], "alias": "fact_block_solutions_BLOCK_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cd4ebc433feb3555714312e1f48f7bf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_cd4ebc433feb3555714312e1f48f7bf6"}, "created_at": 1753463697.1738217, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_BLOCK_PUZZLE_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cd4ebc433feb3555714312e1f48f7bf6\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_PUZZLE_REWARD", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_ADDRESS.de9211d159": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_6bd86a9347edf7ae03ca476595f7a96f.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_ADDRESS.de9211d159", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_ADDRESS"], "alias": "fact_block_solutions_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6bd86a9347edf7ae03ca476595f7a96f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_6bd86a9347edf7ae03ca476595f7a96f"}, "created_at": 1753463697.177411, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6bd86a9347edf7ae03ca476595f7a96f\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_COUNTER.1f899ec7a6": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_COUNTER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_50b9b1aa91813567314a2c61b60a7074.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_COUNTER.1f899ec7a6", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_COUNTER"], "alias": "fact_block_solutions_COUNTER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_50b9b1aa91813567314a2c61b60a7074", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_50b9b1aa91813567314a2c61b60a7074"}, "created_at": 1753463697.1812146, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_COUNTER", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_50b9b1aa91813567314a2c61b60a7074\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COUNTER", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "COUNTER", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_EPOCH_HASH.ca095229c0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_EPOCH_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_65bbbae48804b97056dd629ad74a1259.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_EPOCH_HASH.ca095229c0", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_EPOCH_HASH"], "alias": "fact_block_solutions_EPOCH_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_65bbbae48804b97056dd629ad74a1259", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_65bbbae48804b97056dd629ad74a1259"}, "created_at": 1753463697.18484, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_EPOCH_HASH", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_65bbbae48804b97056dd629ad74a1259\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EPOCH_HASH", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "EPOCH_HASH", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_SOLUTION_ID.8323de7856": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_SOLUTION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3b4811618c87b0775a31e7638425e85c.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_SOLUTION_ID.8323de7856", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_SOLUTION_ID"], "alias": "fact_block_solutions_SOLUTION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3b4811618c87b0775a31e7638425e85c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3b4811618c87b0775a31e7638425e85c"}, "created_at": 1753463697.1886442, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_SOLUTION_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3b4811618c87b0775a31e7638425e85c\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SOLUTION_ID", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SOLUTION_ID", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_TARGET.2d39d2be4f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_152c740ea95043754d13d4815b1b6ade.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_TARGET.2d39d2be4f", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_TARGET"], "alias": "fact_block_solutions_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_152c740ea95043754d13d4815b1b6ade", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_152c740ea95043754d13d4815b1b6ade"}, "created_at": 1753463697.192254, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_TARGET", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_152c740ea95043754d13d4815b1b6ade\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TARGET", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TARGET", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD_RAW.e8b02b6278": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD_RAW", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_780103d5d9469ee6b1188d2d8c01b26e.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD_RAW.e8b02b6278", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD_RAW"], "alias": "fact_block_solutions_REWARD_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_780103d5d9469ee6b1188d2d8c01b26e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_780103d5d9469ee6b1188d2d8c01b26e"}, "created_at": 1753463697.1960828, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_REWARD_RAW", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_780103d5d9469ee6b1188d2d8c01b26e\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD_RAW", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "REWARD_RAW", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD.fc3dbe3aca": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_9b26664dab1948ebf9c5c97c7c0e8c54.sql", "original_file_path": "models/gold/core/core__fact_block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD.fc3dbe3aca", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD"], "alias": "fact_block_solutions_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9b26664dab1948ebf9c5c97c7c0e8c54", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_9b26664dab1948ebf9c5c97c7c0e8c54"}, "created_at": 1753463697.199713, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_solutions_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9b26664dab1948ebf9c5c97c7c0e8c54\") }}", "language": "sql", "refs": [{"name": "core__fact_block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD", "file_key_name": "models.core__fact_block_solutions", "attached_node": "model.aleo_models.core__fact_block_solutions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "REWARD", "model": "{{ get_where_subquery(ref('core__fact_block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID"], "alias": "fact_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718"}, "created_at": 1753463697.2077646, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06ec7a899413bab6063716744517f718\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP"], "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56"}, "created_at": 1753463697.2116845, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transfers_BLOCK_TIMESTAMP__day__1.b9bb12d3c2": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transfers_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_cdaf6b74146f1219c04c8cb17f6a084b.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transfers_BLOCK_TIMESTAMP__day__1.b9bb12d3c2", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transfers_BLOCK_TIMESTAMP__day__1"], "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cdaf6b74146f1219c04c8cb17f6a084b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cdaf6b74146f1219c04c8cb17f6a084b"}, "created_at": 1753463697.2153656, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cdaf6b74146f1219c04c8cb17f6a084b\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID"], "alias": "fact_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0"}, "created_at": 1753463697.2211273, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED"], "alias": "fact_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711"}, "created_at": 1753463697.2250142, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE"], "alias": "fact_transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f"}, "created_at": 1753463697.2286823, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_TRANSFER_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFER_TYPE", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER"], "alias": "fact_transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c"}, "created_at": 1753463697.2332902, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_SENDER", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER"], "alias": "fact_transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef"}, "created_at": 1753463697.2369866, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_RECEIVER", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT"], "alias": "fact_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5"}, "created_at": 1753463697.2408738, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_IS_NATIVE.11f4a568d6": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_IS_NATIVE", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_80bda7064c1bd143371d9c4ef22c95d8.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_IS_NATIVE.11f4a568d6", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_IS_NATIVE"], "alias": "fact_transfers_IS_NATIVE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_80bda7064c1bd143371d9c4ef22c95d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_80bda7064c1bd143371d9c4ef22c95d8"}, "created_at": 1753463697.2445126, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_IS_NATIVE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_80bda7064c1bd143371d9c4ef22c95d8\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IS_NATIVE", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "IS_NATIVE", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TOKEN_ADDRESS.87260f30a0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TOKEN_ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_fb5464f835da2a94afd3e4b2fb5ff789.sql", "original_file_path": "models/gold/core/core__fact_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TOKEN_ADDRESS.87260f30a0", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TOKEN_ADDRESS"], "alias": "fact_transfers_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fb5464f835da2a94afd3e4b2fb5ff789", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_fb5464f835da2a94afd3e4b2fb5ff789"}, "created_at": 1753463697.2483287, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transfers_TOKEN_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fb5464f835da2a94afd3e4b2fb5ff789\") }}", "language": "sql", "refs": [{"name": "core__fact_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ADDRESS", "file_key_name": "models.core__fact_transfers", "attached_node": "model.aleo_models.core__fact_transfers", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_BLOCKCHAIN", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_BLOCKCHAIN.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_BLOCKCHAIN"], "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.2559412, "relation_name": "ALEO.not_null_core.dim_labels_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_labels_CREATOR.0c77d5749c": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_CREATOR", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_CREATOR.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_CREATOR"], "alias": "dim_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.2574234, "relation_name": "ALEO.not_null_core.dim_labels_CREATOR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CREATOR", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_ADDRESS.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_ADDRESS"], "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.258901, "relation_name": "ALEO.not_null_core.dim_labels_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_labels_ADDRESS_NAME.0de78829a4": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_ADDRESS_NAME", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_ADDRESS_NAME.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_ADDRESS_NAME.0de78829a4", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_ADDRESS_NAME"], "alias": "dim_labels_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.2603276, "relation_name": "ALEO.not_null_core.dim_labels_ADDRESS_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS_NAME", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_LABEL_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_LABEL_TYPE.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_LABEL_TYPE"], "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.26181, "relation_name": "ALEO.not_null_core.dim_labels_LABEL_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_LABEL_SUBTYPE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_LABEL_SUBTYPE.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_LABEL_SUBTYPE"], "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.2632492, "relation_name": "ALEO.not_null_core.dim_labels_LABEL_SUBTYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_PROJECT_NAME", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_PROJECT_NAME.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_PROJECT_NAME"], "alias": "dim_labels_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.2648134, "relation_name": "ALEO.not_null_core.dim_labels_PROJECT_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROJECT_NAME", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_DIM_LABELS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_DIM_LABELS_ID.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_DIM_LABELS_ID"], "alias": "dim_labels_DIM_LABELS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.2662368, "relation_name": "ALEO.not_null_core.dim_labels_DIM_LABELS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_LABELS_ID", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_LABELS_ID", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.unique_core__dim_labels_DIM_LABELS_ID.af1f2177a6": {"database": "ALEO", "schema": "unique_core", "name": "unique_core__dim_labels_DIM_LABELS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_core__dim_labels_DIM_LABELS_ID.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.unique_core__dim_labels_DIM_LABELS_ID.af1f2177a6", "fqn": ["aleo_models", "gold", "core", "unique_core__dim_labels_DIM_LABELS_ID"], "alias": "dim_labels_DIM_LABELS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.2677703, "relation_name": "ALEO.unique_core.dim_labels_DIM_LABELS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_LABELS_ID", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DIM_LABELS_ID", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_INSERTED_TIMESTAMP"], "alias": "dim_labels_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.2691638, "relation_name": "ALEO.not_null_core.dim_labels_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.not_null_core__dim_labels_MODIFIED_TIMESTAMP.02c7121cbb": {"database": "ALEO", "schema": "not_null_core", "name": "not_null_core__dim_labels_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_core__dim_labels_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.not_null_core__dim_labels_MODIFIED_TIMESTAMP.02c7121cbb", "fqn": ["aleo_models", "gold", "core", "not_null_core__dim_labels_MODIFIED_TIMESTAMP"], "alias": "dim_labels_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.2706053, "relation_name": "ALEO.not_null_core.dim_labels_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__ADDRESS.59b513fc33": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_core", "name": "dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_70f964928e94c55641151b0cb7f2fda0.sql", "original_file_path": "models/gold/core/core__dim_labels.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__ADDRESS.59b513fc33", "fqn": ["aleo_models", "gold", "core", "dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__ADDRESS"], "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_70f964928e94c55641151b0cb7f2fda0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_70f964928e94c55641151b0cb7f2fda0"}, "created_at": 1753463697.2720177, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_core.dim_labels_BLOCKCHAIN", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_70f964928e94c55641151b0cb7f2fda0\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_labels"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__dim_labels", "attached_node": "model.aleo_models.core__dim_labels", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "ADDRESS"], "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID"], "alias": "fact_transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e"}, "created_at": 1753463697.281709, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP"], "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8"}, "created_at": 1753463697.2854006, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1"], "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df"}, "created_at": 1753463697.289288, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_transactions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID"], "alias": "fact_transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce"}, "created_at": 1753463697.2949917, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_INDEX.a65a072fb0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_INDEX", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_6ad18554f14f62b8072f2a95f468899e.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_INDEX.a65a072fb0", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_INDEX"], "alias": "fact_transactions_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6ad18554f14f62b8072f2a95f468899e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_6ad18554f14f62b8072f2a95f468899e"}, "created_at": 1753463697.2986562, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_INDEX", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6ad18554f14f62b8072f2a95f468899e\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INDEX", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_tx_succeeded.5b133acfaf": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_tx_succeeded", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_12666dca2f74b3b028efe9ea2f09eeec.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_tx_succeeded.5b133acfaf", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_tx_succeeded"], "alias": "fact_transactions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_12666dca2f74b3b028efe9ea2f09eeec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_12666dca2f74b3b028efe9ea2f09eeec"}, "created_at": 1753463697.3025382, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_tx_succeeded", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_12666dca2f74b3b028efe9ea2f09eeec\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tx_succeeded", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_TYPE.b04b8ae75c": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_85dcdd9b0652de9fcb0fb6d0e6098eb2.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_TYPE.b04b8ae75c", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_TYPE"], "alias": "fact_transactions_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_85dcdd9b0652de9fcb0fb6d0e6098eb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_85dcdd9b0652de9fcb0fb6d0e6098eb2"}, "created_at": 1753463697.3061945, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_TX_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_85dcdd9b0652de9fcb0fb6d0e6098eb2\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_TYPE", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_EXECUTION_MSG.d8744ee919": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_EXECUTION_MSG", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_9e2a9e22fbcd2fb153785b745539e375.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_EXECUTION_MSG.d8744ee919", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_EXECUTION_MSG"], "alias": "fact_transactions_EXECUTION_MSG", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9e2a9e22fbcd2fb153785b745539e375", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_9e2a9e22fbcd2fb153785b745539e375"}, "created_at": 1753463697.3100088, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_EXECUTION_MSG", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9e2a9e22fbcd2fb153785b745539e375\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EXECUTION_MSG", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "EXECUTION_MSG", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_DEPLOYMENT_MSG.13dd6ba041": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_DEPLOYMENT_MSG", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ace99c4d172f0cf7b35eeaf7f43c4410.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_DEPLOYMENT_MSG.13dd6ba041", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_DEPLOYMENT_MSG"], "alias": "fact_transactions_DEPLOYMENT_MSG", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ace99c4d172f0cf7b35eeaf7f43c4410", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ace99c4d172f0cf7b35eeaf7f43c4410"}, "created_at": 1753463697.3136997, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_DEPLOYMENT_MSG", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ace99c4d172f0cf7b35eeaf7f43c4410\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEPLOYMENT_MSG", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DEPLOYMENT_MSG", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_OWNER_MSG.48cf57eabb": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_OWNER_MSG", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b235bc754ec8981c04680a56bea7539e.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_OWNER_MSG.48cf57eabb", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_OWNER_MSG"], "alias": "fact_transactions_OWNER_MSG", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b235bc754ec8981c04680a56bea7539e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b235bc754ec8981c04680a56bea7539e"}, "created_at": 1753463697.3175159, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_OWNER_MSG", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b235bc754ec8981c04680a56bea7539e\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "OWNER_MSG", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "OWNER_MSG", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FINALIZE_MSG.47c5e66540": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_FINALIZE_MSG", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_f56e8b4c45586724c5627e9b6a667c23.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FINALIZE_MSG.47c5e66540", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_FINALIZE_MSG"], "alias": "fact_transactions_FINALIZE_MSG", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f56e8b4c45586724c5627e9b6a667c23", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f56e8b4c45586724c5627e9b6a667c23"}, "created_at": 1753463697.3211432, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_FINALIZE_MSG", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f56e8b4c45586724c5627e9b6a667c23\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FINALIZE_MSG", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FINALIZE_MSG", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_REJECTED_MSG.210e239eb5": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_REJECTED_MSG", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_78a957b131fb84bf49f2ab95aa795760.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_REJECTED_MSG.210e239eb5", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_REJECTED_MSG"], "alias": "fact_transactions_REJECTED_MSG", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_78a957b131fb84bf49f2ab95aa795760", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_78a957b131fb84bf49f2ab95aa795760"}, "created_at": 1753463697.3255305, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_REJECTED_MSG", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_78a957b131fb84bf49f2ab95aa795760\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REJECTED_MSG", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "REJECTED_MSG", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TRANSITION_COUNT.6539e193ba": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TRANSITION_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d0a17f7d6ae7cfccb4d627a075b62221.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TRANSITION_COUNT.6539e193ba", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TRANSITION_COUNT"], "alias": "fact_transactions_TRANSITION_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d0a17f7d6ae7cfccb4d627a075b62221", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d0a17f7d6ae7cfccb4d627a075b62221"}, "created_at": 1753463697.3291113, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_TRANSITION_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d0a17f7d6ae7cfccb4d627a075b62221\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_COUNT", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TRANSITION_COUNT", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_RAW.2a9f593582": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_RAW", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_0280c916117c0ad47656d91cbb7ce22c.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_RAW.2a9f593582", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_RAW"], "alias": "fact_transactions_FEE_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0280c916117c0ad47656d91cbb7ce22c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0280c916117c0ad47656d91cbb7ce22c"}, "created_at": 1753463697.3329926, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_FEE_RAW", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0280c916117c0ad47656d91cbb7ce22c\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FEE_RAW", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FEE_RAW", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE"], "alias": "fact_transactions_FEE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452"}, "created_at": 1753463697.3366344, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_FEE", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_983f1d101abb3ecab99683bd42674452\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FEE", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_PAYER.2d86608e80": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_PAYER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_617a89679071e0363d8065d82c761f38.sql", "original_file_path": "models/gold/core/core__fact_transactions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_PAYER.2d86608e80", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_PAYER"], "alias": "fact_transactions_FEE_PAYER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_617a89679071e0363d8065d82c761f38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_617a89679071e0363d8065d82c761f38"}, "created_at": 1753463697.3404565, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transactions_FEE_PAYER", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_617a89679071e0363d8065d82c761f38\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FEE_PAYER", "file_key_name": "models.core__fact_transactions", "attached_node": "model.aleo_models.core__fact_transactions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FEE_PAYER", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_ID.4fe2c20e20": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b91bc4ff2b47e413c2ae941330848eaf.sql", "original_file_path": "models/gold/core/core__dim_programs.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_ID.4fe2c20e20", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_ID"], "alias": "dim_programs_DEPLOYMENT_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b91bc4ff2b47e413c2ae941330848eaf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b91bc4ff2b47e413c2ae941330848eaf"}, "created_at": 1753463697.347752, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_programs_DEPLOYMENT_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b91bc4ff2b47e413c2ae941330848eaf\") }}", "language": "sql", "refs": [{"name": "core__dim_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEPLOYMENT_BLOCK_ID", "file_key_name": "models.core__dim_programs", "attached_node": "model.aleo_models.core__dim_programs", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DEPLOYMENT_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_programs')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_TIMESTAMP.5bfe8d93a4": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3b33d0175c1258b8be6e4e7f9025c68c.sql", "original_file_path": "models/gold/core/core__dim_programs.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_TIMESTAMP.5bfe8d93a4", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_TIMESTAMP"], "alias": "dim_programs_DEPLOYMENT_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3b33d0175c1258b8be6e4e7f9025c68c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3b33d0175c1258b8be6e4e7f9025c68c"}, "created_at": 1753463697.3514338, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_programs_DEPLOYMENT_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3b33d0175c1258b8be6e4e7f9025c68c\") }}", "language": "sql", "refs": [{"name": "core__dim_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEPLOYMENT_BLOCK_TIMESTAMP", "file_key_name": "models.core__dim_programs", "attached_node": "model.aleo_models.core__dim_programs", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DEPLOYMENT_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_programs')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM_ID.d7959096fa": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a3f08317166d248b13eb0d13f7ac911a.sql", "original_file_path": "models/gold/core/core__dim_programs.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM_ID.d7959096fa", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM_ID"], "alias": "dim_programs_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a3f08317166d248b13eb0d13f7ac911a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a3f08317166d248b13eb0d13f7ac911a"}, "created_at": 1753463697.3552475, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_programs_PROGRAM_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a3f08317166d248b13eb0d13f7ac911a\") }}", "language": "sql", "refs": [{"name": "core__dim_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.core__dim_programs", "attached_node": "model.aleo_models.core__dim_programs", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__dim_programs')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_EDITION.2709d9ec21": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_programs_EDITION", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ded781b7e82bfa5678f04374bc37817d.sql", "original_file_path": "models/gold/core/core__dim_programs.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_EDITION.2709d9ec21", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_programs_EDITION"], "alias": "dim_programs_EDITION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ded781b7e82bfa5678f04374bc37817d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ded781b7e82bfa5678f04374bc37817d"}, "created_at": 1753463697.3588622, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_programs_EDITION", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ded781b7e82bfa5678f04374bc37817d\") }}", "language": "sql", "refs": [{"name": "core__dim_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EDITION", "file_key_name": "models.core__dim_programs", "attached_node": "model.aleo_models.core__dim_programs", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "EDITION", "model": "{{ get_where_subquery(ref('core__dim_programs')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM.70cc7c152e": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b56c94e92bc678f24ae6120f1964f2f8.sql", "original_file_path": "models/gold/core/core__dim_programs.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM.70cc7c152e", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM"], "alias": "dim_programs_PROGRAM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b56c94e92bc678f24ae6120f1964f2f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b56c94e92bc678f24ae6120f1964f2f8"}, "created_at": 1753463697.362741, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_programs_PROGRAM", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b56c94e92bc678f24ae6120f1964f2f8\") }}", "language": "sql", "refs": [{"name": "core__dim_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM", "file_key_name": "models.core__dim_programs", "attached_node": "model.aleo_models.core__dim_programs", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM", "model": "{{ get_where_subquery(ref('core__dim_programs')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_VERIFYING_KEYS.17d8e54386": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__dim_programs_VERIFYING_KEYS", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_e4c223e5c4dd088987ec3bc8a39cf447.sql", "original_file_path": "models/gold/core/core__dim_programs.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_VERIFYING_KEYS.17d8e54386", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__dim_programs_VERIFYING_KEYS"], "alias": "dim_programs_VERIFYING_KEYS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4c223e5c4dd088987ec3bc8a39cf447", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_e4c223e5c4dd088987ec3bc8a39cf447"}, "created_at": 1753463697.3663938, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.dim_programs_VERIFYING_KEYS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4c223e5c4dd088987ec3bc8a39cf447\") }}", "language": "sql", "refs": [{"name": "core__dim_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__dim_programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "VERIFYING_KEYS", "file_key_name": "models.core__dim_programs", "attached_node": "model.aleo_models.core__dim_programs", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VERIFYING_KEYS", "model": "{{ get_where_subquery(ref('core__dim_programs')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_ID.4dc5d2b080": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_0721cfeb19b43dde92e814ca0f47b351.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_ID.4dc5d2b080", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_ID"], "alias": "fact_transitions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0721cfeb19b43dde92e814ca0f47b351", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0721cfeb19b43dde92e814ca0f47b351"}, "created_at": 1753463697.3730676, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transitions_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0721cfeb19b43dde92e814ca0f47b351\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_TIMESTAMP.5d5ee056a0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_6415f6843dcbf95a1a02d6b7ca7ee3b8.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_TIMESTAMP.5d5ee056a0", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_TIMESTAMP"], "alias": "fact_transitions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6415f6843dcbf95a1a02d6b7ca7ee3b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_6415f6843dcbf95a1a02d6b7ca7ee3b8"}, "created_at": 1753463697.3769152, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transitions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6415f6843dcbf95a1a02d6b7ca7ee3b8\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transitions_BLOCK_TIMESTAMP__day__1.8de7cb7750": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transitions_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_cebb1d697f1603db98e62648aa8ec433.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transitions_BLOCK_TIMESTAMP__day__1.8de7cb7750", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transitions_BLOCK_TIMESTAMP__day__1"], "alias": "fact_transitions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cebb1d697f1603db98e62648aa8ec433", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cebb1d697f1603db98e62648aa8ec433"}, "created_at": 1753463697.3805513, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_transitions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cebb1d697f1603db98e62648aa8ec433\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TX_ID.ed3d7d2fc4": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transitions_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_fbdeacf96cb4e4a2e0d893317e886508.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TX_ID.ed3d7d2fc4", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transitions_TX_ID"], "alias": "fact_transitions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fbdeacf96cb4e4a2e0d893317e886508", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_fbdeacf96cb4e4a2e0d893317e886508"}, "created_at": 1753463697.3861775, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transitions_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fbdeacf96cb4e4a2e0d893317e886508\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INDEX.bed4108c73": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transitions_INDEX", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_f0951c41ba716373bb3b61932d6a4101.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INDEX.bed4108c73", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transitions_INDEX"], "alias": "fact_transitions_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f0951c41ba716373bb3b61932d6a4101", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f0951c41ba716373bb3b61932d6a4101"}, "created_at": 1753463697.390014, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transitions_INDEX", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f0951c41ba716373bb3b61932d6a4101\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INDEX", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TRANSITION_ID.88d41f74b0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transitions_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_45e40a51c860e479cafd5ce9d37f1e9d.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TRANSITION_ID.88d41f74b0", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transitions_TRANSITION_ID"], "alias": "fact_transitions_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_45e40a51c860e479cafd5ce9d37f1e9d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_45e40a51c860e479cafd5ce9d37f1e9d"}, "created_at": 1753463697.3936715, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transitions_TRANSITION_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_45e40a51c860e479cafd5ce9d37f1e9d\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_PROGRAM_ID.fff8434ef2": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transitions_PROGRAM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_4bf82790b318741bd97f38a2c2e86de1.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_PROGRAM_ID.fff8434ef2", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transitions_PROGRAM_ID"], "alias": "fact_transitions_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4bf82790b318741bd97f38a2c2e86de1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_4bf82790b318741bd97f38a2c2e86de1"}, "created_at": 1753463697.3974998, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transitions_PROGRAM_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4bf82790b318741bd97f38a2c2e86de1\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_FUNCTION.304c84273d": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transitions_FUNCTION", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_9201b6d54adddf3c3cad1a61016bc373.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_FUNCTION.304c84273d", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transitions_FUNCTION"], "alias": "fact_transitions_FUNCTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9201b6d54adddf3c3cad1a61016bc373", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_9201b6d54adddf3c3cad1a61016bc373"}, "created_at": 1753463697.4011343, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transitions_FUNCTION", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9201b6d54adddf3c3cad1a61016bc373\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FUNCTION", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FUNCTION", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INPUTS.0097435c46": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transitions_INPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_f05dca5e4592484d9c6e5e75cb216887.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INPUTS.0097435c46", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transitions_INPUTS"], "alias": "fact_transitions_INPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f05dca5e4592484d9c6e5e75cb216887", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f05dca5e4592484d9c6e5e75cb216887"}, "created_at": 1753463697.4049795, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transitions_INPUTS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f05dca5e4592484d9c6e5e75cb216887\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INPUTS", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "INPUTS", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_OUTPUTS.473e6ec1d0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_transitions_OUTPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_0cf1f0b1060a72aaef737774222c7b05.sql", "original_file_path": "models/gold/core/core__fact_transitions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_OUTPUTS.473e6ec1d0", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_transitions_OUTPUTS"], "alias": "fact_transitions_OUTPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0cf1f0b1060a72aaef737774222c7b05", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0cf1f0b1060a72aaef737774222c7b05"}, "created_at": 1753463697.4086134, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_transitions_OUTPUTS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0cf1f0b1060a72aaef737774222c7b05\") }}", "language": "sql", "refs": [{"name": "core__fact_transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "OUTPUTS", "file_key_name": "models.core__fact_transitions", "attached_node": "model.aleo_models.core__fact_transitions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "OUTPUTS", "model": "{{ get_where_subquery(ref('core__fact_transitions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_ID.0a9ca47434": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_545ccd84355d62c6b8dc7d2afd07b744.sql", "original_file_path": "models/gold/core/core__fact_block_round_batches.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_ID.0a9ca47434", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_ID"], "alias": "fact_block_round_batches_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_545ccd84355d62c6b8dc7d2afd07b744", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_545ccd84355d62c6b8dc7d2afd07b744"}, "created_at": 1753463697.4155703, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_round_batches_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_545ccd84355d62c6b8dc7d2afd07b744\") }}", "language": "sql", "refs": [{"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_block_round_batches", "attached_node": "model.aleo_models.core__fact_block_round_batches", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_block_round_batches')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_TIMESTAMP.40e237b77b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_272154faf141b0e0a6f180ff4eb590ab.sql", "original_file_path": "models/gold/core/core__fact_block_round_batches.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_TIMESTAMP.40e237b77b", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_TIMESTAMP"], "alias": "fact_block_round_batches_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_272154faf141b0e0a6f180ff4eb590ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_272154faf141b0e0a6f180ff4eb590ab"}, "created_at": 1753463697.4193766, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_round_batches_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_272154faf141b0e0a6f180ff4eb590ab\") }}", "language": "sql", "refs": [{"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_block_round_batches", "attached_node": "model.aleo_models.core__fact_block_round_batches", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_block_round_batches')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_round_batches_BLOCK_TIMESTAMP__day__1.e07b524c9d": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_round_batches_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_1431cbf1cf6cbbfda9b1f22ccf013e12.sql", "original_file_path": "models/gold/core/core__fact_block_round_batches.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_round_batches_BLOCK_TIMESTAMP__day__1.e07b524c9d", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_round_batches_BLOCK_TIMESTAMP__day__1"], "alias": "fact_block_round_batches_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_1431cbf1cf6cbbfda9b1f22ccf013e12", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_1431cbf1cf6cbbfda9b1f22ccf013e12"}, "created_at": 1753463697.422995, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_block_round_batches_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_1431cbf1cf6cbbfda9b1f22ccf013e12\") }}", "language": "sql", "refs": [{"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_block_round_batches", "attached_node": "model.aleo_models.core__fact_block_round_batches", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_block_round_batches')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_ROUND.792262cac5": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_ROUND", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ddf18e848fe235de58c7560e8a069411.sql", "original_file_path": "models/gold/core/core__fact_block_round_batches.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_ROUND.792262cac5", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_ROUND"], "alias": "fact_block_round_batches_ROUND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ddf18e848fe235de58c7560e8a069411", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ddf18e848fe235de58c7560e8a069411"}, "created_at": 1753463697.4285815, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_round_batches_ROUND", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ddf18e848fe235de58c7560e8a069411\") }}", "language": "sql", "refs": [{"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROUND", "file_key_name": "models.core__fact_block_round_batches", "attached_node": "model.aleo_models.core__fact_block_round_batches", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ROUND", "model": "{{ get_where_subquery(ref('core__fact_block_round_batches')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BATCH_ID.0ee6fc7975": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BATCH_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d0cbbba90e1aa56366741af152988516.sql", "original_file_path": "models/gold/core/core__fact_block_round_batches.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BATCH_ID.0ee6fc7975", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BATCH_ID"], "alias": "fact_block_round_batches_BATCH_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d0cbbba90e1aa56366741af152988516", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d0cbbba90e1aa56366741af152988516"}, "created_at": 1753463697.4323864, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_round_batches_BATCH_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d0cbbba90e1aa56366741af152988516\") }}", "language": "sql", "refs": [{"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BATCH_ID", "file_key_name": "models.core__fact_block_round_batches", "attached_node": "model.aleo_models.core__fact_block_round_batches", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BATCH_ID", "model": "{{ get_where_subquery(ref('core__fact_block_round_batches')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_AUTHOR.c78428dd2c": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_AUTHOR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_342cc264bd0659c68c0ae3ca2729a124.sql", "original_file_path": "models/gold/core/core__fact_block_round_batches.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_AUTHOR.c78428dd2c", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_AUTHOR"], "alias": "fact_block_round_batches_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_342cc264bd0659c68c0ae3ca2729a124", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_342cc264bd0659c68c0ae3ca2729a124"}, "created_at": 1753463697.436015, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_round_batches_AUTHOR", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_342cc264bd0659c68c0ae3ca2729a124\") }}", "language": "sql", "refs": [{"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AUTHOR", "file_key_name": "models.core__fact_block_round_batches", "attached_node": "model.aleo_models.core__fact_block_round_batches", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "AUTHOR", "model": "{{ get_where_subquery(ref('core__fact_block_round_batches')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_COMMITTEE_ID.e43b6d6933": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_COMMITTEE_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_de2a7e89b3e2d1c0dc8b79b79bd7991c.sql", "original_file_path": "models/gold/core/core__fact_block_round_batches.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_COMMITTEE_ID.e43b6d6933", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_COMMITTEE_ID"], "alias": "fact_block_round_batches_COMMITTEE_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_de2a7e89b3e2d1c0dc8b79b79bd7991c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_de2a7e89b3e2d1c0dc8b79b79bd7991c"}, "created_at": 1753463697.4398484, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_round_batches_COMMITTEE_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_de2a7e89b3e2d1c0dc8b79b79bd7991c\") }}", "language": "sql", "refs": [{"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMMITTEE_ID", "file_key_name": "models.core__fact_block_round_batches", "attached_node": "model.aleo_models.core__fact_block_round_batches", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "COMMITTEE_ID", "model": "{{ get_where_subquery(ref('core__fact_block_round_batches')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_TRANSMISSION_IDS.73a1a1b8d4": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_core", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_TRANSMISSION_IDS", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_cd63c45861cb6c2b9463f446374057f9.sql", "original_file_path": "models/gold/core/core__fact_block_round_batches.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_TRANSMISSION_IDS.73a1a1b8d4", "fqn": ["aleo_models", "gold", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_TRANSMISSION_IDS"], "alias": "fact_block_round_batches_TRANSMISSION_IDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cd63c45861cb6c2b9463f446374057f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_cd63c45861cb6c2b9463f446374057f9"}, "created_at": 1753463697.4434721, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_core.fact_block_round_batches_TRANSMISSION_IDS", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cd63c45861cb6c2b9463f446374057f9\") }}", "language": "sql", "refs": [{"name": "core__fact_block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.core__fact_block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSMISSION_IDS", "file_key_name": "models.core__fact_block_round_batches", "attached_node": "model.aleo_models.core__fact_block_round_batches", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TRANSMISSION_IDS", "model": "{{ get_where_subquery(ref('core__fact_block_round_batches')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.d3d9a20445": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_8f199d8a032a63019c6afd656fb2bd46.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.d3d9a20445", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP"], "alias": "fact_liquidity_pool_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8f199d8a032a63019c6afd656fb2bd46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_8f199d8a032a63019c6afd656fb2bd46"}, "created_at": 1753463697.4537024, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8f199d8a032a63019c6afd656fb2bd46\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.bc87b8d16e": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.bc87b8d16e", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP"], "alias": "fact_liquidity_pool_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.4573715, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_ID.20580d4f45": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_351c49d86ac4a37cac3689965ef50dd1.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_ID.20580d4f45", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_ID"], "alias": "fact_liquidity_pool_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_351c49d86ac4a37cac3689965ef50dd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_351c49d86ac4a37cac3689965ef50dd1"}, "created_at": 1753463697.4588146, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_351c49d86ac4a37cac3689965ef50dd1\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_ID.a63b3fcc13": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_ID.a63b3fcc13", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_BLOCK_ID"], "alias": "fact_liquidity_pool_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.4626706, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TX_ID.7452491d2a": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_fd8af2bcfb16e815709a59abc17bf9a0.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TX_ID.7452491d2a", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TX_ID"], "alias": "fact_liquidity_pool_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fd8af2bcfb16e815709a59abc17bf9a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_fd8af2bcfb16e815709a59abc17bf9a0"}, "created_at": 1753463697.4640908, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fd8af2bcfb16e815709a59abc17bf9a0\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TX_ID.96aca3a8ff": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_TX_ID.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TX_ID.96aca3a8ff", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_TX_ID"], "alias": "fact_liquidity_pool_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.4677587, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_SUCCEEDED.7fc7637654": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_4ce54900c971f0c54bcbf19439e577ca.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_SUCCEEDED.7fc7637654", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_SUCCEEDED"], "alias": "fact_liquidity_pool_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4ce54900c971f0c54bcbf19439e577ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_4ce54900c971f0c54bcbf19439e577ca"}, "created_at": 1753463697.4693856, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4ce54900c971f0c54bcbf19439e577ca\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SUCCEEDED", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.accepted_values_defi__fact_liquidity_pool_actions_SUCCEEDED__True__False.2845e63de8": {"database": "ALEO", "schema": "accepted_values_defi", "name": "accepted_values_defi__fact_liquidity_pool_actions_SUCCEEDED__True__False", "resource_type": "test", "package_name": "aleo_models", "path": "accepted_values_defi__fact_liq_1211bc7a0ee7b8829116218d7977d6b1.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.accepted_values_defi__fact_liquidity_pool_actions_SUCCEEDED__True__False.2845e63de8", "fqn": ["aleo_models", "gold", "defi", "accepted_values_defi__fact_liquidity_pool_actions_SUCCEEDED__True__False"], "alias": "fact_liquidity_pool_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_defi__fact_liq_1211bc7a0ee7b8829116218d7977d6b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_defi__fact_liq_1211bc7a0ee7b8829116218d7977d6b1"}, "created_at": 1753463697.4730573, "relation_name": "ALEO.accepted_values_defi.fact_liquidity_pool_actions_SUCCEEDED", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_defi__fact_liq_1211bc7a0ee7b8829116218d7977d6b1\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SUCCEEDED", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_SUCCEEDED.debfae0b10": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_SUCCEEDED.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_SUCCEEDED.debfae0b10", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_SUCCEEDED"], "alias": "fact_liquidity_pool_actions_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.48032, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SUCCEEDED", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_ROOT_ACTION.6b8451c1d4": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_ROOT_ACTION", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_35479a49a7b07ca6442f236f8aa46dfe.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_ROOT_ACTION.6b8451c1d4", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_ROOT_ACTION"], "alias": "fact_liquidity_pool_actions_ROOT_ACTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_35479a49a7b07ca6442f236f8aa46dfe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_35479a49a7b07ca6442f236f8aa46dfe"}, "created_at": 1753463697.4817805, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_ROOT_ACTION", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_35479a49a7b07ca6442f236f8aa46dfe\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROOT_ACTION", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ROOT_ACTION", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_ROOT_ACTION.0ee8f28262": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_ROOT_ACTION", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_ROOT_ACTION.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_ROOT_ACTION.0ee8f28262", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_ROOT_ACTION"], "alias": "fact_liquidity_pool_actions_ROOT_ACTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.485412, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_ROOT_ACTION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROOT_ACTION", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROOT_ACTION", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.ed334466e8": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_53abd2ff0cf646385a92f7c9849261ee.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.ed334466e8", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION"], "alias": "fact_liquidity_pool_actions_LIQUIDITY_ACTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_53abd2ff0cf646385a92f7c9849261ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_53abd2ff0cf646385a92f7c9849261ee"}, "created_at": 1753463697.487037, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_LIQUIDITY_ACTION", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_53abd2ff0cf646385a92f7c9849261ee\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_ACTION", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LIQUIDITY_ACTION", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.cb97f5de7e": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.cb97f5de7e", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION"], "alias": "fact_liquidity_pool_actions_LIQUIDITY_ACTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.4906712, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_LIQUIDITY_ACTION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_ACTION", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_ACTION", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.f4f97ba237": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_1239276a30751d4298c888c299fa379d.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.f4f97ba237", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER"], "alias": "fact_liquidity_pool_actions_LIQUIDITY_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1239276a30751d4298c888c299fa379d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_1239276a30751d4298c888c299fa379d"}, "created_at": 1753463697.4920769, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_LIQUIDITY_PROVIDER", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1239276a30751d4298c888c299fa379d\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_PROVIDER", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LIQUIDITY_PROVIDER", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.2fbeaace44": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.2fbeaace44", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER"], "alias": "fact_liquidity_pool_actions_LIQUIDITY_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.495926, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_LIQUIDITY_PROVIDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_PROVIDER", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_PROVIDER", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_ID.20b62065f7": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_6437de657431c7054b4bbe1f689930bc.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_ID.20b62065f7", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_ID"], "alias": "fact_liquidity_pool_actions_TOKEN1_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6437de657431c7054b4bbe1f689930bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_6437de657431c7054b4bbe1f689930bc"}, "created_at": 1753463697.4973373, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_TOKEN1_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6437de657431c7054b4bbe1f689930bc\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN1_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN1_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_ID.79eaeab93d": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_TOKEN1_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_TOKEN1_ID.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_ID.79eaeab93d", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_TOKEN1_ID"], "alias": "fact_liquidity_pool_actions_TOKEN1_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5010023, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_TOKEN1_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN1_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.f12d3712c8": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_c506b38d0ad7b4aecfc3d3b1f9bf0feb.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.f12d3712c8", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL"], "alias": "fact_liquidity_pool_actions_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c506b38d0ad7b4aecfc3d3b1f9bf0feb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_c506b38d0ad7b4aecfc3d3b1f9bf0feb"}, "created_at": 1753463697.5030832, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_TOKEN1_SYMBOL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c506b38d0ad7b4aecfc3d3b1f9bf0feb\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.3f10a13478": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.3f10a13478", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL"], "alias": "fact_liquidity_pool_actions_TOKEN1_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5067022, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_TOKEN1_SYMBOL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN1_SYMBOL", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_SYMBOL", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.577fe366a9": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b9aacbeba33c96aeba1ea4627e1a011a.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.577fe366a9", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ"], "alias": "fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b9aacbeba33c96aeba1ea4627e1a011a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b9aacbeba33c96aeba1ea4627e1a011a"}, "created_at": 1753463697.508106, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b9aacbeba33c96aeba1ea4627e1a011a\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN1_AMOUNT_UNADJ", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN1_AMOUNT_UNADJ", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.0cfbe2f5f3": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.0cfbe2f5f3", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ"], "alias": "fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.512059, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN1_AMOUNT_UNADJ", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_AMOUNT_UNADJ", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.871c5bd4d6": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_9be00764e7821530da107d259ee057e7.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.871c5bd4d6", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT"], "alias": "fact_liquidity_pool_actions_TOKEN1_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9be00764e7821530da107d259ee057e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_9be00764e7821530da107d259ee057e7"}, "created_at": 1753463697.5135255, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_TOKEN1_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9be00764e7821530da107d259ee057e7\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN1_AMOUNT", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN1_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.363b26c8b1": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.363b26c8b1", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT"], "alias": "fact_liquidity_pool_actions_TOKEN1_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5172193, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_TOKEN1_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN1_AMOUNT", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN1_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_ID.ce9f959adf": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_483cf466267043ccf82c036998306374.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_ID.ce9f959adf", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_ID"], "alias": "fact_liquidity_pool_actions_TOKEN2_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_483cf466267043ccf82c036998306374", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_483cf466267043ccf82c036998306374"}, "created_at": 1753463697.5189102, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_TOKEN2_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_483cf466267043ccf82c036998306374\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN2_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN2_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_ID.a4379c4ba5": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_TOKEN2_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_TOKEN2_ID.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_ID.a4379c4ba5", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_TOKEN2_ID"], "alias": "fact_liquidity_pool_actions_TOKEN2_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5226495, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_TOKEN2_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN2_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN2_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.fc64ae06cf": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_cac29d006c5bbea0130e9694aa565fd3.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.fc64ae06cf", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL"], "alias": "fact_liquidity_pool_actions_TOKEN2_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cac29d006c5bbea0130e9694aa565fd3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_cac29d006c5bbea0130e9694aa565fd3"}, "created_at": 1753463697.5240734, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_TOKEN2_SYMBOL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cac29d006c5bbea0130e9694aa565fd3\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN2_SYMBOL", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN2_SYMBOL", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.bd3c630c8c": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.bd3c630c8c", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL"], "alias": "fact_liquidity_pool_actions_TOKEN2_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5279326, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_TOKEN2_SYMBOL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN2_SYMBOL", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN2_SYMBOL", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.8dacf5d1d0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_e73c5f33c39162e4ad771f1fadaba209.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.8dacf5d1d0", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ"], "alias": "fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e73c5f33c39162e4ad771f1fadaba209", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_e73c5f33c39162e4ad771f1fadaba209"}, "created_at": 1753463697.5293522, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e73c5f33c39162e4ad771f1fadaba209\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN2_AMOUNT_UNADJ", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN2_AMOUNT_UNADJ", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.00a3c4c0da": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.00a3c4c0da", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ"], "alias": "fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5330098, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN2_AMOUNT_UNADJ", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN2_AMOUNT_UNADJ", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.3e1ee01fe5": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_86069b2c1f8509855d8613ce38d7fefb.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.3e1ee01fe5", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT"], "alias": "fact_liquidity_pool_actions_TOKEN2_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_86069b2c1f8509855d8613ce38d7fefb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_86069b2c1f8509855d8613ce38d7fefb"}, "created_at": 1753463697.534653, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_TOKEN2_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_86069b2c1f8509855d8613ce38d7fefb\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN2_AMOUNT", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TOKEN2_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.2d8079e808": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.2d8079e808", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT"], "alias": "fact_liquidity_pool_actions_TOKEN2_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.538305, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_TOKEN2_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN2_AMOUNT", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN2_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.cca0bcbfac": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3cf5834852f89053771c49228fad5b10.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.cca0bcbfac", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL"], "alias": "fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3cf5834852f89053771c49228fad5b10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3cf5834852f89053771c49228fad5b10"}, "created_at": 1753463697.539735, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3cf5834852f89053771c49228fad5b10\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_POOL_PROTOCOL", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LIQUIDITY_POOL_PROTOCOL", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.a45c6618da": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity__914d5d13ffda82445e89b33fe71d9ce0.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.a45c6618da", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL"], "alias": "fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_defi__fact_liquidity__914d5d13ffda82445e89b33fe71d9ce0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_defi__fact_liquidity__914d5d13ffda82445e89b33fe71d9ce0"}, "created_at": 1753463697.5436618, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_defi__fact_liquidity__914d5d13ffda82445e89b33fe71d9ce0\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "LIQUIDITY_POOL_PROTOCOL", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_POOL_PROTOCOL", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.unique_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.5554831fc3": {"database": "ALEO", "schema": "unique_defi", "name": "unique_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_defi__fact_liquidity_po_0e11bf591aef4f3fd500071a6d61b5c1.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.unique_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.5554831fc3", "fqn": ["aleo_models", "gold", "defi", "unique_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID"], "alias": "fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_defi__fact_liquidity_po_0e11bf591aef4f3fd500071a6d61b5c1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_defi__fact_liquidity_po_0e11bf591aef4f3fd500071a6d61b5c1"}, "created_at": 1753463697.545092, "relation_name": "ALEO.unique_defi.fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_defi__fact_liquidity_po_0e11bf591aef4f3fd500071a6d61b5c1\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_LIQUIDITY_POOL_ACTIONS_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_LIQUIDITY_POOL_ACTIONS_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.14dea1b963": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity__01f0a65db5ba2e4b762e4a9c2308132e.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.14dea1b963", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID"], "alias": "fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_defi__fact_liquidity__01f0a65db5ba2e4b762e4a9c2308132e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_defi__fact_liquidity__01f0a65db5ba2e4b762e4a9c2308132e"}, "created_at": 1753463697.5465198, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_defi__fact_liquidity__01f0a65db5ba2e4b762e4a9c2308132e\") }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_LIQUIDITY_POOL_ACTIONS_ID", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_LIQUIDITY_POOL_ACTIONS_ID", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_INSERTED_TIMESTAMP.724ca84c98": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_INSERTED_TIMESTAMP.724ca84c98", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_INSERTED_TIMESTAMP"], "alias": "fact_liquidity_pool_actions_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5479317, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_MODIFIED_TIMESTAMP.665736575b": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_liquidity_pool_actions_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_liquidity_pool_actions_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_liquidity_pool_actions.yml", "unique_id": "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_MODIFIED_TIMESTAMP.665736575b", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_liquidity_pool_actions_MODIFIED_TIMESTAMP"], "alias": "fact_liquidity_pool_actions_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5493464, "relation_name": "ALEO.not_null_defi.fact_liquidity_pool_actions_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_liquidity_pool_actions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_liquidity_pool_actions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.defi__fact_liquidity_pool_actions", "attached_node": "model.aleo_models.defi__fact_liquidity_pool_actions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_liquidity_pool_actions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_TIMESTAMP.12d6b07914": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_15629e7d57e4de2592bd7b51559ef93c.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_TIMESTAMP.12d6b07914", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_TIMESTAMP"], "alias": "fact_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_15629e7d57e4de2592bd7b51559ef93c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_15629e7d57e4de2592bd7b51559ef93c"}, "created_at": 1753463697.5563443, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_15629e7d57e4de2592bd7b51559ef93c\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_BLOCK_TIMESTAMP"], "alias": "fact_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5601869, "relation_name": "ALEO.not_null_defi.fact_swaps_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_ID.a78a351c3d": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ee3cd2086fc4c4887e31f863c60bb89d.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_ID.a78a351c3d", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_ID"], "alias": "fact_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ee3cd2086fc4c4887e31f863c60bb89d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ee3cd2086fc4c4887e31f863c60bb89d"}, "created_at": 1753463697.5616376, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ee3cd2086fc4c4887e31f863c60bb89d\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_BLOCK_ID.e151cc187f": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_BLOCK_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_BLOCK_ID.e151cc187f", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_BLOCK_ID"], "alias": "fact_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5652668, "relation_name": "ALEO.not_null_defi.fact_swaps_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TX_ID.67830b42e0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TX_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TX_ID.67830b42e0", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TX_ID"], "alias": "fact_swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.566703, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_TX_ID.84d994da53": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_TX_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_TX_ID.84d994da53", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_TX_ID"], "alias": "fact_swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.570314, "relation_name": "ALEO.not_null_defi.fact_swaps_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SUCCEEDED.f0f33f4970": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_de71afb075dfc1415235849b02acee2c.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SUCCEEDED.f0f33f4970", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_SUCCEEDED"], "alias": "fact_swaps_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_de71afb075dfc1415235849b02acee2c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_de71afb075dfc1415235849b02acee2c"}, "created_at": 1753463697.5717585, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_de71afb075dfc1415235849b02acee2c\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SUCCEEDED", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.accepted_values_defi__fact_swaps_SUCCEEDED__True__False.d58188a7bb": {"database": "ALEO", "schema": "accepted_values_defi", "name": "accepted_values_defi__fact_swaps_SUCCEEDED__True__False", "resource_type": "test", "package_name": "aleo_models", "path": "accepted_values_defi__fact_swaps_SUCCEEDED__True__False.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.accepted_values_defi__fact_swaps_SUCCEEDED__True__False.d58188a7bb", "fqn": ["aleo_models", "gold", "defi", "accepted_values_defi__fact_swaps_SUCCEEDED__True__False"], "alias": "fact_swaps_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5754142, "relation_name": "ALEO.accepted_values_defi.fact_swaps_SUCCEEDED", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SUCCEEDED", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [true, false], "column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.not_null_defi__fact_swaps_SUCCEEDED.b960e174a2": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_SUCCEEDED.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_SUCCEEDED.b960e174a2", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_SUCCEEDED"], "alias": "fact_swaps_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.579235, "relation_name": "ALEO.not_null_defi.fact_swaps_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SUCCEEDED", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SWAPPER.9a749d86f0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_SWAPPER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_05a93fd33da511048f8f39419d8fc179.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SWAPPER.9a749d86f0", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_SWAPPER"], "alias": "fact_swaps_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_05a93fd33da511048f8f39419d8fc179", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_05a93fd33da511048f8f39419d8fc179"}, "created_at": 1753463697.5806801, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_SWAPPER", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_05a93fd33da511048f8f39419d8fc179\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAPPER", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_SWAPPER.a8497d4cd6": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_SWAPPER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_SWAPPER.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_SWAPPER.a8497d4cd6", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_SWAPPER"], "alias": "fact_swaps_SWAPPER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5845, "relation_name": "ALEO.not_null_defi.fact_swaps_SWAPPER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SWAPPER", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAPPER", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT_UNADJ.0d34c88cec": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT_UNADJ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_00df4a2502a34f2e3981346082dc8d72.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT_UNADJ.0d34c88cec", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT_UNADJ"], "alias": "fact_swaps_FROM_AMOUNT_UNADJ", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_00df4a2502a34f2e3981346082dc8d72", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_00df4a2502a34f2e3981346082dc8d72"}, "created_at": 1753463697.5859365, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_FROM_AMOUNT_UNADJ", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_00df4a2502a34f2e3981346082dc8d72\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_AMOUNT_UNADJ", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FROM_AMOUNT_UNADJ", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT_UNADJ.5b2b90a289": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_FROM_AMOUNT_UNADJ", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_FROM_AMOUNT_UNADJ.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT_UNADJ.5b2b90a289", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_FROM_AMOUNT_UNADJ"], "alias": "fact_swaps_FROM_AMOUNT_UNADJ", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5895596, "relation_name": "ALEO.not_null_defi.fact_swaps_FROM_AMOUNT_UNADJ", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_AMOUNT_UNADJ", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMOUNT_UNADJ", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT.41696d7b42": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_14077c31d9e4dfbf0d88a9a90dd2af77.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT.41696d7b42", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT"], "alias": "fact_swaps_FROM_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_14077c31d9e4dfbf0d88a9a90dd2af77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_14077c31d9e4dfbf0d88a9a90dd2af77"}, "created_at": 1753463697.5909643, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_FROM_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_14077c31d9e4dfbf0d88a9a90dd2af77\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_AMOUNT", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FROM_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT.4363eb7533": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_FROM_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_FROM_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT.4363eb7533", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_FROM_AMOUNT"], "alias": "fact_swaps_FROM_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.5947428, "relation_name": "ALEO.not_null_defi.fact_swaps_FROM_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_AMOUNT", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_SYMBOL.ca24fe91ae": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_6049643e015a84a1813c716a712c257d.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_SYMBOL.ca24fe91ae", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_SYMBOL"], "alias": "fact_swaps_FROM_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6049643e015a84a1813c716a712c257d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_6049643e015a84a1813c716a712c257d"}, "created_at": 1753463697.5961442, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_FROM_SYMBOL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6049643e015a84a1813c716a712c257d\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_SYMBOL", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FROM_SYMBOL", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_FROM_SYMBOL.3d70a0a69b": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_FROM_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_FROM_SYMBOL.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_FROM_SYMBOL.3d70a0a69b", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_FROM_SYMBOL"], "alias": "fact_swaps_FROM_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6003206, "relation_name": "ALEO.not_null_defi.fact_swaps_FROM_SYMBOL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_SYMBOL", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_SYMBOL", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_ID.4527f01191": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_57a5549637293e6bc920c8cf0f82bf50.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_ID.4527f01191", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_ID"], "alias": "fact_swaps_FROM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57a5549637293e6bc920c8cf0f82bf50", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_57a5549637293e6bc920c8cf0f82bf50"}, "created_at": 1753463697.60175, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_FROM_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57a5549637293e6bc920c8cf0f82bf50\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FROM_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_FROM_ID.9d9142108f": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_FROM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_FROM_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_FROM_ID.9d9142108f", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_FROM_ID"], "alias": "fact_swaps_FROM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.605364, "relation_name": "ALEO.not_null_defi.fact_swaps_FROM_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FROM_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT_UNADJ.81b2f0514e": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT_UNADJ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_fb855c41164f7101dd8f47dd6f801368.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT_UNADJ.81b2f0514e", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT_UNADJ"], "alias": "fact_swaps_TO_AMOUNT_UNADJ", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fb855c41164f7101dd8f47dd6f801368", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_fb855c41164f7101dd8f47dd6f801368"}, "created_at": 1753463697.6067963, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_TO_AMOUNT_UNADJ", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fb855c41164f7101dd8f47dd6f801368\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_AMOUNT_UNADJ", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TO_AMOUNT_UNADJ", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT_UNADJ.b963eea9e5": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_TO_AMOUNT_UNADJ", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_TO_AMOUNT_UNADJ.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT_UNADJ.b963eea9e5", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_TO_AMOUNT_UNADJ"], "alias": "fact_swaps_TO_AMOUNT_UNADJ", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6105819, "relation_name": "ALEO.not_null_defi.fact_swaps_TO_AMOUNT_UNADJ", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_AMOUNT_UNADJ", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMOUNT_UNADJ", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT.daa015c5af": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a488ffa203fb2a62094923a7585eb9fb.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT.daa015c5af", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT"], "alias": "fact_swaps_TO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a488ffa203fb2a62094923a7585eb9fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a488ffa203fb2a62094923a7585eb9fb"}, "created_at": 1753463697.612003, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_TO_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a488ffa203fb2a62094923a7585eb9fb\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_AMOUNT", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TO_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT.6e0eb16794": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_TO_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_TO_AMOUNT.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT.6e0eb16794", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_TO_AMOUNT"], "alias": "fact_swaps_TO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6158352, "relation_name": "ALEO.not_null_defi.fact_swaps_TO_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_AMOUNT", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMOUNT", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_SYMBOL.6221dd7cf9": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_55f6eae43b92943362143e6af669e6a1.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_SYMBOL.6221dd7cf9", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_SYMBOL"], "alias": "fact_swaps_TO_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_55f6eae43b92943362143e6af669e6a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_55f6eae43b92943362143e6af669e6a1"}, "created_at": 1753463697.6172574, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_TO_SYMBOL", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_55f6eae43b92943362143e6af669e6a1\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_SYMBOL", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TO_SYMBOL", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_TO_SYMBOL.3739e95840": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_TO_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_TO_SYMBOL.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_TO_SYMBOL.3739e95840", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_TO_SYMBOL"], "alias": "fact_swaps_TO_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.620885, "relation_name": "ALEO.not_null_defi.fact_swaps_TO_SYMBOL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_SYMBOL", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_SYMBOL", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_ID.0f8c6c4f56": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_ID.0f8c6c4f56", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_ID"], "alias": "fact_swaps_TO_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6222997, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_TO_ID", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TO_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_TO_ID.c78dd0d92f": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_TO_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_TO_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_TO_ID.c78dd0d92f", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_TO_ID"], "alias": "fact_swaps_TO_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6259325, "relation_name": "ALEO.not_null_defi.fact_swaps_TO_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TO_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_ROOT_ACTION.52722e1aba": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_ROOT_ACTION", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a3cfd2a7a56f15e37801f2d142e70dbd.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_ROOT_ACTION.52722e1aba", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_ROOT_ACTION"], "alias": "fact_swaps_ROOT_ACTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a3cfd2a7a56f15e37801f2d142e70dbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a3cfd2a7a56f15e37801f2d142e70dbd"}, "created_at": 1753463697.6273508, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_ROOT_ACTION", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a3cfd2a7a56f15e37801f2d142e70dbd\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROOT_ACTION", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ROOT_ACTION", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_ROOT_ACTION.d78e8e179e": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_ROOT_ACTION", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_ROOT_ACTION.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_ROOT_ACTION.d78e8e179e", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_ROOT_ACTION"], "alias": "fact_swaps_ROOT_ACTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6309574, "relation_name": "ALEO.not_null_defi.fact_swaps_ROOT_ACTION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROOT_ACTION", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROOT_ACTION", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_PLATFORM.1b397af8a1": {"database": "ALEO", "schema": "dbt_expectations_expect_column_to_exist_defi", "name": "dbt_expectations_expect_column_to_exist_defi__fact_swaps_PLATFORM", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_66026146718fb02a15ec127adf2867d4.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_PLATFORM.1b397af8a1", "fqn": ["aleo_models", "gold", "defi", "dbt_expectations_expect_column_to_exist_defi__fact_swaps_PLATFORM"], "alias": "fact_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_66026146718fb02a15ec127adf2867d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_66026146718fb02a15ec127adf2867d4"}, "created_at": 1753463697.632589, "relation_name": "ALEO.dbt_expectations_expect_column_to_exist_defi.fact_swaps_PLATFORM", "raw_code": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_66026146718fb02a15ec127adf2867d4\") }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PLATFORM", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_defi__fact_swaps_PLATFORM.b6233329b7": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_PLATFORM", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_PLATFORM.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_PLATFORM.b6233329b7", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_PLATFORM"], "alias": "fact_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6362271, "relation_name": "ALEO.not_null_defi.fact_swaps_PLATFORM", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PLATFORM", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647": {"database": "ALEO", "schema": "unique_defi", "name": "unique_defi__fact_swaps_FACT_SWAPS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_defi__fact_swaps_FACT_SWAPS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647", "fqn": ["aleo_models", "gold", "defi", "unique_defi__fact_swaps_FACT_SWAPS_ID"], "alias": "fact_swaps_FACT_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6376588, "relation_name": "ALEO.unique_defi.fact_swaps_FACT_SWAPS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SWAPS_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SWAPS_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.not_null_defi__fact_swaps_FACT_SWAPS_ID.cdd2d36e98": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_FACT_SWAPS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_FACT_SWAPS_ID.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_FACT_SWAPS_ID.cdd2d36e98", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_FACT_SWAPS_ID"], "alias": "fact_swaps_FACT_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6390743, "relation_name": "ALEO.not_null_defi.fact_swaps_FACT_SWAPS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_SWAPS_ID", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_SWAPS_ID", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.not_null_defi__fact_swaps_INSERTED_TIMESTAMP.c931848598": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_INSERTED_TIMESTAMP.c931848598", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_INSERTED_TIMESTAMP"], "alias": "fact_swaps_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6406963, "relation_name": "ALEO.not_null_defi.fact_swaps_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.not_null_defi__fact_swaps_MODIFIED_TIMESTAMP.d083b26328": {"database": "ALEO", "schema": "not_null_defi", "name": "not_null_defi__fact_swaps_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_defi__fact_swaps_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/defi/defi__fact_swaps.yml", "unique_id": "test.aleo_models.not_null_defi__fact_swaps_MODIFIED_TIMESTAMP.d083b26328", "fqn": ["aleo_models", "gold", "defi", "not_null_defi__fact_swaps_MODIFIED_TIMESTAMP"], "alias": "fact_swaps_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6421204, "relation_name": "ALEO.not_null_defi.fact_swaps_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__fact_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.defi__fact_swaps"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.defi__fact_swaps", "attached_node": "model.aleo_models.defi__fact_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__fact_swaps')) }}"}, "namespace": null}}, "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.c43366f375": {"database": "ALEO", "schema": "not_null_stats", "name": "not_null_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.c43366f375", "fqn": ["aleo_models", "gold", "stats", "not_null_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR"], "alias": "ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6483471, "relation_name": "ALEO.not_null_stats.ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP_HOUR", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP_HOUR", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.69de9bb1e9": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a1bfc45dd1ed4e15c0e6ff8dd6248672.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.69de9bb1e9", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ"], "alias": "ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a1bfc45dd1ed4e15c0e6ff8dd6248672", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a1bfc45dd1ed4e15c0e6ff8dd6248672"}, "created_at": 1753463697.64982, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_stats.ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a1bfc45dd1ed4e15c0e6ff8dd6248672\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP_HOUR", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_LTZ", "TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP_HOUR", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MIN.cb99895dd8": {"database": "ALEO", "schema": "not_null_stats", "name": "not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MIN", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MIN.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MIN.cb99895dd8", "fqn": ["aleo_models", "gold", "stats", "not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MIN"], "alias": "ez_core_metrics_hourly_BLOCK_ID_MIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6539826, "relation_name": "ALEO.not_null_stats.ez_core_metrics_hourly_BLOCK_ID_MIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID_MIN", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID_MIN", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MIN__NUMBER__FLOAT.1ea9989d27": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MIN__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_cea33b08953e3cc5f03ce53165aa77e7.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MIN__NUMBER__FLOAT.1ea9989d27", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MIN__NUMBER__FLOAT"], "alias": "ez_core_metrics_hourly_BLOCK_ID_MIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cea33b08953e3cc5f03ce53165aa77e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_cea33b08953e3cc5f03ce53165aa77e7"}, "created_at": 1753463697.6554089, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_stats.ez_core_metrics_hourly_BLOCK_ID_MIN", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cea33b08953e3cc5f03ce53165aa77e7\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID_MIN", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID_MIN", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MAX.82e9a01fcf": {"database": "ALEO", "schema": "not_null_stats", "name": "not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MAX", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MAX.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MAX.82e9a01fcf", "fqn": ["aleo_models", "gold", "stats", "not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MAX"], "alias": "ez_core_metrics_hourly_BLOCK_ID_MAX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6592417, "relation_name": "ALEO.not_null_stats.ez_core_metrics_hourly_BLOCK_ID_MAX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID_MAX", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID_MAX", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MAX__NUMBER__FLOAT.c0b6bda28a": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MAX__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d556405fba391f92ff5cf2930d688dd5.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MAX__NUMBER__FLOAT.c0b6bda28a", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MAX__NUMBER__FLOAT"], "alias": "ez_core_metrics_hourly_BLOCK_ID_MAX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d556405fba391f92ff5cf2930d688dd5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d556405fba391f92ff5cf2930d688dd5"}, "created_at": 1753463697.660682, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_stats.ez_core_metrics_hourly_BLOCK_ID_MAX", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d556405fba391f92ff5cf2930d688dd5\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID_MAX", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID_MAX", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_COUNT.67c66eb706": {"database": "ALEO", "schema": "not_null_stats", "name": "not_null_stats__ez_core_metrics_hourly_BLOCK_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_stats__ez_core_metrics_hourly_BLOCK_COUNT.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_COUNT.67c66eb706", "fqn": ["aleo_models", "gold", "stats", "not_null_stats__ez_core_metrics_hourly_BLOCK_COUNT"], "alias": "ez_core_metrics_hourly_BLOCK_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6642876, "relation_name": "ALEO.not_null_stats.ez_core_metrics_hourly_BLOCK_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_COUNT", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_COUNT", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_COUNT__NUMBER__FLOAT.04a49945de": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_COUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_98629f7430a7b8ac48dd35f874e03c3d.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_COUNT__NUMBER__FLOAT.04a49945de", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_COUNT__NUMBER__FLOAT"], "alias": "ez_core_metrics_hourly_BLOCK_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_98629f7430a7b8ac48dd35f874e03c3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_98629f7430a7b8ac48dd35f874e03c3d"}, "created_at": 1753463697.6659825, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_stats.ez_core_metrics_hourly_BLOCK_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_98629f7430a7b8ac48dd35f874e03c3d\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_COUNT", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_COUNT", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT.8718680bf8": {"database": "ALEO", "schema": "not_null_stats", "name": "not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT.8718680bf8", "fqn": ["aleo_models", "gold", "stats", "not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT"], "alias": "ez_core_metrics_hourly_TRANSACTION_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6696184, "relation_name": "ALEO.not_null_stats.ez_core_metrics_hourly_TRANSACTION_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_COUNT", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.da21939902": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_4eda2655d963fd2bbd4ecc5bb78414d0.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.da21939902", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT"], "alias": "ez_core_metrics_hourly_TRANSACTION_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4eda2655d963fd2bbd4ecc5bb78414d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_4eda2655d963fd2bbd4ecc5bb78414d0"}, "created_at": 1753463697.6710382, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_stats.ez_core_metrics_hourly_TRANSACTION_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4eda2655d963fd2bbd4ecc5bb78414d0\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_COUNT", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.b5e50f7ef6": {"database": "ALEO", "schema": "not_null_stats", "name": "not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_stats__ez_core_metric_a3e30df97c64300c78c5568431e42ecb.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.b5e50f7ef6", "fqn": ["aleo_models", "gold", "stats", "not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS"], "alias": "ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stats__ez_core_metric_a3e30df97c64300c78c5568431e42ecb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stats__ez_core_metric_a3e30df97c64300c78c5568431e42ecb"}, "created_at": 1753463697.6748736, "relation_name": "ALEO.not_null_stats.ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stats__ez_core_metric_a3e30df97c64300c78c5568431e42ecb\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT_SUCCESS", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_COUNT_SUCCESS", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.1e160d8731": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d992c786a53ca72c3538a8caa517a21a.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.1e160d8731", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT"], "alias": "ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d992c786a53ca72c3538a8caa517a21a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d992c786a53ca72c3538a8caa517a21a"}, "created_at": 1753463697.6762862, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_stats.ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d992c786a53ca72c3538a8caa517a21a\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT_SUCCESS", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_COUNT_SUCCESS", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED.1e76008c62": {"database": "ALEO", "schema": "not_null_stats", "name": "not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED.1e76008c62", "fqn": ["aleo_models", "gold", "stats", "not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED"], "alias": "ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6799066, "relation_name": "ALEO.not_null_stats.ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT_FAILED", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_COUNT_FAILED", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.6291586797": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_c39e9994d35bd78824bc8b974075dfc6.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.6291586797", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT"], "alias": "ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c39e9994d35bd78824bc8b974075dfc6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_c39e9994d35bd78824bc8b974075dfc6"}, "created_at": 1753463697.6815186, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_stats.ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c39e9994d35bd78824bc8b974075dfc6\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT_FAILED", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_COUNT_FAILED", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT.4a7dab96a7": {"database": "ALEO", "schema": "not_null_stats", "name": "not_null_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT.4a7dab96a7", "fqn": ["aleo_models", "gold", "stats", "not_null_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT"], "alias": "ez_core_metrics_hourly_UNIQUE_FROM_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6851172, "relation_name": "ALEO.not_null_stats.ez_core_metrics_hourly_UNIQUE_FROM_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "UNIQUE_FROM_COUNT", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_FROM_COUNT", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.cc092ab5ee": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_63f2a441f297638309528491a3778590.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.cc092ab5ee", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT"], "alias": "ez_core_metrics_hourly_UNIQUE_FROM_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_63f2a441f297638309528491a3778590", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_63f2a441f297638309528491a3778590"}, "created_at": 1753463697.6865456, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_stats.ez_core_metrics_hourly_UNIQUE_FROM_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_63f2a441f297638309528491a3778590\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "UNIQUE_FROM_COUNT", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "UNIQUE_FROM_COUNT", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE.56d6db6fc6": {"database": "ALEO", "schema": "not_null_stats", "name": "not_null_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE.56d6db6fc6", "fqn": ["aleo_models", "gold", "stats", "not_null_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE"], "alias": "ez_core_metrics_hourly_TOTAL_FEES_NATIVE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.6903553, "relation_name": "ALEO.not_null_stats.ez_core_metrics_hourly_TOTAL_FEES_NATIVE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_FEES_NATIVE", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_FEES_NATIVE", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE__DECIMAL__FLOAT__NUMBER.b9208111a7": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE__DECIMAL__FLOAT__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_33765ef147da3bd672fc4962179da4c8.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE__DECIMAL__FLOAT__NUMBER.b9208111a7", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE__DECIMAL__FLOAT__NUMBER"], "alias": "ez_core_metrics_hourly_TOTAL_FEES_NATIVE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_33765ef147da3bd672fc4962179da4c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_33765ef147da3bd672fc4962179da4c8"}, "created_at": 1753463697.691802, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_stats.ez_core_metrics_hourly_TOTAL_FEES_NATIVE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_33765ef147da3bd672fc4962179da4c8\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_FEES_NATIVE", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["DECIMAL", "FLOAT", "NUMBER"], "column_name": "TOTAL_FEES_NATIVE", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_stats__ez_core_metrics_hourly_INSERTED_TIMESTAMP__day__1.5cba713d8f": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_stats", "name": "dbt_expectations_expect_row_values_to_have_recent_data_stats__ez_core_metrics_hourly_INSERTED_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_325be934ec1717d5147af2b71acd6bcb.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_stats__ez_core_metrics_hourly_INSERTED_TIMESTAMP__day__1.5cba713d8f", "fqn": ["aleo_models", "gold", "stats", "dbt_expectations_expect_row_values_to_have_recent_data_stats__ez_core_metrics_hourly_INSERTED_TIMESTAMP__day__1"], "alias": "ez_core_metrics_hourly_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_325be934ec1717d5147af2b71acd6bcb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_325be934ec1717d5147af2b71acd6bcb"}, "created_at": 1753463697.6958034, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_stats.ez_core_metrics_hourly_INSERTED_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_325be934ec1717d5147af2b71acd6bcb\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.f4cde92642": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_stats", "name": "dbt_utils_unique_combination_of_columns_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_b1b948c9441b2f9d6927fb712625432e.sql", "original_file_path": "models/gold/stats/stats__ez_core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.f4cde92642", "fqn": ["aleo_models", "gold", "stats", "dbt_utils_unique_combination_of_columns_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR"], "alias": "ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b1b948c9441b2f9d6927fb712625432e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b1b948c9441b2f9d6927fb712625432e"}, "created_at": 1753463697.7017465, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_stats.ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b1b948c9441b2f9d6927fb712625432e\") }}", "language": "sql", "refs": [{"name": "stats__ez_core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.stats__ez_core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stats__ez_core_metrics_hourly", "attached_node": "model.aleo_models.stats__ez_core_metrics_hourly", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_TIMESTAMP_HOUR"], "model": "{{ get_where_subquery(ref('stats__ez_core_metrics_hourly')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_ID.1af206eea3": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_ID.sql", "original_file_path": "models/gold/tests/programs/test_core__programs_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_ID.1af206eea3", "fqn": ["aleo_models", "gold", "tests", "programs", "not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_ID"], "alias": "programs_recent_DEPLOYMENT_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7071009, "relation_name": "ALEO.not_null_test_core.programs_recent_DEPLOYMENT_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__programs_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__programs_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEPLOYMENT_BLOCK_ID", "file_key_name": "models.test_core__programs_recent", "attached_node": "model.aleo_models.test_core__programs_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEPLOYMENT_BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__programs_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP.838d46a1a2": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/programs/test_core__programs_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP.838d46a1a2", "fqn": ["aleo_models", "gold", "tests", "programs", "not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP"], "alias": "programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7085588, "relation_name": "ALEO.not_null_test_core.programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__programs_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__programs_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEPLOYMENT_BLOCK_TIMESTAMP", "file_key_name": "models.test_core__programs_recent", "attached_node": "model.aleo_models.test_core__programs_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEPLOYMENT_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__programs_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__programs_recent_PROGRAM_ID.a5fad2813f": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__programs_recent_PROGRAM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__programs_recent_PROGRAM_ID.sql", "original_file_path": "models/gold/tests/programs/test_core__programs_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__programs_recent_PROGRAM_ID.a5fad2813f", "fqn": ["aleo_models", "gold", "tests", "programs", "not_null_test_core__programs_recent_PROGRAM_ID"], "alias": "programs_recent_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.709968, "relation_name": "ALEO.not_null_test_core.programs_recent_PROGRAM_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__programs_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__programs_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.test_core__programs_recent", "attached_node": "model.aleo_models.test_core__programs_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('test_core__programs_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__programs_recent_EDITION.33eec4e36a": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__programs_recent_EDITION", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__programs_recent_EDITION.sql", "original_file_path": "models/gold/tests/programs/test_core__programs_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__programs_recent_EDITION.33eec4e36a", "fqn": ["aleo_models", "gold", "tests", "programs", "not_null_test_core__programs_recent_EDITION"], "alias": "programs_recent_EDITION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.711386, "relation_name": "ALEO.not_null_test_core.programs_recent_EDITION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__programs_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__programs_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EDITION", "file_key_name": "models.test_core__programs_recent", "attached_node": "model.aleo_models.test_core__programs_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EDITION", "model": "{{ get_where_subquery(ref('test_core__programs_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__programs_recent_PROGRAM.549ff4fe35": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__programs_recent_PROGRAM", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__programs_recent_PROGRAM.sql", "original_file_path": "models/gold/tests/programs/test_core__programs_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__programs_recent_PROGRAM.549ff4fe35", "fqn": ["aleo_models", "gold", "tests", "programs", "not_null_test_core__programs_recent_PROGRAM"], "alias": "programs_recent_PROGRAM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7129953, "relation_name": "ALEO.not_null_test_core.programs_recent_PROGRAM", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__programs_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__programs_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM", "file_key_name": "models.test_core__programs_recent", "attached_node": "model.aleo_models.test_core__programs_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM", "model": "{{ get_where_subquery(ref('test_core__programs_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__programs_recent_VERIFYING_KEYS.79b5e3b4fd": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__programs_recent_VERIFYING_KEYS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__programs_recent_VERIFYING_KEYS.sql", "original_file_path": "models/gold/tests/programs/test_core__programs_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__programs_recent_VERIFYING_KEYS.79b5e3b4fd", "fqn": ["aleo_models", "gold", "tests", "programs", "not_null_test_core__programs_recent_VERIFYING_KEYS"], "alias": "programs_recent_VERIFYING_KEYS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "program_id != 'credits.aleo'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "program_id != 'credits.aleo'"}, "created_at": 1753463697.7148354, "relation_name": "ALEO.not_null_test_core.programs_recent_VERIFYING_KEYS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"program_id != 'credits.aleo'\") }}", "language": "sql", "refs": [{"name": "test_core__programs_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__programs_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "VERIFYING_KEYS", "file_key_name": "models.test_core__programs_recent", "attached_node": "model.aleo_models.test_core__programs_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VERIFYING_KEYS", "model": "{{ get_where_subquery(ref('test_core__programs_recent')) }}"}, "namespace": null}}, "test.aleo_models.unique_test_core__blocks_recent_BLOCK_ID.c26b6eacc3": {"database": "ALEO", "schema": "unique_test_core", "name": "unique_test_core__blocks_recent_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_test_core__blocks_recent_BLOCK_ID.sql", "original_file_path": "models/gold/tests/blocks/test_core__blocks_recent.yml", "unique_id": "test.aleo_models.unique_test_core__blocks_recent_BLOCK_ID.c26b6eacc3", "fqn": ["aleo_models", "gold", "tests", "blocks", "unique_test_core__blocks_recent_BLOCK_ID"], "alias": "blocks_recent_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.717088, "relation_name": "ALEO.unique_test_core.blocks_recent_BLOCK_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__blocks_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.test_core__blocks_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__blocks_recent", "attached_node": "model.aleo_models.test_core__blocks_recent", "test_metadata": {"name": "unique", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__blocks_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_ID.7aecad87b8": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__blocks_recent_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__blocks_recent_BLOCK_ID.sql", "original_file_path": "models/gold/tests/blocks/test_core__blocks_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_ID.7aecad87b8", "fqn": ["aleo_models", "gold", "tests", "blocks", "not_null_test_core__blocks_recent_BLOCK_ID"], "alias": "blocks_recent_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7185578, "relation_name": "ALEO.not_null_test_core.blocks_recent_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__blocks_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__blocks_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__blocks_recent", "attached_node": "model.aleo_models.test_core__blocks_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__blocks_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_TIMESTAMP.2225f971b2": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__blocks_recent_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__blocks_recent_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/blocks/test_core__blocks_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_TIMESTAMP.2225f971b2", "fqn": ["aleo_models", "gold", "tests", "blocks", "not_null_test_core__blocks_recent_BLOCK_TIMESTAMP"], "alias": "blocks_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7199776, "relation_name": "ALEO.not_null_test_core.blocks_recent_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__blocks_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__blocks_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__blocks_recent", "attached_node": "model.aleo_models.test_core__blocks_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__blocks_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__blocks_recent_BLOCK_TIMESTAMP__hour__3.cb089947b4": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__blocks_recent_BLOCK_TIMESTAMP__hour__3", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_f8d804584a39918e4d6d985e2f81bf6c.sql", "original_file_path": "models/gold/tests/blocks/test_core__blocks_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__blocks_recent_BLOCK_TIMESTAMP__hour__3.cb089947b4", "fqn": ["aleo_models", "gold", "tests", "blocks", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__blocks_recent_BLOCK_TIMESTAMP__hour__3"], "alias": "blocks_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f8d804584a39918e4d6d985e2f81bf6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_f8d804584a39918e4d6d985e2f81bf6c"}, "created_at": 1753463697.7214239, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.blocks_recent_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f8d804584a39918e4d6d985e2f81bf6c\") }}", "language": "sql", "refs": [{"name": "test_core__blocks_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__blocks_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__blocks_recent", "attached_node": "model.aleo_models.test_core__blocks_recent", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "hour", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__blocks_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.fsc_utils_sequence_gaps_test_core__blocks_recent_BLOCK_ID.f87a178f75": {"database": "ALEO", "schema": "fsc_utils_sequence_gaps_test_core", "name": "fsc_utils_sequence_gaps_test_core__blocks_recent_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "fsc_utils_sequence_gaps_test_core__blocks_recent_BLOCK_ID.sql", "original_file_path": "models/gold/tests/blocks/test_core__blocks_recent.yml", "unique_id": "test.aleo_models.fsc_utils_sequence_gaps_test_core__blocks_recent_BLOCK_ID.f87a178f75", "fqn": ["aleo_models", "gold", "tests", "blocks", "fsc_utils_sequence_gaps_test_core__blocks_recent_BLOCK_ID"], "alias": "blocks_recent_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": ">10"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">10"}, "created_at": 1753463697.7281208, "relation_name": "ALEO.fsc_utils_sequence_gaps_test_core.blocks_recent_BLOCK_ID", "raw_code": "{{ fsc_utils.test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",error_if=\">10\") }}", "language": "sql", "refs": [{"name": "test_core__blocks_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__blocks_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_core__blocks_recent", "attached_node": "model.aleo_models.test_core__blocks_recent", "test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__blocks_recent')) }}"}, "namespace": "fsc_utils"}}, "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_ID.f6ecee38b4": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_recent_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_recent_BLOCK_ID.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_ID.f6ecee38b4", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_recent_BLOCK_ID"], "alias": "transfers_recent_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7363758, "relation_name": "ALEO.not_null_test_core.transfers_recent_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_TIMESTAMP.ea43762e52": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_recent_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_recent_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_TIMESTAMP.ea43762e52", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_recent_BLOCK_TIMESTAMP"], "alias": "transfers_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7378507, "relation_name": "ALEO.not_null_test_core.transfers_recent_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_BLOCK_TIMESTAMP__timestamp_ntz.cc15fe2f72": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_BLOCK_TIMESTAMP__timestamp_ntz", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_c8f00092fbda8af5b599d41ce7799ead.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_BLOCK_TIMESTAMP__timestamp_ntz.cc15fe2f72", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_BLOCK_TIMESTAMP__timestamp_ntz"], "alias": "transfers_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c8f00092fbda8af5b599d41ce7799ead", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_c8f00092fbda8af5b599d41ce7799ead"}, "created_at": 1753463697.7392647, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_recent_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c8f00092fbda8af5b599d41ce7799ead\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "timestamp_ntz", "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_recent_BLOCK_TIMESTAMP__hour__3.230c250397": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_recent_BLOCK_TIMESTAMP__hour__3", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_17283cbc601e5b0b894e1745db7d1a79.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_recent_BLOCK_TIMESTAMP__hour__3.230c250397", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_recent_BLOCK_TIMESTAMP__hour__3"], "alias": "transfers_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_17283cbc601e5b0b894e1745db7d1a79", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_17283cbc601e5b0b894e1745db7d1a79"}, "created_at": 1753463697.744476, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.transfers_recent_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_17283cbc601e5b0b894e1745db7d1a79\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "hour", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_recent_TX_ID.accb7c73e5": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_recent_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_recent_TX_ID.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_recent_TX_ID.accb7c73e5", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_recent_TX_ID"], "alias": "transfers_recent_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.750029, "relation_name": "ALEO.not_null_test_core.transfers_recent_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transfers_recent_TRANSITION_ID.cab60da5cc": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_recent_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_recent_TRANSITION_ID.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_recent_TRANSITION_ID.cab60da5cc", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_recent_TRANSITION_ID"], "alias": "transfers_recent_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.751809, "relation_name": "ALEO.not_null_test_core.transfers_recent_TRANSITION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transfers_recent_INDEX.7875007827": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_recent_INDEX", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_recent_INDEX.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_recent_INDEX.7875007827", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_recent_INDEX"], "alias": "transfers_recent_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7545555, "relation_name": "ALEO.not_null_test_core.transfers_recent_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INDEX", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transfers_recent_TX_SUCCEEDED.4b6984e485": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_recent_TX_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_recent_TX_SUCCEEDED.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_recent_TX_SUCCEEDED.4b6984e485", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_recent_TX_SUCCEEDED"], "alias": "transfers_recent_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7571738, "relation_name": "ALEO.not_null_test_core.transfers_recent_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transfers_recent_TRANSFER_TYPE.07b266a36e": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_recent_TRANSFER_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_recent_TRANSFER_TYPE.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_recent_TRANSFER_TYPE.07b266a36e", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_recent_TRANSFER_TYPE"], "alias": "transfers_recent_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7600806, "relation_name": "ALEO.not_null_test_core.transfers_recent_TRANSFER_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFER_TYPE", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_SENDER__VARCHAR.cb70ccc9bc": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_SENDER__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_be6913a3bb7f26595e075ce4f3e47985.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_SENDER__VARCHAR.cb70ccc9bc", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_SENDER__VARCHAR"], "alias": "transfers_recent_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be6913a3bb7f26595e075ce4f3e47985", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_be6913a3bb7f26595e075ce4f3e47985"}, "created_at": 1753463697.7619612, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_recent_SENDER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be6913a3bb7f26595e075ce4f3e47985\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "SENDER", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_RECEIVER__VARCHAR.b5644d9fb7": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_RECEIVER__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_0981197d150fb485f7e096d43874e46a.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_RECEIVER__VARCHAR.b5644d9fb7", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_RECEIVER__VARCHAR"], "alias": "transfers_recent_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0981197d150fb485f7e096d43874e46a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0981197d150fb485f7e096d43874e46a"}, "created_at": 1753463697.7657106, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_recent_RECEIVER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0981197d150fb485f7e096d43874e46a\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_AMOUNT__FLOAT.9b1e3d4bf7": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_AMOUNT__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_cf06cb968eb578a71a6f6e4385db2633.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_AMOUNT__FLOAT.9b1e3d4bf7", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_AMOUNT__FLOAT"], "alias": "transfers_recent_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cf06cb968eb578a71a6f6e4385db2633", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_cf06cb968eb578a71a6f6e4385db2633"}, "created_at": 1753463697.7697892, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_recent_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cf06cb968eb578a71a6f6e4385db2633\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_recent_IS_NATIVE.3f4aa5f093": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_recent_IS_NATIVE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_recent_IS_NATIVE.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_recent_IS_NATIVE.3f4aa5f093", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_recent_IS_NATIVE"], "alias": "transfers_recent_IS_NATIVE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7735384, "relation_name": "ALEO.not_null_test_core.transfers_recent_IS_NATIVE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IS_NATIVE", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IS_NATIVE", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_IS_NATIVE__BOOLEAN.4be4a86231": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_IS_NATIVE__BOOLEAN", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_28291df0325474af82130628158806a2.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_IS_NATIVE__BOOLEAN.4be4a86231", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_IS_NATIVE__BOOLEAN"], "alias": "transfers_recent_IS_NATIVE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_28291df0325474af82130628158806a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_28291df0325474af82130628158806a2"}, "created_at": 1753463697.7750185, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_recent_IS_NATIVE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_28291df0325474af82130628158806a2\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IS_NATIVE", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "BOOLEAN", "column_name": "IS_NATIVE", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_TOKEN_ADDRESS__VARCHAR.5ac2f67dd9": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_TOKEN_ADDRESS__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_7ead0d839ff8bef9820a24db9432e6cf.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_TOKEN_ADDRESS__VARCHAR.5ac2f67dd9", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_TOKEN_ADDRESS__VARCHAR"], "alias": "transfers_recent_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ead0d839ff8bef9820a24db9432e6cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_7ead0d839ff8bef9820a24db9432e6cf"}, "created_at": 1753463697.7792194, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_recent_TOKEN_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ead0d839ff8bef9820a24db9432e6cf\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ADDRESS", "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_recent_TRANSITION_ID__TX_ID__BLOCK_ID.2cc09c6492": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_test_core", "name": "dbt_utils_unique_combination_of_columns_test_core__transfers_recent_TRANSITION_ID__TX_ID__BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_52f44e7c3d3e71f02aaa65c166cb4ebc.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_recent.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_recent_TRANSITION_ID__TX_ID__BLOCK_ID.2cc09c6492", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_utils_unique_combination_of_columns_test_core__transfers_recent_TRANSITION_ID__TX_ID__BLOCK_ID"], "alias": "transfers_recent_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_52f44e7c3d3e71f02aaa65c166cb4ebc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_52f44e7c3d3e71f02aaa65c166cb4ebc"}, "created_at": 1753463697.7830951, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_test_core.transfers_recent_TRANSITION_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_52f44e7c3d3e71f02aaa65c166cb4ebc\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_core__transfers_recent", "attached_node": "model.aleo_models.test_core__transfers_recent", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TRANSITION_ID", "TX_ID", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('test_core__transfers_recent')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_test_core__transfers_full_BLOCK_ID.44a0160596": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_BLOCK_ID.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_BLOCK_ID.44a0160596", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_BLOCK_ID"], "alias": "transfers_full_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.788726, "relation_name": "ALEO.not_null_test_core.transfers_full_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_ID__NUMBER.db4a153014": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_ID__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a257b4c58f73ea9fab126ade542cccc9.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_ID__NUMBER.db4a153014", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_ID__NUMBER"], "alias": "transfers_full_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a257b4c58f73ea9fab126ade542cccc9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a257b4c58f73ea9fab126ade542cccc9"}, "created_at": 1753463697.7901838, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a257b4c58f73ea9fab126ade542cccc9\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "NUMBER", "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_BLOCK_TIMESTAMP.680028f04e": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_BLOCK_TIMESTAMP.680028f04e", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_BLOCK_TIMESTAMP"], "alias": "transfers_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.7941396, "relation_name": "ALEO.not_null_test_core.transfers_full_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_TIMESTAMP__timestamp_ntz.a2acec0665": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_TIMESTAMP__timestamp_ntz", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ada122d7686d77882a570a83d3d2930f.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_TIMESTAMP__timestamp_ntz.a2acec0665", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_TIMESTAMP__timestamp_ntz"], "alias": "transfers_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ada122d7686d77882a570a83d3d2930f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ada122d7686d77882a570a83d3d2930f"}, "created_at": 1753463697.7956076, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ada122d7686d77882a570a83d3d2930f\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "timestamp_ntz", "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_full_BLOCK_TIMESTAMP__day__1.bed6c29261": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_full_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_4a6a3347e18f54332faba1f117d3009f.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_full_BLOCK_TIMESTAMP__day__1.bed6c29261", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_full_BLOCK_TIMESTAMP__day__1"], "alias": "transfers_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4a6a3347e18f54332faba1f117d3009f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_4a6a3347e18f54332faba1f117d3009f"}, "created_at": 1753463697.7999814, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.transfers_full_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4a6a3347e18f54332faba1f117d3009f\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_TX_ID.aa9e490b50": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_TX_ID.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_TX_ID.aa9e490b50", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_TX_ID"], "alias": "transfers_full_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.805562, "relation_name": "ALEO.not_null_test_core.transfers_full_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_ID__VARCHAR.a4a360729b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_ID__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_05d1d2695360e539cd06dc6845061f84.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_ID__VARCHAR.a4a360729b", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_ID__VARCHAR"], "alias": "transfers_full_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_05d1d2695360e539cd06dc6845061f84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_05d1d2695360e539cd06dc6845061f84"}, "created_at": 1753463697.8069906, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_05d1d2695360e539cd06dc6845061f84\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_TX_SUCCEEDED.d8326e4ad1": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_TX_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_TX_SUCCEEDED.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_TX_SUCCEEDED.d8326e4ad1", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_TX_SUCCEEDED"], "alias": "transfers_full_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.8106508, "relation_name": "ALEO.not_null_test_core.transfers_full_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_SUCCEEDED__BOOLEAN.405c5b0551": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_SUCCEEDED__BOOLEAN", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3448b36788247f980461ff09e94cf9cd.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_SUCCEEDED__BOOLEAN.405c5b0551", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_SUCCEEDED__BOOLEAN"], "alias": "transfers_full_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3448b36788247f980461ff09e94cf9cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3448b36788247f980461ff09e94cf9cd"}, "created_at": 1753463697.8122575, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3448b36788247f980461ff09e94cf9cd\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "BOOLEAN", "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_TRANSITION_ID.e4ae0e9c5a": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_TRANSITION_ID.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_TRANSITION_ID.e4ae0e9c5a", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_TRANSITION_ID"], "alias": "transfers_full_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.8159502, "relation_name": "ALEO.not_null_test_core.transfers_full_TRANSITION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSITION_ID__VARCHAR.dfe94d6066": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSITION_ID__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_af63523d8ae113a023ef9120b847b0cf.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSITION_ID__VARCHAR.dfe94d6066", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSITION_ID__VARCHAR"], "alias": "transfers_full_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_af63523d8ae113a023ef9120b847b0cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_af63523d8ae113a023ef9120b847b0cf"}, "created_at": 1753463697.8173778, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_TRANSITION_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_af63523d8ae113a023ef9120b847b0cf\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_TRANSFER_TYPE.c3b93be59e": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_TRANSFER_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_TRANSFER_TYPE.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_TRANSFER_TYPE.c3b93be59e", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_TRANSFER_TYPE"], "alias": "transfers_full_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.8214004, "relation_name": "ALEO.not_null_test_core.transfers_full_TRANSFER_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFER_TYPE", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSFER_TYPE__VARCHAR.c590e4df83": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSFER_TYPE__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3c5cb4c7e2fa8e7d153c8cf6578c44c0.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSFER_TYPE__VARCHAR.c590e4df83", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSFER_TYPE__VARCHAR"], "alias": "transfers_full_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3c5cb4c7e2fa8e7d153c8cf6578c44c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3c5cb4c7e2fa8e7d153c8cf6578c44c0"}, "created_at": 1753463697.8228884, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_TRANSFER_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3c5cb4c7e2fa8e7d153c8cf6578c44c0\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFER_TYPE", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_SENDER.3d5cbf9a67": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_SENDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_SENDER.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_SENDER.3d5cbf9a67", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_SENDER"], "alias": "transfers_full_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_public_to_private')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_public_to_private')"}, "created_at": 1753463697.82709, "relation_name": "ALEO.not_null_test_core.transfers_full_SENDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_public_to_private')\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_SENDER__VARCHAR.fbd57ffc9e": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_SENDER__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_48231c39bea2515d81f646b996d926ce.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_SENDER__VARCHAR.fbd57ffc9e", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_SENDER__VARCHAR"], "alias": "transfers_full_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_48231c39bea2515d81f646b996d926ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_48231c39bea2515d81f646b996d926ce"}, "created_at": 1753463697.8285694, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_SENDER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_48231c39bea2515d81f646b996d926ce\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "SENDER", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_RECEIVER.2b9e95133e": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_RECEIVER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_RECEIVER.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_RECEIVER.2b9e95133e", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_RECEIVER"], "alias": "transfers_full_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_private_to_public')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_private_to_public')"}, "created_at": 1753463697.8325677, "relation_name": "ALEO.not_null_test_core.transfers_full_RECEIVER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_private_to_public')\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_RECEIVER__VARCHAR.ed72eb7f1c": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_RECEIVER__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a92b6c34170d7aa8774288a025ee14bb.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_RECEIVER__VARCHAR.ed72eb7f1c", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_RECEIVER__VARCHAR"], "alias": "transfers_full_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a92b6c34170d7aa8774288a025ee14bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a92b6c34170d7aa8774288a025ee14bb"}, "created_at": 1753463697.8340044, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_RECEIVER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a92b6c34170d7aa8774288a025ee14bb\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_AMOUNT.8a4b2f1b6d": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_AMOUNT.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_AMOUNT.8a4b2f1b6d", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_AMOUNT"], "alias": "transfers_full_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "transfer_type != 'transfer_private'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "transfer_type != 'transfer_private'"}, "created_at": 1753463697.8381875, "relation_name": "ALEO.not_null_test_core.transfers_full_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"transfer_type != 'transfer_private'\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_AMOUNT__FLOAT.a4c0d1b1f0": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_AMOUNT__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_6354c8597f52dbf7aca33b784424d4c6.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_AMOUNT__FLOAT.a4c0d1b1f0", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_AMOUNT__FLOAT"], "alias": "transfers_full_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6354c8597f52dbf7aca33b784424d4c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_6354c8597f52dbf7aca33b784424d4c6"}, "created_at": 1753463697.8396327, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6354c8597f52dbf7aca33b784424d4c6\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "FLOAT", "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_IS_NATIVE.2bd3fa38a4": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_IS_NATIVE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_IS_NATIVE.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_IS_NATIVE.2bd3fa38a4", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_IS_NATIVE"], "alias": "transfers_full_IS_NATIVE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.8435426, "relation_name": "ALEO.not_null_test_core.transfers_full_IS_NATIVE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IS_NATIVE", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IS_NATIVE", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_IS_NATIVE__BOOLEAN.457eaccf7b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_IS_NATIVE__BOOLEAN", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_1d4d6d354fa320917b83b9dc0e9f7665.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_IS_NATIVE__BOOLEAN.457eaccf7b", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_IS_NATIVE__BOOLEAN"], "alias": "transfers_full_IS_NATIVE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1d4d6d354fa320917b83b9dc0e9f7665", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_1d4d6d354fa320917b83b9dc0e9f7665"}, "created_at": 1753463697.844979, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_IS_NATIVE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1d4d6d354fa320917b83b9dc0e9f7665\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IS_NATIVE", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "BOOLEAN", "column_name": "IS_NATIVE", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transfers_full_TOKEN_ADDRESS.7a33e30844": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transfers_full_TOKEN_ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transfers_full_TOKEN_ADDRESS.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transfers_full_TOKEN_ADDRESS.7a33e30844", "fqn": ["aleo_models", "gold", "tests", "transfers", "not_null_test_core__transfers_full_TOKEN_ADDRESS"], "alias": "transfers_full_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "is_native = FALSE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "is_native = FALSE"}, "created_at": 1753463697.8489542, "relation_name": "ALEO.not_null_test_core.transfers_full_TOKEN_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"is_native = FALSE\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ADDRESS", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TOKEN_ADDRESS__VARCHAR.06afd1e0e1": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TOKEN_ADDRESS__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_1b06ef6775cf18c3d0d09109fc794dcb.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TOKEN_ADDRESS__VARCHAR.06afd1e0e1", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TOKEN_ADDRESS__VARCHAR"], "alias": "transfers_full_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1b06ef6775cf18c3d0d09109fc794dcb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_1b06ef6775cf18c3d0d09109fc794dcb"}, "created_at": 1753463697.8506017, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transfers_full_TOKEN_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1b06ef6775cf18c3d0d09109fc794dcb\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ADDRESS", "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_full_TRANSITION_ID__TX_ID__BLOCK_ID.43cdacc3a1": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_test_core", "name": "dbt_utils_unique_combination_of_columns_test_core__transfers_full_TRANSITION_ID__TX_ID__BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_2b254ea78a83abcbc417f85745635cae.sql", "original_file_path": "models/gold/tests/transfers/test_core__transfers_full.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_full_TRANSITION_ID__TX_ID__BLOCK_ID.43cdacc3a1", "fqn": ["aleo_models", "gold", "tests", "transfers", "dbt_utils_unique_combination_of_columns_test_core__transfers_full_TRANSITION_ID__TX_ID__BLOCK_ID"], "alias": "transfers_full_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2b254ea78a83abcbc417f85745635cae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2b254ea78a83abcbc417f85745635cae"}, "created_at": 1753463697.8543105, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_test_core.transfers_full_TRANSITION_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2b254ea78a83abcbc417f85745635cae\") }}", "language": "sql", "refs": [{"name": "test_core__transfers_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transfers_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_core__transfers_full", "attached_node": "model.aleo_models.test_core__transfers_full", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TRANSITION_ID", "TX_ID", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('test_core__transfers_full')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_ID.af65e503a3": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_BLOCK_ID.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_ID.af65e503a3", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_BLOCK_ID"], "alias": "block_solutions_full_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.8601358, "relation_name": "ALEO.not_null_test_core.block_solutions_full_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_ID__number.a9475a9a0f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_ID__number", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_98cb6e7772958e3bf38f20fad3ac3e01.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_ID__number.a9475a9a0f", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_ID__number"], "alias": "block_solutions_full_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_98cb6e7772958e3bf38f20fad3ac3e01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_98cb6e7772958e3bf38f20fad3ac3e01"}, "created_at": 1753463697.8616064, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_98cb6e7772958e3bf38f20fad3ac3e01\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_TIMESTAMP.63c13702db": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_TIMESTAMP.63c13702db", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_BLOCK_TIMESTAMP"], "alias": "block_solutions_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.8658106, "relation_name": "ALEO.not_null_test_core.block_solutions_full_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_TIMESTAMP__timestamp_ntz.361450a37d": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_TIMESTAMP__timestamp_ntz", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_e2c4ac014cf909b07d861d9cffb492a2.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_TIMESTAMP__timestamp_ntz.361450a37d", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_TIMESTAMP__timestamp_ntz"], "alias": "block_solutions_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e2c4ac014cf909b07d861d9cffb492a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_e2c4ac014cf909b07d861d9cffb492a2"}, "created_at": 1753463697.8672516, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e2c4ac014cf909b07d861d9cffb492a2\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "timestamp_ntz", "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_full_BLOCK_TIMESTAMP__day__1.bb2d43e68e": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_full_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_e7308700843e66fc83f37043cf45a51c.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_full_BLOCK_TIMESTAMP__day__1.bb2d43e68e", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_full_BLOCK_TIMESTAMP__day__1"], "alias": "block_solutions_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e7308700843e66fc83f37043cf45a51c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_e7308700843e66fc83f37043cf45a51c"}, "created_at": 1753463697.8709316, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.block_solutions_full_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e7308700843e66fc83f37043cf45a51c\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD.091930da06": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD.091930da06", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD"], "alias": "block_solutions_full_BLOCK_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.876482, "relation_name": "ALEO.not_null_test_core.block_solutions_full_BLOCK_PUZZLE_REWARD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_PUZZLE_REWARD", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD__number.d15dabbd7b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD__number", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_88b8135d58cda026413f4bc815f99742.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD__number.d15dabbd7b", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD__number"], "alias": "block_solutions_full_BLOCK_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_88b8135d58cda026413f4bc815f99742", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_88b8135d58cda026413f4bc815f99742"}, "created_at": 1753463697.8779142, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_BLOCK_PUZZLE_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_88b8135d58cda026413f4bc815f99742\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_PUZZLE_REWARD", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "BLOCK_PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_full_ADDRESS.3a1563be64": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_ADDRESS.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_ADDRESS.3a1563be64", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_ADDRESS"], "alias": "block_solutions_full_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.8817093, "relation_name": "ALEO.not_null_test_core.block_solutions_full_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_ADDRESS__varchar.02bfdb533b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_ADDRESS__varchar", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b013aa4fc9efae17d1781f61ce50968e.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_ADDRESS__varchar.02bfdb533b", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_ADDRESS__varchar"], "alias": "block_solutions_full_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b013aa4fc9efae17d1781f61ce50968e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b013aa4fc9efae17d1781f61ce50968e"}, "created_at": 1753463697.8831396, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_ADDRESS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b013aa4fc9efae17d1781f61ce50968e\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_full_COUNTER.93b37d2afb": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_COUNTER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_COUNTER.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_COUNTER.93b37d2afb", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_COUNTER"], "alias": "block_solutions_full_COUNTER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.8877795, "relation_name": "ALEO.not_null_test_core.block_solutions_full_COUNTER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COUNTER", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTER", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_COUNTER__varchar.d79fe043c3": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_COUNTER__varchar", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_2663211ddcb322b0dd3c54c60a3afc52.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_COUNTER__varchar.d79fe043c3", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_COUNTER__varchar"], "alias": "block_solutions_full_COUNTER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2663211ddcb322b0dd3c54c60a3afc52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_2663211ddcb322b0dd3c54c60a3afc52"}, "created_at": 1753463697.8892016, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_COUNTER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2663211ddcb322b0dd3c54c60a3afc52\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COUNTER", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "COUNTER", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_full_EPOCH_HASH.daf662ca58": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_EPOCH_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_EPOCH_HASH.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_EPOCH_HASH.daf662ca58", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_EPOCH_HASH"], "alias": "block_solutions_full_EPOCH_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.892845, "relation_name": "ALEO.not_null_test_core.block_solutions_full_EPOCH_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EPOCH_HASH", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EPOCH_HASH", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_EPOCH_HASH__varchar.e6c6288780": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_EPOCH_HASH__varchar", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_cb9214fe577824116300618fb0912f52.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_EPOCH_HASH__varchar.e6c6288780", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_EPOCH_HASH__varchar"], "alias": "block_solutions_full_EPOCH_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cb9214fe577824116300618fb0912f52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_cb9214fe577824116300618fb0912f52"}, "created_at": 1753463697.894486, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_EPOCH_HASH", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cb9214fe577824116300618fb0912f52\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EPOCH_HASH", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "EPOCH_HASH", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_full_SOLUTION_ID.8a323cbd55": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_SOLUTION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_SOLUTION_ID.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_SOLUTION_ID.8a323cbd55", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_SOLUTION_ID"], "alias": "block_solutions_full_SOLUTION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.8981326, "relation_name": "ALEO.not_null_test_core.block_solutions_full_SOLUTION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SOLUTION_ID", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SOLUTION_ID", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_SOLUTION_ID__varchar.056235cfd9": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_SOLUTION_ID__varchar", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_46e1c190e73af454f7f113e3fff14c73.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_SOLUTION_ID__varchar.056235cfd9", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_SOLUTION_ID__varchar"], "alias": "block_solutions_full_SOLUTION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_46e1c190e73af454f7f113e3fff14c73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_46e1c190e73af454f7f113e3fff14c73"}, "created_at": 1753463697.8995922, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_SOLUTION_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_46e1c190e73af454f7f113e3fff14c73\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SOLUTION_ID", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "SOLUTION_ID", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_full_TARGET.9197ff119b": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_TARGET.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_TARGET.9197ff119b", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_TARGET"], "alias": "block_solutions_full_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.903407, "relation_name": "ALEO.not_null_test_core.block_solutions_full_TARGET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TARGET", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TARGET", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_TARGET__number.16668ae8ed": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_TARGET__number", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_84b30454db7d34e34dc3252d9e45a9ef.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_TARGET__number.16668ae8ed", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_TARGET__number"], "alias": "block_solutions_full_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_84b30454db7d34e34dc3252d9e45a9ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_84b30454db7d34e34dc3252d9e45a9ef"}, "created_at": 1753463697.9048522, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_TARGET", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_84b30454db7d34e34dc3252d9e45a9ef\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TARGET", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "TARGET", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_full_REWARD_RAW.1093af5149": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_REWARD_RAW", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_REWARD_RAW.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_REWARD_RAW.1093af5149", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_REWARD_RAW"], "alias": "block_solutions_full_REWARD_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9087222, "relation_name": "ALEO.not_null_test_core.block_solutions_full_REWARD_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD_RAW", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARD_RAW", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD_RAW__number.78bfd5fac7": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD_RAW__number", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_5b3ca6ee8810f56c98d5ab41af25a698.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD_RAW__number.78bfd5fac7", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD_RAW__number"], "alias": "block_solutions_full_REWARD_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b3ca6ee8810f56c98d5ab41af25a698", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_5b3ca6ee8810f56c98d5ab41af25a698"}, "created_at": 1753463697.9101558, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_REWARD_RAW", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b3ca6ee8810f56c98d5ab41af25a698\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD_RAW", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "REWARD_RAW", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_full_REWARD.ed62ea6e8e": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_full_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_full_REWARD.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_full_REWARD.ed62ea6e8e", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_full_REWARD"], "alias": "block_solutions_full_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9138224, "relation_name": "ALEO.not_null_test_core.block_solutions_full_REWARD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARD", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD__float.ff45328781": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD__float", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_f4219352724ffbec7db297705298cb4a.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD__float.ff45328781", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD__float"], "alias": "block_solutions_full_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f4219352724ffbec7db297705298cb4a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f4219352724ffbec7db297705298cb4a"}, "created_at": 1753463697.915247, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_solutions_full_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f4219352724ffbec7db297705298cb4a\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD", "file_key_name": "models.test_core__block_solutions_full", "attached_node": "model.aleo_models.test_core__block_solutions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "float", "column_name": "REWARD", "model": "{{ get_where_subquery(ref('test_core__block_solutions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_ID.276b7669d8": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_recent_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_recent_BLOCK_ID.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_ID.276b7669d8", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_recent_BLOCK_ID"], "alias": "block_solutions_recent_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9208424, "relation_name": "ALEO.not_null_test_core.block_solutions_recent_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_TIMESTAMP.8556c30ded": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_recent_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_recent_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_TIMESTAMP.8556c30ded", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_recent_BLOCK_TIMESTAMP"], "alias": "block_solutions_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.922291, "relation_name": "ALEO.not_null_test_core.block_solutions_recent_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_recent_BLOCK_TIMESTAMP__hour__3.1d34ec0913": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_recent_BLOCK_TIMESTAMP__hour__3", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_cc10e4fafa43c505b6621c59a013acbd.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_recent_BLOCK_TIMESTAMP__hour__3.1d34ec0913", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_recent_BLOCK_TIMESTAMP__hour__3"], "alias": "block_solutions_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cc10e4fafa43c505b6621c59a013acbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cc10e4fafa43c505b6621c59a013acbd"}, "created_at": 1753463697.9237459, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.block_solutions_recent_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cc10e4fafa43c505b6621c59a013acbd\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "hour", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_PUZZLE_REWARD.3a26876298": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_recent_BLOCK_PUZZLE_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_recent_BLOCK_PUZZLE_REWARD.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_PUZZLE_REWARD.3a26876298", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_recent_BLOCK_PUZZLE_REWARD"], "alias": "block_solutions_recent_BLOCK_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9293113, "relation_name": "ALEO.not_null_test_core.block_solutions_recent_BLOCK_PUZZLE_REWARD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_PUZZLE_REWARD", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_solutions_recent_ADDRESS.5ac1c26e6d": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_recent_ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_recent_ADDRESS.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_recent_ADDRESS.5ac1c26e6d", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_recent_ADDRESS"], "alias": "block_solutions_recent_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9307616, "relation_name": "ALEO.not_null_test_core.block_solutions_recent_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_solutions_recent_COUNTER.676606a4cc": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_recent_COUNTER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_recent_COUNTER.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_recent_COUNTER.676606a4cc", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_recent_COUNTER"], "alias": "block_solutions_recent_COUNTER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9321601, "relation_name": "ALEO.not_null_test_core.block_solutions_recent_COUNTER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COUNTER", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTER", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_solutions_recent_EPOCH_HASH.3ece27be86": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_recent_EPOCH_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_recent_EPOCH_HASH.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_recent_EPOCH_HASH.3ece27be86", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_recent_EPOCH_HASH"], "alias": "block_solutions_recent_EPOCH_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9337382, "relation_name": "ALEO.not_null_test_core.block_solutions_recent_EPOCH_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EPOCH_HASH", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EPOCH_HASH", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_solutions_recent_SOLUTION_ID.ed25c17e24": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_recent_SOLUTION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_recent_SOLUTION_ID.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_recent_SOLUTION_ID.ed25c17e24", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_recent_SOLUTION_ID"], "alias": "block_solutions_recent_SOLUTION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.935194, "relation_name": "ALEO.not_null_test_core.block_solutions_recent_SOLUTION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SOLUTION_ID", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SOLUTION_ID", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_solutions_recent_TARGET.58ba4e2d92": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_recent_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_recent_TARGET.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_recent_TARGET.58ba4e2d92", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_recent_TARGET"], "alias": "block_solutions_recent_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9366298, "relation_name": "ALEO.not_null_test_core.block_solutions_recent_TARGET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TARGET", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TARGET", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_solutions_recent_REWARD_RAW.92470140bb": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_solutions_recent_REWARD_RAW", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_solutions_recent_REWARD_RAW.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_solutions_recent_REWARD_RAW.92470140bb", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "not_null_test_core__block_solutions_recent_REWARD_RAW"], "alias": "block_solutions_recent_REWARD_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.938025, "relation_name": "ALEO.not_null_test_core.block_solutions_recent_REWARD_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD_RAW", "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARD_RAW", "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_solutions_recent_SOLUTION_ID__BLOCK_ID.e25c9f1601": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_test_core", "name": "dbt_utils_unique_combination_of_columns_test_core__block_solutions_recent_SOLUTION_ID__BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_10b64889ddad0d543b942b0fa2e52120.sql", "original_file_path": "models/gold/tests/block_solutions/test_core__block_solutions_recent.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_solutions_recent_SOLUTION_ID__BLOCK_ID.e25c9f1601", "fqn": ["aleo_models", "gold", "tests", "block_solutions", "dbt_utils_unique_combination_of_columns_test_core__block_solutions_recent_SOLUTION_ID__BLOCK_ID"], "alias": "block_solutions_recent_SOLUTION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_10b64889ddad0d543b942b0fa2e52120", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_10b64889ddad0d543b942b0fa2e52120"}, "created_at": 1753463697.9394312, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_test_core.block_solutions_recent_SOLUTION_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_10b64889ddad0d543b942b0fa2e52120\") }}", "language": "sql", "refs": [{"name": "test_core__block_solutions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_solutions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_core__block_solutions_recent", "attached_node": "model.aleo_models.test_core__block_solutions_recent", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["SOLUTION_ID", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('test_core__block_solutions_recent')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_TIMESTAMP.aa9c91bac3": {"database": "ALEO", "schema": "not_null_test_defi", "name": "not_null_test_defi__swaps_recent_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_defi__swaps_recent_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/defi/test_defi__swaps_recent.yml", "unique_id": "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_TIMESTAMP.aa9c91bac3", "fqn": ["aleo_models", "gold", "tests", "defi", "not_null_test_defi__swaps_recent_BLOCK_TIMESTAMP"], "alias": "swaps_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9440615, "relation_name": "ALEO.not_null_test_defi.swaps_recent_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_defi__swaps_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_defi__swaps_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_defi__swaps_recent", "attached_node": "model.aleo_models.test_defi__swaps_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_defi__swaps_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_defi__swaps_recent_BLOCK_TIMESTAMP__day__3.97d3ae46b6": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_defi", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_defi__swaps_recent_BLOCK_TIMESTAMP__day__3", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_d7a01f04b35ac1cc910955cfc26c6b44.sql", "original_file_path": "models/gold/tests/defi/test_defi__swaps_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_defi__swaps_recent_BLOCK_TIMESTAMP__day__3.97d3ae46b6", "fqn": ["aleo_models", "gold", "tests", "defi", "dbt_expectations_expect_row_values_to_have_recent_data_test_defi__swaps_recent_BLOCK_TIMESTAMP__day__3"], "alias": "swaps_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d7a01f04b35ac1cc910955cfc26c6b44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_d7a01f04b35ac1cc910955cfc26c6b44"}, "created_at": 1753463697.9455276, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_defi.swaps_recent_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d7a01f04b35ac1cc910955cfc26c6b44\") }}", "language": "sql", "refs": [{"name": "test_defi__swaps_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_defi__swaps_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_defi__swaps_recent", "attached_node": "model.aleo_models.test_defi__swaps_recent", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_defi__swaps_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_ID.0885e16138": {"database": "ALEO", "schema": "not_null_test_defi", "name": "not_null_test_defi__swaps_recent_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_defi__swaps_recent_BLOCK_ID.sql", "original_file_path": "models/gold/tests/defi/test_defi__swaps_recent.yml", "unique_id": "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_ID.0885e16138", "fqn": ["aleo_models", "gold", "tests", "defi", "not_null_test_defi__swaps_recent_BLOCK_ID"], "alias": "swaps_recent_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.951075, "relation_name": "ALEO.not_null_test_defi.swaps_recent_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_defi__swaps_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_defi__swaps_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_defi__swaps_recent", "attached_node": "model.aleo_models.test_defi__swaps_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_defi__swaps_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__swaps_recent_TX_ID__SWAPPER__BLOCK_ID.5b52cfad7b": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_test_defi", "name": "dbt_utils_unique_combination_of_columns_test_defi__swaps_recent_TX_ID__SWAPPER__BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_3f145d4a3d5cd0d0d1d5a3e07cdfbc17.sql", "original_file_path": "models/gold/tests/defi/test_defi__swaps_recent.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__swaps_recent_TX_ID__SWAPPER__BLOCK_ID.5b52cfad7b", "fqn": ["aleo_models", "gold", "tests", "defi", "dbt_utils_unique_combination_of_columns_test_defi__swaps_recent_TX_ID__SWAPPER__BLOCK_ID"], "alias": "swaps_recent_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3f145d4a3d5cd0d0d1d5a3e07cdfbc17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3f145d4a3d5cd0d0d1d5a3e07cdfbc17"}, "created_at": 1753463697.95255, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_test_defi.swaps_recent_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3f145d4a3d5cd0d0d1d5a3e07cdfbc17\") }}", "language": "sql", "refs": [{"name": "test_defi__swaps_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_defi__swaps_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_defi__swaps_recent", "attached_node": "model.aleo_models.test_defi__swaps_recent", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "SWAPPER", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('test_defi__swaps_recent')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_TIMESTAMP.433bfa00a0": {"database": "ALEO", "schema": "not_null_test_defi", "name": "not_null_test_defi__liquidity_actions_recent_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_defi__liquidity_actions_recent_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/defi/test_defi__liquidity_actions_recent.yml", "unique_id": "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_TIMESTAMP.433bfa00a0", "fqn": ["aleo_models", "gold", "tests", "defi", "not_null_test_defi__liquidity_actions_recent_BLOCK_TIMESTAMP"], "alias": "liquidity_actions_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9571886, "relation_name": "ALEO.not_null_test_defi.liquidity_actions_recent_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_defi__liquidity_actions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_defi__liquidity_actions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_defi__liquidity_actions_recent", "attached_node": "model.aleo_models.test_defi__liquidity_actions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_defi__liquidity_actions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_ID.77677822d5": {"database": "ALEO", "schema": "not_null_test_defi", "name": "not_null_test_defi__liquidity_actions_recent_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_defi__liquidity_actions_recent_BLOCK_ID.sql", "original_file_path": "models/gold/tests/defi/test_defi__liquidity_actions_recent.yml", "unique_id": "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_ID.77677822d5", "fqn": ["aleo_models", "gold", "tests", "defi", "not_null_test_defi__liquidity_actions_recent_BLOCK_ID"], "alias": "liquidity_actions_recent_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9586697, "relation_name": "ALEO.not_null_test_defi.liquidity_actions_recent_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_defi__liquidity_actions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_defi__liquidity_actions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_defi__liquidity_actions_recent", "attached_node": "model.aleo_models.test_defi__liquidity_actions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_defi__liquidity_actions_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__liquidity_actions_recent_TX_ID__LIQUIDITY_POOL_PROTOCOL__LIQUIDITY_PROVIDER__TOKEN1_ID__TOKEN2_ID.385663127b": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_test_defi", "name": "dbt_utils_unique_combination_of_columns_test_defi__liquidity_actions_recent_TX_ID__LIQUIDITY_POOL_PROTOCOL__LIQUIDITY_PROVIDER__TOKEN1_ID__TOKEN2_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_d5297b6b5a955aeec5dac321d9496b82.sql", "original_file_path": "models/gold/tests/defi/test_defi__liquidity_actions_recent.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__liquidity_actions_recent_TX_ID__LIQUIDITY_POOL_PROTOCOL__LIQUIDITY_PROVIDER__TOKEN1_ID__TOKEN2_ID.385663127b", "fqn": ["aleo_models", "gold", "tests", "defi", "dbt_utils_unique_combination_of_columns_test_defi__liquidity_actions_recent_TX_ID__LIQUIDITY_POOL_PROTOCOL__LIQUIDITY_PROVIDER__TOKEN1_ID__TOKEN2_ID"], "alias": "liquidity_actions_recent_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d5297b6b5a955aeec5dac321d9496b82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d5297b6b5a955aeec5dac321d9496b82"}, "created_at": 1753463697.9601116, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_test_defi.liquidity_actions_recent_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d5297b6b5a955aeec5dac321d9496b82\") }}", "language": "sql", "refs": [{"name": "test_defi__liquidity_actions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_defi__liquidity_actions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_defi__liquidity_actions_recent", "attached_node": "model.aleo_models.test_defi__liquidity_actions_recent", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "LIQUIDITY_POOL_PROTOCOL", "LIQUIDITY_PROVIDER", "TOKEN1_ID", "TOKEN2_ID"], "model": "{{ get_where_subquery(ref('test_defi__liquidity_actions_recent')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_test_core__transitions_recent_BLOCK_TIMESTAMP.40a1e65ad9": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_recent_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_recent_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_recent_BLOCK_TIMESTAMP.40a1e65ad9", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_recent_BLOCK_TIMESTAMP"], "alias": "transitions_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9652092, "relation_name": "ALEO.not_null_test_core.transitions_recent_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transitions_recent", "attached_node": "model.aleo_models.test_core__transitions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transitions_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_recent_BLOCK_TIMESTAMP__hour__3.94ee0b9ed0": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_recent_BLOCK_TIMESTAMP__hour__3", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_a50ee30ac1899dc8181962fff7b580cb.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_recent_BLOCK_TIMESTAMP__hour__3.94ee0b9ed0", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_recent_BLOCK_TIMESTAMP__hour__3"], "alias": "transitions_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a50ee30ac1899dc8181962fff7b580cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_a50ee30ac1899dc8181962fff7b580cb"}, "created_at": 1753463697.9666631, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.transitions_recent_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a50ee30ac1899dc8181962fff7b580cb\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transitions_recent", "attached_node": "model.aleo_models.test_core__transitions_recent", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "hour", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transitions_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transitions_recent_TX_ID.0c1c4942f9": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_recent_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_recent_TX_ID.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_recent_TX_ID.0c1c4942f9", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_recent_TX_ID"], "alias": "transitions_recent_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9721816, "relation_name": "ALEO.not_null_test_core.transitions_recent_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.test_core__transitions_recent", "attached_node": "model.aleo_models.test_core__transitions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transitions_recent_TRANSITION_ID.278a50751b": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_recent_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_recent_TRANSITION_ID.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_recent_TRANSITION_ID.278a50751b", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_recent_TRANSITION_ID"], "alias": "transitions_recent_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9736135, "relation_name": "ALEO.not_null_test_core.transitions_recent_TRANSITION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.test_core__transitions_recent", "attached_node": "model.aleo_models.test_core__transitions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transitions_recent_PROGRAM_ID.4fe73c31dc": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_recent_PROGRAM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_recent_PROGRAM_ID.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_recent_PROGRAM_ID.4fe73c31dc", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_recent_PROGRAM_ID"], "alias": "transitions_recent_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9750137, "relation_name": "ALEO.not_null_test_core.transitions_recent_PROGRAM_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.test_core__transitions_recent", "attached_node": "model.aleo_models.test_core__transitions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transitions_recent_INPUTS.5407911e94": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_recent_INPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_recent_INPUTS.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_recent_INPUTS.5407911e94", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_recent_INPUTS"], "alias": "transitions_recent_INPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.976408, "relation_name": "ALEO.not_null_test_core.transitions_recent_INPUTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INPUTS", "file_key_name": "models.test_core__transitions_recent", "attached_node": "model.aleo_models.test_core__transitions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INPUTS", "model": "{{ get_where_subquery(ref('test_core__transitions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transitions_recent_OUTPUTS.236aa37a1e": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_recent_OUTPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_recent_OUTPUTS.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_recent_OUTPUTS.236aa37a1e", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_recent_OUTPUTS"], "alias": "transitions_recent_OUTPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.9777935, "relation_name": "ALEO.not_null_test_core.transitions_recent_OUTPUTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "OUTPUTS", "file_key_name": "models.test_core__transitions_recent", "attached_node": "model.aleo_models.test_core__transitions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OUTPUTS", "model": "{{ get_where_subquery(ref('test_core__transitions_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_recent_TRANSITION_ID__TX_ID__BLOCK_ID.5baa0beb34": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_test_core", "name": "dbt_utils_unique_combination_of_columns_test_core__transitions_recent_TRANSITION_ID__TX_ID__BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_cf5a0caa7ae5339411f713b174adff6f.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_recent.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_recent_TRANSITION_ID__TX_ID__BLOCK_ID.5baa0beb34", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_utils_unique_combination_of_columns_test_core__transitions_recent_TRANSITION_ID__TX_ID__BLOCK_ID"], "alias": "transitions_recent_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cf5a0caa7ae5339411f713b174adff6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cf5a0caa7ae5339411f713b174adff6f"}, "created_at": 1753463697.979187, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_test_core.transitions_recent_TRANSITION_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cf5a0caa7ae5339411f713b174adff6f\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_core__transitions_recent", "attached_node": "model.aleo_models.test_core__transitions_recent", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TRANSITION_ID", "TX_ID", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('test_core__transitions_recent')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_test_core__transitions_full_BLOCK_ID.cec6b5a3b5": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_full_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_full_BLOCK_ID.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_full_BLOCK_ID.cec6b5a3b5", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_full_BLOCK_ID"], "alias": "transitions_full_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.984898, "relation_name": "ALEO.not_null_test_core.transitions_full_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_ID__NUMBER.330953c31f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_ID__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b6b5b0e32f021b8458fdd16b923fa22c.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_ID__NUMBER.330953c31f", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_ID__NUMBER"], "alias": "transitions_full_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b6b5b0e32f021b8458fdd16b923fa22c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b6b5b0e32f021b8458fdd16b923fa22c"}, "created_at": 1753463697.9863522, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transitions_full_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b6b5b0e32f021b8458fdd16b923fa22c\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "NUMBER", "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transitions_full_BLOCK_TIMESTAMP.08683331a8": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_full_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_full_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_full_BLOCK_TIMESTAMP.08683331a8", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_full_BLOCK_TIMESTAMP"], "alias": "transitions_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463697.990199, "relation_name": "ALEO.not_null_test_core.transitions_full_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_TIMESTAMP__timestamp_ntz.34883a9ca8": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_TIMESTAMP__timestamp_ntz", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_8e0f96e48fb5ae9cc9c4bcfdf27f9a6c.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_TIMESTAMP__timestamp_ntz.34883a9ca8", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_TIMESTAMP__timestamp_ntz"], "alias": "transitions_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e0f96e48fb5ae9cc9c4bcfdf27f9a6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_8e0f96e48fb5ae9cc9c4bcfdf27f9a6c"}, "created_at": 1753463697.9916472, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transitions_full_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e0f96e48fb5ae9cc9c4bcfdf27f9a6c\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "timestamp_ntz", "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_full_BLOCK_TIMESTAMP__day__1.10b89bf39b": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_full_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_72d2261dfaf8f4e9aeee77ad34a273ad.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_full_BLOCK_TIMESTAMP__day__1.10b89bf39b", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_full_BLOCK_TIMESTAMP__day__1"], "alias": "transitions_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_72d2261dfaf8f4e9aeee77ad34a273ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_72d2261dfaf8f4e9aeee77ad34a273ad"}, "created_at": 1753463697.9955482, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.transitions_full_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_72d2261dfaf8f4e9aeee77ad34a273ad\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transitions_full_TX_ID.5e283fda3d": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_full_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_full_TX_ID.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_full_TX_ID.5e283fda3d", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_full_TX_ID"], "alias": "transitions_full_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.00122, "relation_name": "ALEO.not_null_test_core.transitions_full_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TX_ID__VARCHAR.dcdaa15bc5": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TX_ID__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_1a7e225edf9c458e5bf5897a09ee837f.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TX_ID__VARCHAR.dcdaa15bc5", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TX_ID__VARCHAR"], "alias": "transitions_full_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1a7e225edf9c458e5bf5897a09ee837f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_1a7e225edf9c458e5bf5897a09ee837f"}, "created_at": 1753463698.0027125, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transitions_full_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1a7e225edf9c458e5bf5897a09ee837f\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INDEX__NUMBER.df84f98823": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INDEX__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_f75f91ded5414d6a40315178bb447cb0.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INDEX__NUMBER.df84f98823", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INDEX__NUMBER"], "alias": "transitions_full_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f75f91ded5414d6a40315178bb447cb0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f75f91ded5414d6a40315178bb447cb0"}, "created_at": 1753463698.006378, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transitions_full_INDEX", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f75f91ded5414d6a40315178bb447cb0\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INDEX", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "NUMBER", "column_name": "INDEX", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transitions_full_TRANSITION_ID.b3f5414d72": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_full_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_full_TRANSITION_ID.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_full_TRANSITION_ID.b3f5414d72", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_full_TRANSITION_ID"], "alias": "transitions_full_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0102546, "relation_name": "ALEO.not_null_test_core.transitions_full_TRANSITION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TRANSITION_ID__VARCHAR.7414b60884": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TRANSITION_ID__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_12be6158396492b9fb5d1ae2e66c29f8.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TRANSITION_ID__VARCHAR.7414b60884", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TRANSITION_ID__VARCHAR"], "alias": "transitions_full_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_12be6158396492b9fb5d1ae2e66c29f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_12be6158396492b9fb5d1ae2e66c29f8"}, "created_at": 1753463698.0116827, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transitions_full_TRANSITION_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_12be6158396492b9fb5d1ae2e66c29f8\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transitions_full_PROGRAM_ID.54aef3f41e": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_full_PROGRAM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_full_PROGRAM_ID.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_full_PROGRAM_ID.54aef3f41e", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_full_PROGRAM_ID"], "alias": "transitions_full_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0153298, "relation_name": "ALEO.not_null_test_core.transitions_full_PROGRAM_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_PROGRAM_ID__VARCHAR.a3fe55fdb8": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_PROGRAM_ID__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_9ed2ce3a303df90fa69bde758f6be53b.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_PROGRAM_ID__VARCHAR.a3fe55fdb8", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_PROGRAM_ID__VARCHAR"], "alias": "transitions_full_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9ed2ce3a303df90fa69bde758f6be53b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_9ed2ce3a303df90fa69bde758f6be53b"}, "created_at": 1753463698.016996, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transitions_full_PROGRAM_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9ed2ce3a303df90fa69bde758f6be53b\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_FUNCTION__VARCHAR.ac1009a796": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_FUNCTION__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_4a097215791d0cfb29c2513c6fa39176.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_FUNCTION__VARCHAR.ac1009a796", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_FUNCTION__VARCHAR"], "alias": "transitions_full_FUNCTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a097215791d0cfb29c2513c6fa39176", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a097215791d0cfb29c2513c6fa39176"}, "created_at": 1753463698.0206816, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transitions_full_FUNCTION", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a097215791d0cfb29c2513c6fa39176\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FUNCTION", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "FUNCTION", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transitions_full_INPUTS.a310350a3f": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_full_INPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_full_INPUTS.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_full_INPUTS.a310350a3f", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_full_INPUTS"], "alias": "transitions_full_INPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0245304, "relation_name": "ALEO.not_null_test_core.transitions_full_INPUTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INPUTS", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INPUTS", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INPUTS__VARIANT.6022be75ee": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INPUTS__VARIANT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_8816feaa0031843e8c7b5f1424b1f760.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INPUTS__VARIANT.6022be75ee", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INPUTS__VARIANT"], "alias": "transitions_full_INPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8816feaa0031843e8c7b5f1424b1f760", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_8816feaa0031843e8c7b5f1424b1f760"}, "created_at": 1753463698.0259578, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transitions_full_INPUTS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8816feaa0031843e8c7b5f1424b1f760\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INPUTS", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARIANT", "column_name": "INPUTS", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transitions_full_OUTPUTS.7e84b2dd8b": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transitions_full_OUTPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transitions_full_OUTPUTS.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.not_null_test_core__transitions_full_OUTPUTS.7e84b2dd8b", "fqn": ["aleo_models", "gold", "tests", "transitions", "not_null_test_core__transitions_full_OUTPUTS"], "alias": "transitions_full_OUTPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0301633, "relation_name": "ALEO.not_null_test_core.transitions_full_OUTPUTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "OUTPUTS", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OUTPUTS", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_OUTPUTS__VARIANT.f224c5c2f2": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_OUTPUTS__VARIANT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_16b2ffe73a150d4fa6385918b26dca63.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_OUTPUTS__VARIANT.f224c5c2f2", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_OUTPUTS__VARIANT"], "alias": "transitions_full_OUTPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_16b2ffe73a150d4fa6385918b26dca63", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_16b2ffe73a150d4fa6385918b26dca63"}, "created_at": 1753463698.0316234, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.transitions_full_OUTPUTS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_16b2ffe73a150d4fa6385918b26dca63\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "OUTPUTS", "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARIANT", "column_name": "OUTPUTS", "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_full_TRANSITION_ID__TX_ID__BLOCK_ID.14b5b60dfb": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_test_core", "name": "dbt_utils_unique_combination_of_columns_test_core__transitions_full_TRANSITION_ID__TX_ID__BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_c5434e5a447bed3223ba0c7438603e8e.sql", "original_file_path": "models/gold/tests/transitions/test_core__transitions_full.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_full_TRANSITION_ID__TX_ID__BLOCK_ID.14b5b60dfb", "fqn": ["aleo_models", "gold", "tests", "transitions", "dbt_utils_unique_combination_of_columns_test_core__transitions_full_TRANSITION_ID__TX_ID__BLOCK_ID"], "alias": "transitions_full_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c5434e5a447bed3223ba0c7438603e8e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c5434e5a447bed3223ba0c7438603e8e"}, "created_at": 1753463698.0352848, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_test_core.transitions_full_TRANSITION_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c5434e5a447bed3223ba0c7438603e8e\") }}", "language": "sql", "refs": [{"name": "test_core__transitions_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transitions_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_core__transitions_full", "attached_node": "model.aleo_models.test_core__transitions_full", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TRANSITION_ID", "TX_ID", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('test_core__transitions_full')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_ID.62e487d703": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_full_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_full_BLOCK_ID.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_ID.62e487d703", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_full_BLOCK_ID"], "alias": "block_round_batches_full_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.04044, "relation_name": "ALEO.not_null_test_core.block_round_batches_full_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_ID__NUMBER.8aaa3c9247": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_ID__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_0762fe4d03283b396dfa55ff270b5bd5.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_ID__NUMBER.8aaa3c9247", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_ID__NUMBER"], "alias": "block_round_batches_full_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0762fe4d03283b396dfa55ff270b5bd5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0762fe4d03283b396dfa55ff270b5bd5"}, "created_at": 1753463698.041945, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_round_batches_full_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0762fe4d03283b396dfa55ff270b5bd5\") }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "NUMBER", "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_TIMESTAMP.2d68e82f29": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_full_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_full_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_TIMESTAMP.2d68e82f29", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_full_BLOCK_TIMESTAMP"], "alias": "block_round_batches_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0458229, "relation_name": "ALEO.not_null_test_core.block_round_batches_full_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.905525404b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_16899e4678d36eeb62aa6a7922e21d8b.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.905525404b", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "block_round_batches_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_16899e4678d36eeb62aa6a7922e21d8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_16899e4678d36eeb62aa6a7922e21d8b"}, "created_at": 1753463698.0472698, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_round_batches_full_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_16899e4678d36eeb62aa6a7922e21d8b\") }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "TIMESTAMP_NTZ", "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_full_BLOCK_TIMESTAMP__day__1.643c5f1859": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_full_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_0064c37f5a8bf3274ba125341c5be123.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_full_BLOCK_TIMESTAMP__day__1.643c5f1859", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_full_BLOCK_TIMESTAMP__day__1"], "alias": "block_round_batches_full_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0064c37f5a8bf3274ba125341c5be123", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_0064c37f5a8bf3274ba125341c5be123"}, "created_at": 1753463698.0509214, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.block_round_batches_full_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0064c37f5a8bf3274ba125341c5be123\") }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_round_batches_full_ROUND.040dc0178d": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_full_ROUND", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_full_ROUND.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_full_ROUND.040dc0178d", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_full_ROUND"], "alias": "block_round_batches_full_ROUND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0564756, "relation_name": "ALEO.not_null_test_core.block_round_batches_full_ROUND", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROUND", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROUND", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_ROUND__VARCHAR.37a81c3d55": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_ROUND__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_71993ee65cd7e24773f64b7f08abd105.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_ROUND__VARCHAR.37a81c3d55", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_ROUND__VARCHAR"], "alias": "block_round_batches_full_ROUND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_71993ee65cd7e24773f64b7f08abd105", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_71993ee65cd7e24773f64b7f08abd105"}, "created_at": 1753463698.0578935, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_round_batches_full_ROUND", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_71993ee65cd7e24773f64b7f08abd105\") }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROUND", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "ROUND", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_round_batches_full_BATCH_ID.3e510992b1": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_full_BATCH_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_full_BATCH_ID.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_full_BATCH_ID.3e510992b1", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_full_BATCH_ID"], "alias": "block_round_batches_full_BATCH_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0617268, "relation_name": "ALEO.not_null_test_core.block_round_batches_full_BATCH_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BATCH_ID", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BATCH_ID", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BATCH_ID__VARCHAR.1fd6f06fa8": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BATCH_ID__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_96afbfe916a4f484abcc23f6b820511b.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BATCH_ID__VARCHAR.1fd6f06fa8", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BATCH_ID__VARCHAR"], "alias": "block_round_batches_full_BATCH_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96afbfe916a4f484abcc23f6b820511b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_96afbfe916a4f484abcc23f6b820511b"}, "created_at": 1753463698.0631523, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_round_batches_full_BATCH_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96afbfe916a4f484abcc23f6b820511b\") }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BATCH_ID", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "BATCH_ID", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_round_batches_full_AUTHOR.ad0397ca02": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_full_AUTHOR", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_full_AUTHOR.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_full_AUTHOR.ad0397ca02", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_full_AUTHOR"], "alias": "block_round_batches_full_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.067505, "relation_name": "ALEO.not_null_test_core.block_round_batches_full_AUTHOR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AUTHOR", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AUTHOR", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_AUTHOR__VARCHAR.5259a818e2": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_AUTHOR__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_32768fb919c655155d36ee84f324b9b2.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_AUTHOR__VARCHAR.5259a818e2", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_AUTHOR__VARCHAR"], "alias": "block_round_batches_full_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_32768fb919c655155d36ee84f324b9b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_32768fb919c655155d36ee84f324b9b2"}, "created_at": 1753463698.0689514, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_round_batches_full_AUTHOR", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_32768fb919c655155d36ee84f324b9b2\") }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AUTHOR", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "AUTHOR", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_round_batches_full_COMMITTEE_ID.dbc5a638b0": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_full_COMMITTEE_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_full_COMMITTEE_ID.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_full_COMMITTEE_ID.dbc5a638b0", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_full_COMMITTEE_ID"], "alias": "block_round_batches_full_COMMITTEE_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0726216, "relation_name": "ALEO.not_null_test_core.block_round_batches_full_COMMITTEE_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMMITTEE_ID", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COMMITTEE_ID", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_COMMITTEE_ID__VARCHAR.1d92ec8574": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_test_core", "name": "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_COMMITTEE_ID__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d669ba5efe9d9ed024ff059544321717.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_full.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_COMMITTEE_ID__VARCHAR.1d92ec8574", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_COMMITTEE_ID__VARCHAR"], "alias": "block_round_batches_full_COMMITTEE_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d669ba5efe9d9ed024ff059544321717", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d669ba5efe9d9ed024ff059544321717"}, "created_at": 1753463698.0741282, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_test_core.block_round_batches_full_COMMITTEE_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d669ba5efe9d9ed024ff059544321717\") }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_full", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_round_batches_full"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMMITTEE_ID", "file_key_name": "models.test_core__block_round_batches_full", "attached_node": "model.aleo_models.test_core__block_round_batches_full", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "VARCHAR", "column_name": "COMMITTEE_ID", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_full')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_ID.d971186ebb": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_recent_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_recent_BLOCK_ID.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_ID.d971186ebb", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_recent_BLOCK_ID"], "alias": "block_round_batches_recent_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.079119, "relation_name": "ALEO.not_null_test_core.block_round_batches_recent_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.test_core__block_round_batches_recent", "attached_node": "model.aleo_models.test_core__block_round_batches_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_TIMESTAMP.62dec4ef7e": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_recent_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_recent_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_TIMESTAMP.62dec4ef7e", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_recent_BLOCK_TIMESTAMP"], "alias": "block_round_batches_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0805886, "relation_name": "ALEO.not_null_test_core.block_round_batches_recent_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_round_batches_recent", "attached_node": "model.aleo_models.test_core__block_round_batches_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_recent_BLOCK_TIMESTAMP__hour__3.31f275ffcb": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_recent_BLOCK_TIMESTAMP__hour__3", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_b0d78956948542973dd5f02f6c804c73.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_recent_BLOCK_TIMESTAMP__hour__3.31f275ffcb", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_recent_BLOCK_TIMESTAMP__hour__3"], "alias": "block_round_batches_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b0d78956948542973dd5f02f6c804c73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_b0d78956948542973dd5f02f6c804c73"}, "created_at": 1753463698.0820506, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.block_round_batches_recent_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b0d78956948542973dd5f02f6c804c73\") }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_round_batches_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__block_round_batches_recent", "attached_node": "model.aleo_models.test_core__block_round_batches_recent", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "hour", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__block_round_batches_recent_ROUND.04290e7152": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_recent_ROUND", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_recent_ROUND.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_recent_ROUND.04290e7152", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_recent_ROUND"], "alias": "block_round_batches_recent_ROUND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0876482, "relation_name": "ALEO.not_null_test_core.block_round_batches_recent_ROUND", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROUND", "file_key_name": "models.test_core__block_round_batches_recent", "attached_node": "model.aleo_models.test_core__block_round_batches_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROUND", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_round_batches_recent_BATCH_ID.561ce0099f": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_recent_BATCH_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_recent_BATCH_ID.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_recent_BATCH_ID.561ce0099f", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_recent_BATCH_ID"], "alias": "block_round_batches_recent_BATCH_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0890913, "relation_name": "ALEO.not_null_test_core.block_round_batches_recent_BATCH_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BATCH_ID", "file_key_name": "models.test_core__block_round_batches_recent", "attached_node": "model.aleo_models.test_core__block_round_batches_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BATCH_ID", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__block_round_batches_recent_COMMITTEE_ID.7f6368c8f4": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__block_round_batches_recent_COMMITTEE_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__block_round_batches_recent_COMMITTEE_ID.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__block_round_batches_recent_COMMITTEE_ID.7f6368c8f4", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "not_null_test_core__block_round_batches_recent_COMMITTEE_ID"], "alias": "block_round_batches_recent_COMMITTEE_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0905318, "relation_name": "ALEO.not_null_test_core.block_round_batches_recent_COMMITTEE_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__block_round_batches_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMMITTEE_ID", "file_key_name": "models.test_core__block_round_batches_recent", "attached_node": "model.aleo_models.test_core__block_round_batches_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COMMITTEE_ID", "model": "{{ get_where_subquery(ref('test_core__block_round_batches_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_round_batches_recent_BLOCK_ID__BATCH_ID__AUTHOR.d053219a63": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_test_core", "name": "dbt_utils_unique_combination_of_columns_test_core__block_round_batches_recent_BLOCK_ID__BATCH_ID__AUTHOR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_7aa5a06d549054253e7bef088ef72d99.sql", "original_file_path": "models/gold/tests/block_round_batches/test_core__block_round_batches_recent.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_round_batches_recent_BLOCK_ID__BATCH_ID__AUTHOR.d053219a63", "fqn": ["aleo_models", "gold", "tests", "block_round_batches", "dbt_utils_unique_combination_of_columns_test_core__block_round_batches_recent_BLOCK_ID__BATCH_ID__AUTHOR"], "alias": "block_round_batches_recent_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7aa5a06d549054253e7bef088ef72d99", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7aa5a06d549054253e7bef088ef72d99"}, "created_at": 1753463698.0921078, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_test_core.block_round_batches_recent_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7aa5a06d549054253e7bef088ef72d99\") }}", "language": "sql", "refs": [{"name": "test_core__block_round_batches_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__block_round_batches_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_core__block_round_batches_recent", "attached_node": "model.aleo_models.test_core__block_round_batches_recent", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "BATCH_ID", "AUTHOR"], "model": "{{ get_where_subquery(ref('test_core__block_round_batches_recent')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_test_core__transactions_recent_BLOCK_TIMESTAMP.b35a37cfc9": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transactions_recent_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transactions_recent_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/tests/transactions/test_core__transactions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transactions_recent_BLOCK_TIMESTAMP.b35a37cfc9", "fqn": ["aleo_models", "gold", "tests", "transactions", "not_null_test_core__transactions_recent_BLOCK_TIMESTAMP"], "alias": "transactions_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.0971146, "relation_name": "ALEO.not_null_test_core.transactions_recent_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transactions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transactions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transactions_recent", "attached_node": "model.aleo_models.test_core__transactions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transactions_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transactions_recent_BLOCK_TIMESTAMP__hour__3.106542823f": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_test_core", "name": "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transactions_recent_BLOCK_TIMESTAMP__hour__3", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_ab433b39b5b872639b85e7b64d95be68.sql", "original_file_path": "models/gold/tests/transactions/test_core__transactions_recent.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transactions_recent_BLOCK_TIMESTAMP__hour__3.106542823f", "fqn": ["aleo_models", "gold", "tests", "transactions", "dbt_expectations_expect_row_values_to_have_recent_data_test_core__transactions_recent_BLOCK_TIMESTAMP__hour__3"], "alias": "transactions_recent_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ab433b39b5b872639b85e7b64d95be68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_ab433b39b5b872639b85e7b64d95be68"}, "created_at": 1753463698.098776, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_test_core.transactions_recent_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ab433b39b5b872639b85e7b64d95be68\") }}", "language": "sql", "refs": [{"name": "test_core__transactions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transactions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.test_core__transactions_recent", "attached_node": "model.aleo_models.test_core__transactions_recent", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "hour", "interval": 3, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('test_core__transactions_recent')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_test_core__transactions_recent_TX_ID.f41922a071": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transactions_recent_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transactions_recent_TX_ID.sql", "original_file_path": "models/gold/tests/transactions/test_core__transactions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transactions_recent_TX_ID.f41922a071", "fqn": ["aleo_models", "gold", "tests", "transactions", "not_null_test_core__transactions_recent_TX_ID"], "alias": "transactions_recent_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1042597, "relation_name": "ALEO.not_null_test_core.transactions_recent_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transactions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transactions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.test_core__transactions_recent", "attached_node": "model.aleo_models.test_core__transactions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('test_core__transactions_recent')) }}"}, "namespace": null}}, "test.aleo_models.unique_test_core__transactions_recent_TX_ID.e391599cd6": {"database": "ALEO", "schema": "unique_test_core", "name": "unique_test_core__transactions_recent_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_test_core__transactions_recent_TX_ID.sql", "original_file_path": "models/gold/tests/transactions/test_core__transactions_recent.yml", "unique_id": "test.aleo_models.unique_test_core__transactions_recent_TX_ID.e391599cd6", "fqn": ["aleo_models", "gold", "tests", "transactions", "unique_test_core__transactions_recent_TX_ID"], "alias": "transactions_recent_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.10572, "relation_name": "ALEO.unique_test_core.transactions_recent_TX_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transactions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.test_core__transactions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.test_core__transactions_recent", "attached_node": "model.aleo_models.test_core__transactions_recent", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('test_core__transactions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transactions_recent_TX_SUCCEEDED.dbcb46771f": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transactions_recent_TX_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transactions_recent_TX_SUCCEEDED.sql", "original_file_path": "models/gold/tests/transactions/test_core__transactions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transactions_recent_TX_SUCCEEDED.dbcb46771f", "fqn": ["aleo_models", "gold", "tests", "transactions", "not_null_test_core__transactions_recent_TX_SUCCEEDED"], "alias": "transactions_recent_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1071303, "relation_name": "ALEO.not_null_test_core.transactions_recent_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transactions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transactions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.test_core__transactions_recent", "attached_node": "model.aleo_models.test_core__transactions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('test_core__transactions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transactions_recent_TX_TYPE.bf23c504c9": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transactions_recent_TX_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transactions_recent_TX_TYPE.sql", "original_file_path": "models/gold/tests/transactions/test_core__transactions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transactions_recent_TX_TYPE.bf23c504c9", "fqn": ["aleo_models", "gold", "tests", "transactions", "not_null_test_core__transactions_recent_TX_TYPE"], "alias": "transactions_recent_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "TX_SUCCEEDED = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "TX_SUCCEEDED = TRUE"}, "created_at": 1753463698.1089027, "relation_name": "ALEO.not_null_test_core.transactions_recent_TX_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"TX_SUCCEEDED = TRUE\") }}", "language": "sql", "refs": [{"name": "test_core__transactions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transactions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_TYPE", "file_key_name": "models.test_core__transactions_recent", "attached_node": "model.aleo_models.test_core__transactions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('test_core__transactions_recent')) }}"}, "namespace": null}}, "test.aleo_models.not_null_test_core__transactions_recent_TRANSITION_COUNT.b4f4994e62": {"database": "ALEO", "schema": "not_null_test_core", "name": "not_null_test_core__transactions_recent_TRANSITION_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_test_core__transactions_recent_TRANSITION_COUNT.sql", "original_file_path": "models/gold/tests/transactions/test_core__transactions_recent.yml", "unique_id": "test.aleo_models.not_null_test_core__transactions_recent_TRANSITION_COUNT.b4f4994e62", "fqn": ["aleo_models", "gold", "tests", "transactions", "not_null_test_core__transactions_recent_TRANSITION_COUNT"], "alias": "transactions_recent_TRANSITION_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1103218, "relation_name": "ALEO.not_null_test_core.transactions_recent_TRANSITION_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_core__transactions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.test_core__transactions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_COUNT", "file_key_name": "models.test_core__transactions_recent", "attached_node": "model.aleo_models.test_core__transactions_recent", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITION_COUNT", "model": "{{ get_where_subquery(ref('test_core__transactions_recent')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transactions_recent_TX_ID__BLOCK_ID.ec9bf4e9e1": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_test_core", "name": "dbt_utils_unique_combination_of_columns_test_core__transactions_recent_TX_ID__BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_11c1dd340820a7e451117bcb7dd24e99.sql", "original_file_path": "models/gold/tests/transactions/test_core__transactions_recent.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transactions_recent_TX_ID__BLOCK_ID.ec9bf4e9e1", "fqn": ["aleo_models", "gold", "tests", "transactions", "dbt_utils_unique_combination_of_columns_test_core__transactions_recent_TX_ID__BLOCK_ID"], "alias": "transactions_recent_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_11c1dd340820a7e451117bcb7dd24e99", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_11c1dd340820a7e451117bcb7dd24e99"}, "created_at": 1753463698.1117728, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_test_core.transactions_recent_TX_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_11c1dd340820a7e451117bcb7dd24e99\") }}", "language": "sql", "refs": [{"name": "test_core__transactions_recent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.test_core__transactions_recent"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.test_core__transactions_recent", "attached_node": "model.aleo_models.test_core__transactions_recent", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('test_core__transactions_recent')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_set_github_actions", "name": "dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_2686cf74c20fee627cd94ef5d5edadb9.sql", "original_file_path": "models/github_actions/github_actions__current_task_status.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f", "fqn": ["aleo_models", "github_actions", "dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True"], "alias": "current_task_status_PIPELINE_ACTIVE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2686cf74c20fee627cd94ef5d5edadb9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_2686cf74c20fee627cd94ef5d5edadb9"}, "created_at": 1753463698.1250029, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_set_github_actions.current_task_status_PIPELINE_ACTIVE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2686cf74c20fee627cd94ef5d5edadb9\") }}", "language": "sql", "refs": [{"name": "github_actions__current_task_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.github_actions__current_task_status"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PIPELINE_ACTIVE", "file_key_name": "models.github_actions__current_task_status", "attached_node": "model.aleo_models.github_actions__current_task_status", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": [true], "column_name": "PIPELINE_ACTIVE", "model": "{{ get_where_subquery(ref('github_actions__current_task_status')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__2.c9f4d937df": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_set_github_actions", "name": "dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__2", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_6228b20a775d50f1de9b680bcf34c6a5.sql", "original_file_path": "models/github_actions/github_actions__current_task_status.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__2.c9f4d937df", "fqn": ["aleo_models", "github_actions", "dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__2"], "alias": "current_task_status_SUCCESSES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6228b20a775d50f1de9b680bcf34c6a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "dbt_expectations_expect_column_6228b20a775d50f1de9b680bcf34c6a5"}, "created_at": 1753463698.1320035, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_set_github_actions.current_task_status_SUCCESSES", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"dbt_expectations_expect_column_6228b20a775d50f1de9b680bcf34c6a5\") }}", "language": "sql", "refs": [{"name": "github_actions__current_task_status", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.github_actions__current_task_status"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SUCCESSES", "file_key_name": "models.github_actions__current_task_status", "attached_node": "model.aleo_models.github_actions__current_task_status", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": [2], "column_name": "SUCCESSES", "model": "{{ get_where_subquery(ref('github_actions__current_task_status')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__block_round_batches_BLOCK_ID.d56ba7eaa6": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_round_batches_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_round_batches_BLOCK_ID.sql", "original_file_path": "models/silver/core/silver__block_round_batches.yml", "unique_id": "test.aleo_models.not_null_silver__block_round_batches_BLOCK_ID.d56ba7eaa6", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_round_batches_BLOCK_ID"], "alias": "block_round_batches_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1377852, "relation_name": "ALEO.not_null_silver.block_round_batches_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__block_round_batches", "attached_node": "model.aleo_models.silver__block_round_batches", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__block_round_batches')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_round_batches_BLOCK_TIMESTAMP.afe41027de": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_round_batches_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_round_batches_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/core/silver__block_round_batches.yml", "unique_id": "test.aleo_models.not_null_silver__block_round_batches_BLOCK_TIMESTAMP.afe41027de", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_round_batches_BLOCK_TIMESTAMP"], "alias": "block_round_batches_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1392415, "relation_name": "ALEO.not_null_silver.block_round_batches_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__block_round_batches", "attached_node": "model.aleo_models.silver__block_round_batches", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block_round_batches')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_round_batches_BLOCK_TIMESTAMP__day__1.4ca9507b37": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_round_batches_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_8132e09ba6ec30ee613607ce07ac53c5.sql", "original_file_path": "models/silver/core/silver__block_round_batches.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_round_batches_BLOCK_TIMESTAMP__day__1.4ca9507b37", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_round_batches_BLOCK_TIMESTAMP__day__1"], "alias": "block_round_batches_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_8132e09ba6ec30ee613607ce07ac53c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_8132e09ba6ec30ee613607ce07ac53c5"}, "created_at": 1753463698.1406853, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_silver.block_round_batches_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_8132e09ba6ec30ee613607ce07ac53c5\") }}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__block_round_batches", "attached_node": "model.aleo_models.silver__block_round_batches", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block_round_batches')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__block_round_batches_ROUND.8d90a0fbe4": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_round_batches_ROUND", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_round_batches_ROUND.sql", "original_file_path": "models/silver/core/silver__block_round_batches.yml", "unique_id": "test.aleo_models.not_null_silver__block_round_batches_ROUND.8d90a0fbe4", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_round_batches_ROUND"], "alias": "block_round_batches_ROUND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1462605, "relation_name": "ALEO.not_null_silver.block_round_batches_ROUND", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROUND", "file_key_name": "models.silver__block_round_batches", "attached_node": "model.aleo_models.silver__block_round_batches", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROUND", "model": "{{ get_where_subquery(ref('silver__block_round_batches')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_round_batches_BATCH_ID.f79193cd9f": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_round_batches_BATCH_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_round_batches_BATCH_ID.sql", "original_file_path": "models/silver/core/silver__block_round_batches.yml", "unique_id": "test.aleo_models.not_null_silver__block_round_batches_BATCH_ID.f79193cd9f", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_round_batches_BATCH_ID"], "alias": "block_round_batches_BATCH_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1476943, "relation_name": "ALEO.not_null_silver.block_round_batches_BATCH_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BATCH_ID", "file_key_name": "models.silver__block_round_batches", "attached_node": "model.aleo_models.silver__block_round_batches", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BATCH_ID", "model": "{{ get_where_subquery(ref('silver__block_round_batches')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_round_batches_AUTHOR.b517797091": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_round_batches_AUTHOR", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_round_batches_AUTHOR.sql", "original_file_path": "models/silver/core/silver__block_round_batches.yml", "unique_id": "test.aleo_models.not_null_silver__block_round_batches_AUTHOR.b517797091", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_round_batches_AUTHOR"], "alias": "block_round_batches_AUTHOR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1491032, "relation_name": "ALEO.not_null_silver.block_round_batches_AUTHOR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AUTHOR", "file_key_name": "models.silver__block_round_batches", "attached_node": "model.aleo_models.silver__block_round_batches", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AUTHOR", "model": "{{ get_where_subquery(ref('silver__block_round_batches')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_round_batches_COMMITTEE_ID.e9dcad2695": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_round_batches_COMMITTEE_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_round_batches_COMMITTEE_ID.sql", "original_file_path": "models/silver/core/silver__block_round_batches.yml", "unique_id": "test.aleo_models.not_null_silver__block_round_batches_COMMITTEE_ID.e9dcad2695", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_round_batches_COMMITTEE_ID"], "alias": "block_round_batches_COMMITTEE_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1505144, "relation_name": "ALEO.not_null_silver.block_round_batches_COMMITTEE_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMMITTEE_ID", "file_key_name": "models.silver__block_round_batches", "attached_node": "model.aleo_models.silver__block_round_batches", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COMMITTEE_ID", "model": "{{ get_where_subquery(ref('silver__block_round_batches')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_round_batches_TRANSMISSION_IDS.2943ef7ef2": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_round_batches_TRANSMISSION_IDS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_round_batches_TRANSMISSION_IDS.sql", "original_file_path": "models/silver/core/silver__block_round_batches.yml", "unique_id": "test.aleo_models.not_null_silver__block_round_batches_TRANSMISSION_IDS.2943ef7ef2", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_round_batches_TRANSMISSION_IDS"], "alias": "block_round_batches_TRANSMISSION_IDS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1519048, "relation_name": "ALEO.not_null_silver.block_round_batches_TRANSMISSION_IDS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSMISSION_IDS", "file_key_name": "models.silver__block_round_batches", "attached_node": "model.aleo_models.silver__block_round_batches", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSMISSION_IDS", "model": "{{ get_where_subquery(ref('silver__block_round_batches')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_round_batches_BLOCK_ID__ROUND__BATCH_ID.cb50403c63": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__block_round_batches_BLOCK_ID__ROUND__BATCH_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_dd22aa89bcd86e7e17d3e1c632ea9af7.sql", "original_file_path": "models/silver/core/silver__block_round_batches.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_round_batches_BLOCK_ID__ROUND__BATCH_ID.cb50403c63", "fqn": ["aleo_models", "silver", "core", "dbt_utils_unique_combination_of_columns_silver__block_round_batches_BLOCK_ID__ROUND__BATCH_ID"], "alias": "block_round_batches_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_dd22aa89bcd86e7e17d3e1c632ea9af7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_dd22aa89bcd86e7e17d3e1c632ea9af7"}, "created_at": 1753463698.1537664, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.block_round_batches_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_dd22aa89bcd86e7e17d3e1c632ea9af7\") }}", "language": "sql", "refs": [{"name": "silver__block_round_batches", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__block_round_batches"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__block_round_batches", "attached_node": "model.aleo_models.silver__block_round_batches", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "ROUND", "BATCH_ID"], "model": "{{ get_where_subquery(ref('silver__block_round_batches')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__transitions_fee_BLOCK_ID.448830d765": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_fee_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_fee_BLOCK_ID.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_fee_BLOCK_ID.448830d765", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_fee_BLOCK_ID"], "alias": "transitions_fee_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1591582, "relation_name": "ALEO.not_null_silver.transitions_fee_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_fee_BLOCK_TIMESTAMP.da4eb0a3f0": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_fee_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_fee_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_fee_BLOCK_TIMESTAMP.da4eb0a3f0", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_fee_BLOCK_TIMESTAMP"], "alias": "transitions_fee_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1606116, "relation_name": "ALEO.not_null_silver.transitions_fee_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_fee_TX_ID.ab5e58287c": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_fee_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_fee_TX_ID.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_fee_TX_ID.ab5e58287c", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_fee_TX_ID"], "alias": "transitions_fee_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.162023, "relation_name": "ALEO.not_null_silver.transitions_fee_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_fee_SUCCEEDED.6c5db24350": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_fee_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_fee_SUCCEEDED.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_fee_SUCCEEDED.6c5db24350", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_fee_SUCCEEDED"], "alias": "transitions_fee_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.164102, "relation_name": "ALEO.not_null_silver.transitions_fee_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SUCCEEDED", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_fee_TRANSITION_ID.ca32598656": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_fee_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_fee_TRANSITION_ID.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_fee_TRANSITION_ID.ca32598656", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_fee_TRANSITION_ID"], "alias": "transitions_fee_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1655304, "relation_name": "ALEO.not_null_silver.transitions_fee_TRANSITION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__transitions_fee_TRANSITION_ID.b254898411": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__transitions_fee_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__transitions_fee_TRANSITION_ID.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.unique_silver__transitions_fee_TRANSITION_ID.b254898411", "fqn": ["aleo_models", "silver", "core", "unique_silver__transitions_fee_TRANSITION_ID"], "alias": "transitions_fee_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.166942, "relation_name": "ALEO.unique_silver.transitions_fee_TRANSITION_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_fee_PROGRAM_ID.83e290b7f9": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_fee_PROGRAM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_fee_PROGRAM_ID.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_fee_PROGRAM_ID.83e290b7f9", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_fee_PROGRAM_ID"], "alias": "transitions_fee_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1683366, "relation_name": "ALEO.not_null_silver.transitions_fee_PROGRAM_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_fee_FUNCTION.b91e848824": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_fee_FUNCTION", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_fee_FUNCTION.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_fee_FUNCTION.b91e848824", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_fee_FUNCTION"], "alias": "transitions_fee_FUNCTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1697454, "relation_name": "ALEO.not_null_silver.transitions_fee_FUNCTION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FUNCTION", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FUNCTION", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_fee_INPUTS.990589d691": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_fee_INPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_fee_INPUTS.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_fee_INPUTS.990589d691", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_fee_INPUTS"], "alias": "transitions_fee_INPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1711648, "relation_name": "ALEO.not_null_silver.transitions_fee_INPUTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INPUTS", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INPUTS", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_fee_OUTPUTS.f3d1314c3a": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_fee_OUTPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_fee_OUTPUTS.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_fee_OUTPUTS.f3d1314c3a", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_fee_OUTPUTS"], "alias": "transitions_fee_OUTPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1725812, "relation_name": "ALEO.not_null_silver.transitions_fee_OUTPUTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "OUTPUTS", "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OUTPUTS", "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transitions_fee_BLOCK_ID__TX_ID__TRANSITION_ID.4605a65647": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__transitions_fee_BLOCK_ID__TX_ID__TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_0aa538874bfaf6ebb4ff5e652bce3e57.sql", "original_file_path": "models/silver/core/silver__transitions_fee.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transitions_fee_BLOCK_ID__TX_ID__TRANSITION_ID.4605a65647", "fqn": ["aleo_models", "silver", "core", "dbt_utils_unique_combination_of_columns_silver__transitions_fee_BLOCK_ID__TX_ID__TRANSITION_ID"], "alias": "transitions_fee_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0aa538874bfaf6ebb4ff5e652bce3e57", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0aa538874bfaf6ebb4ff5e652bce3e57"}, "created_at": 1753463698.174094, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.transitions_fee_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0aa538874bfaf6ebb4ff5e652bce3e57\") }}", "language": "sql", "refs": [{"name": "silver__transitions_fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__transitions_fee"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__transitions_fee", "attached_node": "model.aleo_models.silver__transitions_fee", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "TRANSITION_ID"], "model": "{{ get_where_subquery(ref('silver__transitions_fee')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_ID.f46d1d4fda": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_BLOCK_ID.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_ID.f46d1d4fda", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_BLOCK_ID"], "alias": "nonnative_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1792533, "relation_name": "ALEO.not_null_silver.nonnative_transfers_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_ID__NUMBER__FLOAT.60d1f0dd26": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_ID__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3ac02ed346b2bf7c5455cbaab08d591d.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_ID__NUMBER__FLOAT.60d1f0dd26", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_ID__NUMBER__FLOAT"], "alias": "nonnative_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ac02ed346b2bf7c5455cbaab08d591d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3ac02ed346b2bf7c5455cbaab08d591d"}, "created_at": 1753463698.1807163, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nonnative_transfers_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ac02ed346b2bf7c5455cbaab08d591d\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_TIMESTAMP.7304ed77b5": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_TIMESTAMP.7304ed77b5", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_BLOCK_TIMESTAMP"], "alias": "nonnative_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "inserted_timestamp < dateadd('hour', -1, SYSDATE())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "inserted_timestamp < dateadd('hour', -1, SYSDATE())"}, "created_at": 1753463698.1848736, "relation_name": "ALEO.not_null_silver.nonnative_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"inserted_timestamp < dateadd('hour', -1, SYSDATE())\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nonnative_transfers_BLOCK_TIMESTAMP__day__1.9392199c66": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nonnative_transfers_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_876f05a0cd17ee3840b4b625fba8f269.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nonnative_transfers_BLOCK_TIMESTAMP__day__1.9392199c66", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nonnative_transfers_BLOCK_TIMESTAMP__day__1"], "alias": "nonnative_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_876f05a0cd17ee3840b4b625fba8f269", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_876f05a0cd17ee3840b4b625fba8f269"}, "created_at": 1753463698.18633, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_silver.nonnative_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_876f05a0cd17ee3840b4b625fba8f269\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0a10fe399f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ce784b15e67d611891599a0a12321967.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0a10fe399f", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "nonnative_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ce784b15e67d611891599a0a12321967", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ce784b15e67d611891599a0a12321967"}, "created_at": 1753463698.1919296, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nonnative_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ce784b15e67d611891599a0a12321967\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__nonnative_transfers_TX_ID.1426f62e21": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_TX_ID.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_TX_ID.1426f62e21", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_TX_ID"], "alias": "nonnative_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.1957402, "relation_name": "ALEO.not_null_silver.nonnative_transfers_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_ID__STRING__VARCHAR.851fa74156": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a378936434f41620e0f53fa90f78c33e.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_ID__STRING__VARCHAR.851fa74156", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_ID__STRING__VARCHAR"], "alias": "nonnative_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a378936434f41620e0f53fa90f78c33e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a378936434f41620e0f53fa90f78c33e"}, "created_at": 1753463698.1971817, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nonnative_transfers_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a378936434f41620e0f53fa90f78c33e\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__nonnative_transfers_TRANSITION_ID.a93330752b": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_TRANSITION_ID.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_TRANSITION_ID.a93330752b", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_TRANSITION_ID"], "alias": "nonnative_transfers_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.20081, "relation_name": "ALEO.not_null_silver.nonnative_transfers_TRANSITION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSITION_ID__STRING__VARCHAR.9d8b17f55a": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSITION_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_66f32cbbbf4f5e3c81edfc1a70b61c01.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSITION_ID__STRING__VARCHAR.9d8b17f55a", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSITION_ID__STRING__VARCHAR"], "alias": "nonnative_transfers_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_66f32cbbbf4f5e3c81edfc1a70b61c01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_66f32cbbbf4f5e3c81edfc1a70b61c01"}, "created_at": 1753463698.202264, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nonnative_transfers_TRANSITION_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_66f32cbbbf4f5e3c81edfc1a70b61c01\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__nonnative_transfers_INDEX.9e1f26a6b5": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_INDEX", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_INDEX.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_INDEX.9e1f26a6b5", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_INDEX"], "alias": "nonnative_transfers_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2061043, "relation_name": "ALEO.not_null_silver.nonnative_transfers_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INDEX", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__nonnative_transfers_INDEX__NUMBER.89aab49a7e": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__nonnative_transfers_INDEX__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b987216bab39f1a78c111ea01e72b581.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__nonnative_transfers_INDEX__NUMBER.89aab49a7e", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_of_type_silver__nonnative_transfers_INDEX__NUMBER"], "alias": "nonnative_transfers_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b987216bab39f1a78c111ea01e72b581", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b987216bab39f1a78c111ea01e72b581"}, "created_at": 1753463698.2075403, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_silver.nonnative_transfers_INDEX", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b987216bab39f1a78c111ea01e72b581\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INDEX", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "NUMBER", "column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__nonnative_transfers_TX_SUCCEEDED.23e46f1519": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_TX_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_TX_SUCCEEDED.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_TX_SUCCEEDED.23e46f1519", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_TX_SUCCEEDED"], "alias": "nonnative_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2113605, "relation_name": "ALEO.not_null_silver.nonnative_transfers_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_SUCCEEDED__BOOLEAN.90878c6c53": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_SUCCEEDED__BOOLEAN", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a7ad15d8e122eb6878a3926ae0668c31.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_SUCCEEDED__BOOLEAN.90878c6c53", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_SUCCEEDED__BOOLEAN"], "alias": "nonnative_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a7ad15d8e122eb6878a3926ae0668c31", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a7ad15d8e122eb6878a3926ae0668c31"}, "created_at": 1753463698.2128046, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nonnative_transfers_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a7ad15d8e122eb6878a3926ae0668c31\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__nonnative_transfers_TRANSFER_TYPE.dedcc154e8": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_TRANSFER_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_TRANSFER_TYPE.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_TRANSFER_TYPE.dedcc154e8", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_TRANSFER_TYPE"], "alias": "nonnative_transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2164342, "relation_name": "ALEO.not_null_silver.nonnative_transfers_TRANSFER_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFER_TYPE", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSFER_TYPE__STRING__VARCHAR.e696b5a6e9": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSFER_TYPE__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d8da5909682f6ebbebb77c8fd7c58c62.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSFER_TYPE__STRING__VARCHAR.e696b5a6e9", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSFER_TYPE__STRING__VARCHAR"], "alias": "nonnative_transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d8da5909682f6ebbebb77c8fd7c58c62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d8da5909682f6ebbebb77c8fd7c58c62"}, "created_at": 1753463698.2178893, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nonnative_transfers_TRANSFER_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8da5909682f6ebbebb77c8fd7c58c62\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFER_TYPE", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__nonnative_transfers_SENDER.aeb92dc6a2": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_SENDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_SENDER.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_SENDER.aeb92dc6a2", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_SENDER"], "alias": "nonnative_transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_public_to_private')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_public_to_private')"}, "created_at": 1753463698.2216902, "relation_name": "ALEO.not_null_silver.nonnative_transfers_SENDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_public_to_private')\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_SENDER__STRING__VARCHAR.0ba22db44d": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_SENDER__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_4c738d9bc4d20195c6ab7f6ff936cb29.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_SENDER__STRING__VARCHAR.0ba22db44d", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_SENDER__STRING__VARCHAR"], "alias": "nonnative_transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4c738d9bc4d20195c6ab7f6ff936cb29", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_4c738d9bc4d20195c6ab7f6ff936cb29"}, "created_at": 1753463698.2231047, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nonnative_transfers_SENDER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4c738d9bc4d20195c6ab7f6ff936cb29\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__nonnative_transfers_RECEIVER.06a07e2030": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_RECEIVER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_RECEIVER.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_RECEIVER.06a07e2030", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_RECEIVER"], "alias": "nonnative_transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_private_to_public')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_private_to_public')"}, "created_at": 1753463698.2269323, "relation_name": "ALEO.not_null_silver.nonnative_transfers_RECEIVER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_private_to_public')\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_RECEIVER__STRING__VARCHAR.f84d37e7f8": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_RECEIVER__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b11d43f4bd6624c0c735c71bd7b78250.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_RECEIVER__STRING__VARCHAR.f84d37e7f8", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_RECEIVER__STRING__VARCHAR"], "alias": "nonnative_transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b11d43f4bd6624c0c735c71bd7b78250", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b11d43f4bd6624c0c735c71bd7b78250"}, "created_at": 1753463698.228352, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nonnative_transfers_RECEIVER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b11d43f4bd6624c0c735c71bd7b78250\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__nonnative_transfers_AMOUNT.d7f1ebd098": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__nonnative_transfers_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__nonnative_transfers_AMOUNT.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__nonnative_transfers_AMOUNT.d7f1ebd098", "fqn": ["aleo_models", "silver", "core", "not_null_silver__nonnative_transfers_AMOUNT"], "alias": "nonnative_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "transfer_type != 'transfer_private'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "transfer_type != 'transfer_private'"}, "created_at": 1753463698.2319639, "relation_name": "ALEO.not_null_silver.nonnative_transfers_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"transfer_type != 'transfer_private'\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_AMOUNT__NUMBER__FLOAT.a8f76752f9": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_AMOUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_4504d81d6efe4777a7205e70c4794424.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_AMOUNT__NUMBER__FLOAT.a8f76752f9", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_AMOUNT__NUMBER__FLOAT"], "alias": "nonnative_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4504d81d6efe4777a7205e70c4794424", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_4504d81d6efe4777a7205e70c4794424"}, "created_at": 1753463698.2333891, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nonnative_transfers_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4504d81d6efe4777a7205e70c4794424\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT", "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__nonnative_transfers_TRANSITION_ID.e6bf2f36fc": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__nonnative_transfers_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_ae6a8ba0823383cc8d11b603719db534.sql", "original_file_path": "models/silver/core/silver__nonnative_transfers.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__nonnative_transfers_TRANSITION_ID.e6bf2f36fc", "fqn": ["aleo_models", "silver", "core", "dbt_utils_unique_combination_of_columns_silver__nonnative_transfers_TRANSITION_ID"], "alias": "nonnative_transfers_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ae6a8ba0823383cc8d11b603719db534", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ae6a8ba0823383cc8d11b603719db534"}, "created_at": 1753463698.2372034, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.nonnative_transfers_TRANSITION_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ae6a8ba0823383cc8d11b603719db534\") }}", "language": "sql", "refs": [{"name": "silver__nonnative_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__nonnative_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__nonnative_transfers", "attached_node": "model.aleo_models.silver__nonnative_transfers", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TRANSITION_ID"], "model": "{{ get_where_subquery(ref('silver__nonnative_transfers')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__block_solutions_BLOCK_ID.a77b783b26": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_solutions_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_solutions_BLOCK_ID.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.not_null_silver__block_solutions_BLOCK_ID.a77b783b26", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_solutions_BLOCK_ID"], "alias": "block_solutions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2429576, "relation_name": "ALEO.not_null_silver.block_solutions_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_solutions_BLOCK_TIMESTAMP.a8fbe6f8fe": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_solutions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_solutions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.not_null_silver__block_solutions_BLOCK_TIMESTAMP.a8fbe6f8fe", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_solutions_BLOCK_TIMESTAMP"], "alias": "block_solutions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2444146, "relation_name": "ALEO.not_null_silver.block_solutions_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_solutions_BLOCK_TIMESTAMP__day__1.7ba6a86b55": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_solutions_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_2bdfc27a4d9af1d418991f7c0b4737fa.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_solutions_BLOCK_TIMESTAMP__day__1.7ba6a86b55", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_solutions_BLOCK_TIMESTAMP__day__1"], "alias": "block_solutions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_2bdfc27a4d9af1d418991f7c0b4737fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_2bdfc27a4d9af1d418991f7c0b4737fa"}, "created_at": 1753463698.2458615, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_silver.block_solutions_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_2bdfc27a4d9af1d418991f7c0b4737fa\") }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__block_solutions_BLOCK_PUZZLE_REWARD.24faf4f201": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_solutions_BLOCK_PUZZLE_REWARD", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_solutions_BLOCK_PUZZLE_REWARD.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.not_null_silver__block_solutions_BLOCK_PUZZLE_REWARD.24faf4f201", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_solutions_BLOCK_PUZZLE_REWARD"], "alias": "block_solutions_BLOCK_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2513874, "relation_name": "ALEO.not_null_silver.block_solutions_BLOCK_PUZZLE_REWARD", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_PUZZLE_REWARD", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_BLOCK_PUZZLE_REWARD__NUMBER__FLOAT.434ba3d0af": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_BLOCK_PUZZLE_REWARD__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a35ef1be91dfcf988e81812c0d6dd605.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_BLOCK_PUZZLE_REWARD__NUMBER__FLOAT.434ba3d0af", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_BLOCK_PUZZLE_REWARD__NUMBER__FLOAT"], "alias": "block_solutions_BLOCK_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a35ef1be91dfcf988e81812c0d6dd605", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a35ef1be91dfcf988e81812c0d6dd605"}, "created_at": 1753463698.2528284, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.block_solutions_BLOCK_PUZZLE_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a35ef1be91dfcf988e81812c0d6dd605\") }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_PUZZLE_REWARD", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_BLOCK_PUZZLE_REWARD__0.43a041aab9": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_between_silver", "name": "dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_BLOCK_PUZZLE_REWARD__0", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_7ef1b7a8f32cd527874d067bb3e7d5c5.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_BLOCK_PUZZLE_REWARD__0.43a041aab9", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_BLOCK_PUZZLE_REWARD__0"], "alias": "block_solutions_BLOCK_PUZZLE_REWARD", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ef1b7a8f32cd527874d067bb3e7d5c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_7ef1b7a8f32cd527874d067bb3e7d5c5"}, "created_at": 1753463698.2571504, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_between_silver.block_solutions_BLOCK_PUZZLE_REWARD", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ef1b7a8f32cd527874d067bb3e7d5c5\") }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_PUZZLE_REWARD", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "column_name": "BLOCK_PUZZLE_REWARD", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__block_solutions_ADDRESS.738847c2b0": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_solutions_ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_solutions_ADDRESS.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.not_null_silver__block_solutions_ADDRESS.738847c2b0", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_solutions_ADDRESS"], "alias": "block_solutions_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2728405, "relation_name": "ALEO.not_null_silver.block_solutions_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ADDRESS", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_solutions_COUNTER.887b97bb42": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_solutions_COUNTER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_solutions_COUNTER.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.not_null_silver__block_solutions_COUNTER.887b97bb42", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_solutions_COUNTER"], "alias": "block_solutions_COUNTER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.274598, "relation_name": "ALEO.not_null_silver.block_solutions_COUNTER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COUNTER", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COUNTER", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_solutions_EPOCH_HASH.cf3f348af3": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_solutions_EPOCH_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_solutions_EPOCH_HASH.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.not_null_silver__block_solutions_EPOCH_HASH.cf3f348af3", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_solutions_EPOCH_HASH"], "alias": "block_solutions_EPOCH_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2764168, "relation_name": "ALEO.not_null_silver.block_solutions_EPOCH_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EPOCH_HASH", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EPOCH_HASH", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_solutions_SOLUTION_ID.f2ff10acd9": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_solutions_SOLUTION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_solutions_SOLUTION_ID.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.not_null_silver__block_solutions_SOLUTION_ID.f2ff10acd9", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_solutions_SOLUTION_ID"], "alias": "block_solutions_SOLUTION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2781496, "relation_name": "ALEO.not_null_silver.block_solutions_SOLUTION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SOLUTION_ID", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SOLUTION_ID", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__block_solutions_SOLUTION_ID.e1537a54e8": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__block_solutions_SOLUTION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__block_solutions_SOLUTION_ID.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.unique_silver__block_solutions_SOLUTION_ID.e1537a54e8", "fqn": ["aleo_models", "silver", "core", "unique_silver__block_solutions_SOLUTION_ID"], "alias": "block_solutions_SOLUTION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2796202, "relation_name": "ALEO.unique_silver.block_solutions_SOLUTION_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SOLUTION_ID", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "SOLUTION_ID", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__block_solutions_TARGET.815fac748b": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_solutions_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_solutions_TARGET.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.not_null_silver__block_solutions_TARGET.815fac748b", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_solutions_TARGET"], "alias": "block_solutions_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.2810433, "relation_name": "ALEO.not_null_silver.block_solutions_TARGET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TARGET", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TARGET", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_TARGET__NUMBER__BIGINT.f884206507": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_TARGET__NUMBER__BIGINT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_57e9a57814a6906a295dcb196e4ef98a.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_TARGET__NUMBER__BIGINT.f884206507", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_TARGET__NUMBER__BIGINT"], "alias": "block_solutions_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57e9a57814a6906a295dcb196e4ef98a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_57e9a57814a6906a295dcb196e4ef98a"}, "created_at": 1753463698.283156, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.block_solutions_TARGET", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57e9a57814a6906a295dcb196e4ef98a\") }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TARGET", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "BIGINT"], "column_name": "TARGET", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_TARGET__0.b9c2ef6877": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_between_silver", "name": "dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_TARGET__0", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_8d72dfcadf96e5d221069acadcc699fa.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_TARGET__0.b9c2ef6877", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_TARGET__0"], "alias": "block_solutions_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d72dfcadf96e5d221069acadcc699fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_8d72dfcadf96e5d221069acadcc699fa"}, "created_at": 1753463698.2878602, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_between_silver.block_solutions_TARGET", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d72dfcadf96e5d221069acadcc699fa\") }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TARGET", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "column_name": "TARGET", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__block_solutions_REWARD_RAW.ae75e0236a": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__block_solutions_REWARD_RAW", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__block_solutions_REWARD_RAW.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.not_null_silver__block_solutions_REWARD_RAW.ae75e0236a", "fqn": ["aleo_models", "silver", "core", "not_null_silver__block_solutions_REWARD_RAW"], "alias": "block_solutions_REWARD_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.291909, "relation_name": "ALEO.not_null_silver.block_solutions_REWARD_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD_RAW", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARD_RAW", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_REWARD_RAW__0.995df7a67a": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_between_silver", "name": "dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_REWARD_RAW__0", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d4cad19ec603bc8e3f48d5764b96d4e2.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_REWARD_RAW__0.995df7a67a", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_REWARD_RAW__0"], "alias": "block_solutions_REWARD_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4cad19ec603bc8e3f48d5764b96d4e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d4cad19ec603bc8e3f48d5764b96d4e2"}, "created_at": 1753463698.293397, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_between_silver.block_solutions_REWARD_RAW", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4cad19ec603bc8e3f48d5764b96d4e2\") }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "REWARD_RAW", "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 0, "column_name": "REWARD_RAW", "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_solutions_BLOCK_ID__SOLUTION_ID.5138ce7dc4": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__block_solutions_BLOCK_ID__SOLUTION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_13316e299884b82596b825cdda7c9d76.sql", "original_file_path": "models/silver/core/silver__block_solutions.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_solutions_BLOCK_ID__SOLUTION_ID.5138ce7dc4", "fqn": ["aleo_models", "silver", "core", "dbt_utils_unique_combination_of_columns_silver__block_solutions_BLOCK_ID__SOLUTION_ID"], "alias": "block_solutions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_13316e299884b82596b825cdda7c9d76", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_13316e299884b82596b825cdda7c9d76"}, "created_at": 1753463698.2972593, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.block_solutions_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_13316e299884b82596b825cdda7c9d76\") }}", "language": "sql", "refs": [{"name": "silver__block_solutions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__block_solutions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__block_solutions", "attached_node": "model.aleo_models.silver__block_solutions", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "SOLUTION_ID"], "model": "{{ get_where_subquery(ref('silver__block_solutions')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_BLOCK_ID.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_BLOCK_ID"], "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3029258, "relation_name": "ALEO.not_null_silver.blocks_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER.fd6ec57c3f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ed159f8c3e830d8b58ebdd251a5db1b9.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER.fd6ec57c3f", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER"], "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ed159f8c3e830d8b58ebdd251a5db1b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ed159f8c3e830d8b58ebdd251a5db1b9"}, "created_at": 1753463698.3043923, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ed159f8c3e830d8b58ebdd251a5db1b9\") }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3082266, "relation_name": "ALEO.not_null_silver.blocks_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1"], "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692"}, "created_at": 1753463698.3096893, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_silver.blocks_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692\") }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27"}, "created_at": 1753463698.315264, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27\") }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__blocks_NETWORK_ID.adae7960cd": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_NETWORK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_NETWORK_ID.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_NETWORK_ID.adae7960cd", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_NETWORK_ID"], "alias": "blocks_NETWORK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3189123, "relation_name": "ALEO.not_null_silver.blocks_NETWORK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NETWORK_ID", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__blocks_TX_COUNT.34525b51e6": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_TX_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_TX_COUNT"], "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3205316, "relation_name": "ALEO.not_null_silver.blocks_TX_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT"], "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7"}, "created_at": 1753463698.321961, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_TX_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7\") }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_BLOCK_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_BLOCK_HASH.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_BLOCK_HASH"], "alias": "blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3256192, "relation_name": "ALEO.not_null_silver.blocks_BLOCK_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__blocks_PREVIOUS_HASH.c56022c694": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_PREVIOUS_HASH", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_PREVIOUS_HASH.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_PREVIOUS_HASH.c56022c694", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_PREVIOUS_HASH"], "alias": "blocks_PREVIOUS_HASH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3270802, "relation_name": "ALEO.not_null_silver.blocks_PREVIOUS_HASH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PREVIOUS_HASH", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PREVIOUS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__blocks_ROUND.0477c585db": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_ROUND", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_ROUND.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_ROUND.0477c585db", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_ROUND"], "alias": "blocks_ROUND", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3285103, "relation_name": "ALEO.not_null_silver.blocks_ROUND", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ROUND", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ROUND", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__blocks_COINBASE_TARGET.2e46eb161a": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_COINBASE_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_COINBASE_TARGET.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_COINBASE_TARGET.2e46eb161a", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_COINBASE_TARGET"], "alias": "blocks_COINBASE_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3300889, "relation_name": "ALEO.not_null_silver.blocks_COINBASE_TARGET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COINBASE_TARGET", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COINBASE_TARGET", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__blocks_CUMULATIVE_PROOF_TARGET.dc585148d7": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_CUMULATIVE_PROOF_TARGET", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_CUMULATIVE_PROOF_TARGET.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_CUMULATIVE_PROOF_TARGET.dc585148d7", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_CUMULATIVE_PROOF_TARGET"], "alias": "blocks_CUMULATIVE_PROOF_TARGET", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3315094, "relation_name": "ALEO.not_null_silver.blocks_CUMULATIVE_PROOF_TARGET", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CUMULATIVE_PROOF_TARGET", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUMULATIVE_PROOF_TARGET", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__blocks_CUMULATIVE_WEIGHT.4737bf66a0": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__blocks_CUMULATIVE_WEIGHT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__blocks_CUMULATIVE_WEIGHT.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.not_null_silver__blocks_CUMULATIVE_WEIGHT.4737bf66a0", "fqn": ["aleo_models", "silver", "core", "not_null_silver__blocks_CUMULATIVE_WEIGHT"], "alias": "blocks_CUMULATIVE_WEIGHT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.332931, "relation_name": "ALEO.not_null_silver.blocks_CUMULATIVE_WEIGHT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CUMULATIVE_WEIGHT", "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUMULATIVE_WEIGHT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__blocks_NETWORK_ID__BLOCK_ID.38265c56e7": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_NETWORK_ID__BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_4b01e6c7ab0d169a728f05e9540edd04.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__blocks_NETWORK_ID__BLOCK_ID.38265c56e7", "fqn": ["aleo_models", "silver", "core", "dbt_utils_unique_combination_of_columns_silver__blocks_NETWORK_ID__BLOCK_ID"], "alias": "blocks_NETWORK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4b01e6c7ab0d169a728f05e9540edd04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4b01e6c7ab0d169a728f05e9540edd04"}, "created_at": 1753463698.3343735, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.blocks_NETWORK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4b01e6c7ab0d169a728f05e9540edd04\") }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["NETWORK_ID", "BLOCK_ID"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.fsc_utils_sequence_gaps_silver__blocks_BLOCK_ID.e07d1d836f": {"database": "ALEO", "schema": "fsc_utils_sequence_gaps_silver", "name": "fsc_utils_sequence_gaps_silver__blocks_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "fsc_utils_sequence_gaps_silver__blocks_BLOCK_ID.sql", "original_file_path": "models/silver/core/silver__blocks.yml", "unique_id": "test.aleo_models.fsc_utils_sequence_gaps_silver__blocks_BLOCK_ID.e07d1d836f", "fqn": ["aleo_models", "silver", "core", "fsc_utils_sequence_gaps_silver__blocks_BLOCK_ID"], "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": ">10"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "error", "error_if": ">10"}, "created_at": 1753463698.3382955, "relation_name": "ALEO.fsc_utils_sequence_gaps_silver.blocks_BLOCK_ID", "raw_code": "{{ fsc_utils.test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",error_if=\">10\") }}", "language": "sql", "refs": [{"name": "silver__blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__blocks"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__blocks", "attached_node": "model.aleo_models.silver__blocks", "test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "fsc_utils"}}, "test.aleo_models.not_null_silver__transitions_BLOCK_ID.bbe019b39d": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_BLOCK_ID.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_BLOCK_ID.bbe019b39d", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_BLOCK_ID"], "alias": "transitions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3440309, "relation_name": "ALEO.not_null_silver.transitions_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_BLOCK_TIMESTAMP.afd4cf24b8": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_BLOCK_TIMESTAMP.afd4cf24b8", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_BLOCK_TIMESTAMP"], "alias": "transitions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3455122, "relation_name": "ALEO.not_null_silver.transitions_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_TX_ID.b2db0c6105": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_TX_ID.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_TX_ID.b2db0c6105", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_TX_ID"], "alias": "transitions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3471518, "relation_name": "ALEO.not_null_silver.transitions_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_INDEX.48df867820": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_INDEX", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_INDEX.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_INDEX.48df867820", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_INDEX"], "alias": "transitions_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3485951, "relation_name": "ALEO.not_null_silver.transitions_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INDEX", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_TRANSITION_ID.7ee1f08ff1": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_TRANSITION_ID.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_TRANSITION_ID.7ee1f08ff1", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_TRANSITION_ID"], "alias": "transitions_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3499985, "relation_name": "ALEO.not_null_silver.transitions_TRANSITION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__transitions_TRANSITION_ID.4afb2941b0": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__transitions_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__transitions_TRANSITION_ID.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.unique_silver__transitions_TRANSITION_ID.4afb2941b0", "fqn": ["aleo_models", "silver", "core", "unique_silver__transitions_TRANSITION_ID"], "alias": "transitions_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3514905, "relation_name": "ALEO.unique_silver.transitions_TRANSITION_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_TYPE.a2cee98629": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_TYPE.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_TYPE.a2cee98629", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_TYPE"], "alias": "transitions_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3529055, "relation_name": "ALEO.not_null_silver.transitions_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TYPE", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TYPE", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_PROGRAM_ID.74bd45f9a1": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_PROGRAM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_PROGRAM_ID.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_PROGRAM_ID.74bd45f9a1", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_PROGRAM_ID"], "alias": "transitions_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3542988, "relation_name": "ALEO.not_null_silver.transitions_PROGRAM_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_FUNCTION.71fc03afe4": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_FUNCTION", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_FUNCTION.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_FUNCTION.71fc03afe4", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_FUNCTION"], "alias": "transitions_FUNCTION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3557148, "relation_name": "ALEO.not_null_silver.transitions_FUNCTION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FUNCTION", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FUNCTION", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_INPUTS.0bb14ba3c1": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_INPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_INPUTS.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_INPUTS.0bb14ba3c1", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_INPUTS"], "alias": "transitions_INPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3571067, "relation_name": "ALEO.not_null_silver.transitions_INPUTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INPUTS", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INPUTS", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_OUTPUTS.c2a5fb73fc": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_OUTPUTS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_OUTPUTS.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_OUTPUTS.c2a5fb73fc", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_OUTPUTS"], "alias": "transitions_OUTPUTS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3586557, "relation_name": "ALEO.not_null_silver.transitions_OUTPUTS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "OUTPUTS", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "OUTPUTS", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__transitions_TRANSITIONS_ID.0b130702dd": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__transitions_TRANSITIONS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__transitions_TRANSITIONS_ID.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.unique_silver__transitions_TRANSITIONS_ID.0b130702dd", "fqn": ["aleo_models", "silver", "core", "unique_silver__transitions_TRANSITIONS_ID"], "alias": "transitions_TRANSITIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3600738, "relation_name": "ALEO.unique_silver.transitions_TRANSITIONS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITIONS_ID", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TRANSITIONS_ID", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transitions_TRANSITIONS_ID.4a45c510c7": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transitions_TRANSITIONS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transitions_TRANSITIONS_ID.sql", "original_file_path": "models/silver/core/silver__transitions.yml", "unique_id": "test.aleo_models.not_null_silver__transitions_TRANSITIONS_ID.4a45c510c7", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transitions_TRANSITIONS_ID"], "alias": "transitions_TRANSITIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.36149, "relation_name": "ALEO.not_null_silver.transitions_TRANSITIONS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transitions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITIONS_ID", "file_key_name": "models.silver__transitions", "attached_node": "model.aleo_models.silver__transitions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITIONS_ID", "model": "{{ get_where_subquery(ref('silver__transitions')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_ID.80c2c7e905": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__programs_DEPLOYMENT_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__programs_DEPLOYMENT_BLOCK_ID.sql", "original_file_path": "models/silver/core/silver__programs.yml", "unique_id": "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_ID.80c2c7e905", "fqn": ["aleo_models", "silver", "core", "not_null_silver__programs_DEPLOYMENT_BLOCK_ID"], "alias": "programs_DEPLOYMENT_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3643792, "relation_name": "ALEO.not_null_silver.programs_DEPLOYMENT_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEPLOYMENT_BLOCK_ID", "file_key_name": "models.silver__programs", "attached_node": "model.aleo_models.silver__programs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEPLOYMENT_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__programs')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_TIMESTAMP.5454b5bfed": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__programs_DEPLOYMENT_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__programs_DEPLOYMENT_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/core/silver__programs.yml", "unique_id": "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_TIMESTAMP.5454b5bfed", "fqn": ["aleo_models", "silver", "core", "not_null_silver__programs_DEPLOYMENT_BLOCK_TIMESTAMP"], "alias": "programs_DEPLOYMENT_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.365866, "relation_name": "ALEO.not_null_silver.programs_DEPLOYMENT_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEPLOYMENT_BLOCK_TIMESTAMP", "file_key_name": "models.silver__programs", "attached_node": "model.aleo_models.silver__programs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEPLOYMENT_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__programs')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__programs_PROGRAM_ID.fd89ca51af": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__programs_PROGRAM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__programs_PROGRAM_ID.sql", "original_file_path": "models/silver/core/silver__programs.yml", "unique_id": "test.aleo_models.not_null_silver__programs_PROGRAM_ID.fd89ca51af", "fqn": ["aleo_models", "silver", "core", "not_null_silver__programs_PROGRAM_ID"], "alias": "programs_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3672762, "relation_name": "ALEO.not_null_silver.programs_PROGRAM_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__programs", "attached_node": "model.aleo_models.silver__programs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__programs')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__programs_PROGRAM_ID.4d3f704ad9": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__programs_PROGRAM_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__programs_PROGRAM_ID.sql", "original_file_path": "models/silver/core/silver__programs.yml", "unique_id": "test.aleo_models.unique_silver__programs_PROGRAM_ID.4d3f704ad9", "fqn": ["aleo_models", "silver", "core", "unique_silver__programs_PROGRAM_ID"], "alias": "programs_PROGRAM_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3693206, "relation_name": "ALEO.unique_silver.programs_PROGRAM_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM_ID", "file_key_name": "models.silver__programs", "attached_node": "model.aleo_models.silver__programs", "test_metadata": {"name": "unique", "kwargs": {"column_name": "PROGRAM_ID", "model": "{{ get_where_subquery(ref('silver__programs')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__programs_EDITION.5c5a948f60": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__programs_EDITION", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__programs_EDITION.sql", "original_file_path": "models/silver/core/silver__programs.yml", "unique_id": "test.aleo_models.not_null_silver__programs_EDITION.5c5a948f60", "fqn": ["aleo_models", "silver", "core", "not_null_silver__programs_EDITION"], "alias": "programs_EDITION", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3707545, "relation_name": "ALEO.not_null_silver.programs_EDITION", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EDITION", "file_key_name": "models.silver__programs", "attached_node": "model.aleo_models.silver__programs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EDITION", "model": "{{ get_where_subquery(ref('silver__programs')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__programs_PROGRAM.1a50b41b8d": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__programs_PROGRAM", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__programs_PROGRAM.sql", "original_file_path": "models/silver/core/silver__programs.yml", "unique_id": "test.aleo_models.not_null_silver__programs_PROGRAM.1a50b41b8d", "fqn": ["aleo_models", "silver", "core", "not_null_silver__programs_PROGRAM"], "alias": "programs_PROGRAM", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3721623, "relation_name": "ALEO.not_null_silver.programs_PROGRAM", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAM", "file_key_name": "models.silver__programs", "attached_node": "model.aleo_models.silver__programs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAM", "model": "{{ get_where_subquery(ref('silver__programs')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__programs_VERIFYING_KEYS.4ba2be9b2b": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__programs_VERIFYING_KEYS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__programs_VERIFYING_KEYS.sql", "original_file_path": "models/silver/core/silver__programs.yml", "unique_id": "test.aleo_models.not_null_silver__programs_VERIFYING_KEYS.4ba2be9b2b", "fqn": ["aleo_models", "silver", "core", "not_null_silver__programs_VERIFYING_KEYS"], "alias": "programs_VERIFYING_KEYS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "program_id != 'credits.aleo'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "program_id != 'credits.aleo'"}, "created_at": 1753463698.3735924, "relation_name": "ALEO.not_null_silver.programs_VERIFYING_KEYS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"program_id != 'credits.aleo'\") }}", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "VERIFYING_KEYS", "file_key_name": "models.silver__programs", "attached_node": "model.aleo_models.silver__programs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VERIFYING_KEYS", "model": "{{ get_where_subquery(ref('silver__programs')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__programs_PROGRAMS_ID.e9988abeeb": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__programs_PROGRAMS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__programs_PROGRAMS_ID.sql", "original_file_path": "models/silver/core/silver__programs.yml", "unique_id": "test.aleo_models.not_null_silver__programs_PROGRAMS_ID.e9988abeeb", "fqn": ["aleo_models", "silver", "core", "not_null_silver__programs_PROGRAMS_ID"], "alias": "programs_PROGRAMS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3749833, "relation_name": "ALEO.not_null_silver.programs_PROGRAMS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAMS_ID", "file_key_name": "models.silver__programs", "attached_node": "model.aleo_models.silver__programs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROGRAMS_ID", "model": "{{ get_where_subquery(ref('silver__programs')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__programs_PROGRAMS_ID.243a1406df": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__programs_PROGRAMS_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__programs_PROGRAMS_ID.sql", "original_file_path": "models/silver/core/silver__programs.yml", "unique_id": "test.aleo_models.unique_silver__programs_PROGRAMS_ID.243a1406df", "fqn": ["aleo_models", "silver", "core", "unique_silver__programs_PROGRAMS_ID"], "alias": "programs_PROGRAMS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3763785, "relation_name": "ALEO.unique_silver.programs_PROGRAMS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__programs"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROGRAMS_ID", "file_key_name": "models.silver__programs", "attached_node": "model.aleo_models.silver__programs", "test_metadata": {"name": "unique", "kwargs": {"column_name": "PROGRAMS_ID", "model": "{{ get_where_subquery(ref('silver__programs')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__transactions_TX_TYPE.94f5edcf76": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__transactions_TX_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__transactions_TX_TYPE.sql", "original_file_path": "models/silver/core/silver__transactions.yml", "unique_id": "test.aleo_models.not_null_silver__transactions_TX_TYPE.94f5edcf76", "fqn": ["aleo_models", "silver", "core", "not_null_silver__transactions_TX_TYPE"], "alias": "transactions_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3796003, "relation_name": "ALEO.not_null_silver.transactions_TX_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_TYPE", "file_key_name": "models.silver__transactions", "attached_node": "model.aleo_models.silver__transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}}, "test.aleo_models.accepted_values_silver__transactions_TX_TYPE__deploy__execute__fee.c161516da6": {"database": "ALEO", "schema": "accepted_values_silver", "name": "accepted_values_silver__transactions_TX_TYPE__deploy__execute__fee", "resource_type": "test", "package_name": "aleo_models", "path": "accepted_values_silver__transa_5984b652f4f1adfb31385ac9170f22d9.sql", "original_file_path": "models/silver/core/silver__transactions.yml", "unique_id": "test.aleo_models.accepted_values_silver__transactions_TX_TYPE__deploy__execute__fee.c161516da6", "fqn": ["aleo_models", "silver", "core", "accepted_values_silver__transactions_TX_TYPE__deploy__execute__fee"], "alias": "transactions_TX_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_silver__transa_5984b652f4f1adfb31385ac9170f22d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_silver__transa_5984b652f4f1adfb31385ac9170f22d9"}, "created_at": 1753463698.3810577, "relation_name": "ALEO.accepted_values_silver.transactions_TX_TYPE", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_silver__transa_5984b652f4f1adfb31385ac9170f22d9\") }}", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_TYPE", "file_key_name": "models.silver__transactions", "attached_node": "model.aleo_models.silver__transactions", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["deploy", "execute", "fee"], "column_name": "TX_TYPE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61.sql", "original_file_path": "models/silver/core/silver__transactions.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6", "fqn": ["aleo_models", "silver", "core", "dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID"], "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61"}, "created_at": 1753463698.3859456, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.transactions_BLOCK_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3203e45b3edde979b2799695af369c61\") }}", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__transactions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__transactions", "attached_node": "model.aleo_models.silver__transactions", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__native_transfers_BLOCK_ID.5e3c7de616": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_BLOCK_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_BLOCK_ID.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_BLOCK_ID.5e3c7de616", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_BLOCK_ID"], "alias": "native_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.3913443, "relation_name": "ALEO.not_null_silver.native_transfers_BLOCK_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_ID__NUMBER__FLOAT.81e7861daa": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_ID__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b7d080a21547f028a626ea9cef6d89b1.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_ID__NUMBER__FLOAT.81e7861daa", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_ID__NUMBER__FLOAT"], "alias": "native_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b7d080a21547f028a626ea9cef6d89b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b7d080a21547f028a626ea9cef6d89b1"}, "created_at": 1753463698.3928092, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.native_transfers_BLOCK_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b7d080a21547f028a626ea9cef6d89b1\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_ID", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__native_transfers_BLOCK_TIMESTAMP.63641531f9": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_BLOCK_TIMESTAMP.63641531f9", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_BLOCK_TIMESTAMP"], "alias": "native_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "inserted_timestamp < dateadd('hour', -1, SYSDATE())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "inserted_timestamp < dateadd('hour', -1, SYSDATE())"}, "created_at": 1753463698.396665, "relation_name": "ALEO.not_null_silver.native_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"inserted_timestamp < dateadd('hour', -1, SYSDATE())\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__native_transfers_BLOCK_TIMESTAMP__day__1.2d2bf40c31": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__native_transfers_BLOCK_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_c87ba309672afdd07854cd8d56eb61b5.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__native_transfers_BLOCK_TIMESTAMP__day__1.2d2bf40c31", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_row_values_to_have_recent_data_silver__native_transfers_BLOCK_TIMESTAMP__day__1"], "alias": "native_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_c87ba309672afdd07854cd8d56eb61b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_c87ba309672afdd07854cd8d56eb61b5"}, "created_at": 1753463698.3980975, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_silver.native_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_c87ba309672afdd07854cd8d56eb61b5\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.eb086929f1": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_7200c29ebc118df7e5b2bfcf4647c8ed.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.eb086929f1", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "native_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7200c29ebc118df7e5b2bfcf4647c8ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_7200c29ebc118df7e5b2bfcf4647c8ed"}, "created_at": 1753463698.4037185, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.native_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7200c29ebc118df7e5b2bfcf4647c8ed\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__native_transfers_TX_ID.01c9c62342": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_TX_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_TX_ID.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_TX_ID.01c9c62342", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_TX_ID"], "alias": "native_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.4073634, "relation_name": "ALEO.not_null_silver.native_transfers_TX_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_ID__STRING__VARCHAR.a7e979ed60": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ac49c8aae23cd065915b7f532965806d.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_ID__STRING__VARCHAR.a7e979ed60", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_ID__STRING__VARCHAR"], "alias": "native_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ac49c8aae23cd065915b7f532965806d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ac49c8aae23cd065915b7f532965806d"}, "created_at": 1753463698.4088273, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.native_transfers_TX_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ac49c8aae23cd065915b7f532965806d\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_ID", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__native_transfers_TRANSITION_ID.54e8500287": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_TRANSITION_ID.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_TRANSITION_ID.54e8500287", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_TRANSITION_ID"], "alias": "native_transfers_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.4126549, "relation_name": "ALEO.not_null_silver.native_transfers_TRANSITION_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSITION_ID__STRING__VARCHAR.3b2b1dd0a1": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSITION_ID__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_41e0345b9fad1e0b029cac30ceb8b14c.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSITION_ID__STRING__VARCHAR.3b2b1dd0a1", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSITION_ID__STRING__VARCHAR"], "alias": "native_transfers_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_41e0345b9fad1e0b029cac30ceb8b14c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_41e0345b9fad1e0b029cac30ceb8b14c"}, "created_at": 1753463698.414086, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.native_transfers_TRANSITION_ID", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_41e0345b9fad1e0b029cac30ceb8b14c\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITION_ID", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TRANSITION_ID", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__native_transfers_INDEX.61be8d9435": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_INDEX", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_INDEX.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_INDEX.61be8d9435", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_INDEX"], "alias": "native_transfers_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.417925, "relation_name": "ALEO.not_null_silver.native_transfers_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INDEX", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__native_transfers_INDEX__NUMBER.eb69d10f39": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__native_transfers_INDEX__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_62e6893a46efc38af9160ea36f6d9bb5.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__native_transfers_INDEX__NUMBER.eb69d10f39", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_of_type_silver__native_transfers_INDEX__NUMBER"], "alias": "native_transfers_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_62e6893a46efc38af9160ea36f6d9bb5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_62e6893a46efc38af9160ea36f6d9bb5"}, "created_at": 1753463698.4193718, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_of_type_silver.native_transfers_INDEX", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_62e6893a46efc38af9160ea36f6d9bb5\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INDEX", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "NUMBER", "column_name": "INDEX", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__native_transfers_TX_SUCCEEDED.ea0c362e96": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_TX_SUCCEEDED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_TX_SUCCEEDED.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_TX_SUCCEEDED.ea0c362e96", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_TX_SUCCEEDED"], "alias": "native_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.423051, "relation_name": "ALEO.not_null_silver.native_transfers_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_SUCCEEDED__BOOLEAN.d8f9dbf44f": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_SUCCEEDED__BOOLEAN", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_2afafc6373a7825ae6425ac669402910.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_SUCCEEDED__BOOLEAN.d8f9dbf44f", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_SUCCEEDED__BOOLEAN"], "alias": "native_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2afafc6373a7825ae6425ac669402910", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_2afafc6373a7825ae6425ac669402910"}, "created_at": 1753463698.4245086, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.native_transfers_TX_SUCCEEDED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2afafc6373a7825ae6425ac669402910\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__native_transfers_TRANSFER_TYPE.427310e38e": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_TRANSFER_TYPE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_TRANSFER_TYPE.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_TRANSFER_TYPE.427310e38e", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_TRANSFER_TYPE"], "alias": "native_transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.428283, "relation_name": "ALEO.not_null_silver.native_transfers_TRANSFER_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFER_TYPE", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSFER_TYPE__STRING__VARCHAR.004b2c9c66": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSFER_TYPE__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_37c922d675339d3f574685c2961705d1.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSFER_TYPE__STRING__VARCHAR.004b2c9c66", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSFER_TYPE__STRING__VARCHAR"], "alias": "native_transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_37c922d675339d3f574685c2961705d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_37c922d675339d3f574685c2961705d1"}, "created_at": 1753463698.4297285, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.native_transfers_TRANSFER_TYPE", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_37c922d675339d3f574685c2961705d1\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFER_TYPE", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__native_transfers_SENDER.179c4b18d1": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_SENDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_SENDER.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_SENDER.179c4b18d1", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_SENDER"], "alias": "native_transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_public_to_private')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_public_to_private')"}, "created_at": 1753463698.4336002, "relation_name": "ALEO.not_null_silver.native_transfers_SENDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_public_to_private')\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_SENDER__STRING__VARCHAR.935658c650": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_SENDER__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_558711f2ddf1653411371e6201ac15d8.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_SENDER__STRING__VARCHAR.935658c650", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_SENDER__STRING__VARCHAR"], "alias": "native_transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_558711f2ddf1653411371e6201ac15d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_558711f2ddf1653411371e6201ac15d8"}, "created_at": 1753463698.4350257, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.native_transfers_SENDER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_558711f2ddf1653411371e6201ac15d8\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__native_transfers_RECEIVER.1eab825a30": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_RECEIVER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_RECEIVER.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_RECEIVER.1eab825a30", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_RECEIVER"], "alias": "native_transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_private_to_public')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_private_to_public')"}, "created_at": 1753463698.438678, "relation_name": "ALEO.not_null_silver.native_transfers_RECEIVER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"transfer_type IN ('transfer_public', 'transfer_public_as_signer', 'transfer_private_to_public')\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_RECEIVER__STRING__VARCHAR.1124d8fd7c": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_RECEIVER__STRING__VARCHAR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_4e7bcd6b73fd8b711a60d16285e40d17.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_RECEIVER__STRING__VARCHAR.1124d8fd7c", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_RECEIVER__STRING__VARCHAR"], "alias": "native_transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4e7bcd6b73fd8b711a60d16285e40d17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_4e7bcd6b73fd8b711a60d16285e40d17"}, "created_at": 1753463698.4400835, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.native_transfers_RECEIVER", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4e7bcd6b73fd8b711a60d16285e40d17\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver__native_transfers_AMOUNT.c135269c58": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__native_transfers_AMOUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__native_transfers_AMOUNT.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.not_null_silver__native_transfers_AMOUNT.c135269c58", "fqn": ["aleo_models", "silver", "core", "not_null_silver__native_transfers_AMOUNT"], "alias": "native_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "transfer_type != 'transfer_private'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "transfer_type != 'transfer_private'"}, "created_at": 1753463698.4439082, "relation_name": "ALEO.not_null_silver.native_transfers_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"transfer_type != 'transfer_private'\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_AMOUNT__NUMBER__FLOAT.0748011a17": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_AMOUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_cdea1d9d258d0c70db0a7a2a29053254.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_AMOUNT__NUMBER__FLOAT.0748011a17", "fqn": ["aleo_models", "silver", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_AMOUNT__NUMBER__FLOAT"], "alias": "native_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cdea1d9d258d0c70db0a7a2a29053254", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_cdea1d9d258d0c70db0a7a2a29053254"}, "created_at": 1753463698.4453228, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver.native_transfers_AMOUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cdea1d9d258d0c70db0a7a2a29053254\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT", "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__native_transfers_TRANSITION_ID.6af961123b": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__native_transfers_TRANSITION_ID", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_e7b24770e02e7b01a48988f752b1c621.sql", "original_file_path": "models/silver/core/silver__native_transfers.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__native_transfers_TRANSITION_ID.6af961123b", "fqn": ["aleo_models", "silver", "core", "dbt_utils_unique_combination_of_columns_silver__native_transfers_TRANSITION_ID"], "alias": "native_transfers_TRANSITION_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e7b24770e02e7b01a48988f752b1c621", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e7b24770e02e7b01a48988f752b1c621"}, "created_at": 1753463698.4492168, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.native_transfers_TRANSITION_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e7b24770e02e7b01a48988f752b1c621\") }}", "language": "sql", "refs": [{"name": "silver__native_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__native_transfers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__native_transfers", "attached_node": "model.aleo_models.silver__native_transfers", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TRANSITION_ID"], "model": "{{ get_where_subquery(ref('silver__native_transfers')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_MIN_BLOCK", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__4007defd4302dea903d5e6a249aa4f9b.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_MIN_BLOCK"], "alias": "transactions_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__4007defd4302dea903d5e6a249aa4f9b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__4007defd4302dea903d5e6a249aa4f9b"}, "created_at": 1753463698.4576015, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_MIN_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__4007defd4302dea903d5e6a249aa4f9b\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ccb60b239ffe84f2f768dd503ffeb9d2.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER"], "alias": "transactions_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ccb60b239ffe84f2f768dd503ffeb9d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ccb60b239ffe84f2f768dd503ffeb9d2"}, "created_at": 1753463698.459077, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_MIN_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ccb60b239ffe84f2f768dd503ffeb9d2\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_MAX_BLOCK", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__3ad8e52aad7bb67890ff7e1ecabc0013.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_MAX_BLOCK"], "alias": "transactions_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__3ad8e52aad7bb67890ff7e1ecabc0013", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__3ad8e52aad7bb67890ff7e1ecabc0013"}, "created_at": 1753463698.4627316, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_MAX_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__3ad8e52aad7bb67890ff7e1ecabc0013\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_0ecc25b3da0b67628deba57ade4f47a7.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER"], "alias": "transactions_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0ecc25b3da0b67628deba57ade4f47a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0ecc25b3da0b67628deba57ade4f47a7"}, "created_at": 1753463698.4641597, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_MAX_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0ecc25b3da0b67628deba57ade4f47a7\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__556a4ac324a149368d3fa95c294ab57d.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP"], "alias": "transactions_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__556a4ac324a149368d3fa95c294ab57d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__556a4ac324a149368d3fa95c294ab57d"}, "created_at": 1753463698.4684708, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__556a4ac324a149368d3fa95c294ab57d\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ef70d02b5f742445190f222de1b4c21e.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transactions_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef70d02b5f742445190f222de1b4c21e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ef70d02b5f742445190f222de1b4c21e"}, "created_at": 1753463698.4699044, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef70d02b5f742445190f222de1b4c21e\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__23d4d340017b1c38b6883fc127e2c45f.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP"], "alias": "transactions_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__23d4d340017b1c38b6883fc127e2c45f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__23d4d340017b1c38b6883fc127e2c45f"}, "created_at": 1753463698.4735606, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__23d4d340017b1c38b6883fc127e2c45f\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__2.8e7ea4e843": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__2", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_fe887773cec1c936e289128dfc14ff53.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__2.8e7ea4e843", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__2"], "alias": "transactions_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_fe887773cec1c936e289128dfc14ff53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_fe887773cec1c936e289128dfc14ff53"}, "created_at": 1753463698.4752188, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability.transactions_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_fe887773cec1c936e289128dfc14ff53\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_fcbb593664789566f7956c56de945b6d.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transactions_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fcbb593664789566f7956c56de945b6d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_fcbb593664789566f7956c56de945b6d"}, "created_at": 1753463698.4807215, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fcbb593664789566f7956c56de945b6d\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_BLOCKS_TESTED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__746b5cc8fc4ac305d5a20726cfe18f8e.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_BLOCKS_TESTED"], "alias": "transactions_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__746b5cc8fc4ac305d5a20726cfe18f8e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__746b5cc8fc4ac305d5a20726cfe18f8e"}, "created_at": 1753463698.4845784, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_BLOCKS_TESTED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__746b5cc8fc4ac305d5a20726cfe18f8e\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_951c243128cfdc9e77e1ad8c84c9a39f.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER"], "alias": "transactions_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_951c243128cfdc9e77e1ad8c84c9a39f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_951c243128cfdc9e77e1ad8c84c9a39f"}, "created_at": 1753463698.4860094, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_BLOCKS_TESTED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_951c243128cfdc9e77e1ad8c84c9a39f\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__1d08a6ef35119526932d590d6ba20417.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT"], "alias": "transactions_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__1d08a6ef35119526932d590d6ba20417", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__1d08a6ef35119526932d590d6ba20417"}, "created_at": 1753463698.4898844, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__1d08a6ef35119526932d590d6ba20417\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3aca3b508c3589ccd6a668288da74c17.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER"], "alias": "transactions_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3aca3b508c3589ccd6a668288da74c17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3aca3b508c3589ccd6a668288da74c17"}, "created_at": 1753463698.4913113, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3aca3b508c3589ccd6a668288da74c17\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__7c0ac3ca36b66ed2b9336ed0695b21da.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY"], "alias": "transactions_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__7c0ac3ca36b66ed2b9336ed0695b21da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__7c0ac3ca36b66ed2b9336ed0695b21da"}, "created_at": 1753463698.4949677, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__7c0ac3ca36b66ed2b9336ed0695b21da\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_1da9adf7e632428e0c035c919037aa8c.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY"], "alias": "transactions_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1da9adf7e632428e0c035c919037aa8c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_1da9adf7e632428e0c035c919037aa8c"}, "created_at": 1753463698.4966152, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1da9adf7e632428e0c035c919037aa8c\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__353a62dc527ea800ce8f462683cedf23.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT"], "alias": "transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__353a62dc527ea800ce8f462683cedf23", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__353a62dc527ea800ce8f462683cedf23"}, "created_at": 1753463698.5006278, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__353a62dc527ea800ce8f462683cedf23\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTIONS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTIONS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d27ff8c5b7bc3c5d58dfe0d24b50bbf5.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER"], "alias": "transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d27ff8c5b7bc3c5d58dfe0d24b50bbf5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d27ff8c5b7bc3c5d58dfe0d24b50bbf5"}, "created_at": 1753463698.5020628, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_TRANSACTIONS_IMPACTED_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d27ff8c5b7bc3c5d58dfe0d24b50bbf5\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTIONS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "TRANSACTIONS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS.c9d4d14ef4": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__5abbb0e3931a05c6900795ade4cc07d4.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS.c9d4d14ef4", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS"], "alias": "transactions_completeness_TEST_FAILURE_DETAILS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__5abbb0e3931a05c6900795ade4cc07d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__5abbb0e3931a05c6900795ade4cc07d4"}, "created_at": 1753463698.5059152, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_TEST_FAILURE_DETAILS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__5abbb0e3931a05c6900795ade4cc07d4\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_FAILURE_DETAILS", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEST_FAILURE_DETAILS", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_bbad62ea862bb57ff16884415724bfdf.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY"], "alias": "transactions_completeness_TEST_FAILURE_DETAILS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bbad62ea862bb57ff16884415724bfdf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_bbad62ea862bb57ff16884415724bfdf"}, "created_at": 1753463698.5073495, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_TEST_FAILURE_DETAILS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bbad62ea862bb57ff16884415724bfdf\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_FAILURE_DETAILS", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "TEST_FAILURE_DETAILS", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__e6c6b6e977dbc8401291567ae92fc09a.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP"], "alias": "transactions_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__e6c6b6e977dbc8401291567ae92fc09a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__e6c6b6e977dbc8401291567ae92fc09a"}, "created_at": 1753463698.5109923, "relation_name": "ALEO.not_null_silver_observability.transactions_completeness_TEST_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__e6c6b6e977dbc8401291567ae92fc09a\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_9052c05db8cec5fc61d637ccdf176d58.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transactions_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9052c05db8cec5fc61d637ccdf176d58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_9052c05db8cec5fc61d637ccdf176d58"}, "created_at": 1753463698.5126247, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transactions_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9052c05db8cec5fc61d637ccdf176d58\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver_observability", "name": "dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_4d8b52559e348e22b5ac81958cd41a3d.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transactions_completeness.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP"], "alias": "transactions_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4d8b52559e348e22b5ac81958cd41a3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4d8b52559e348e22b5ac81958cd41a3d"}, "created_at": 1753463698.5162783, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver_observability.transactions_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4d8b52559e348e22b5ac81958cd41a3d\") }}", "language": "sql", "refs": [{"name": "silver_observability__transactions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transactions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver_observability__transactions_completeness", "attached_node": "model.aleo_models.silver_observability__transactions_completeness", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TEST_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver_observability__transactions_completeness')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK.909c537da8": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_MIN_BLOCK", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__a1bd9eacca77da719799302358eb4a05.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK.909c537da8", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_MIN_BLOCK"], "alias": "transitions_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__a1bd9eacca77da719799302358eb4a05", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__a1bd9eacca77da719799302358eb4a05"}, "created_at": 1753463698.522036, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_MIN_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__a1bd9eacca77da719799302358eb4a05\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK__NUMBER.6e7bd83175": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_97be3dd8b0bfb60f9ff76dea0cd503d2.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK__NUMBER.6e7bd83175", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK__NUMBER"], "alias": "transitions_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_97be3dd8b0bfb60f9ff76dea0cd503d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_97be3dd8b0bfb60f9ff76dea0cd503d2"}, "created_at": 1753463698.523491, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_MIN_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_97be3dd8b0bfb60f9ff76dea0cd503d2\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK.a7e8d7d2cc": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_MAX_BLOCK", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__6ca1877e7152ebbb0aa6dfe1712aaf10.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK.a7e8d7d2cc", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_MAX_BLOCK"], "alias": "transitions_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__6ca1877e7152ebbb0aa6dfe1712aaf10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__6ca1877e7152ebbb0aa6dfe1712aaf10"}, "created_at": 1753463698.527343, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_MAX_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__6ca1877e7152ebbb0aa6dfe1712aaf10\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK__NUMBER.eccd066a90": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_3ab07571abd68c85313994b8e1fda676.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK__NUMBER.eccd066a90", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK__NUMBER"], "alias": "transitions_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ab07571abd68c85313994b8e1fda676", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_3ab07571abd68c85313994b8e1fda676"}, "created_at": 1753463698.5288162, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_MAX_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ab07571abd68c85313994b8e1fda676\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP.d214840fc5": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__563e507f46e0ded35ccb95f34152361d.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP.d214840fc5", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP"], "alias": "transitions_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__563e507f46e0ded35ccb95f34152361d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__563e507f46e0ded35ccb95f34152361d"}, "created_at": 1753463698.5324667, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__563e507f46e0ded35ccb95f34152361d\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.785fc84441": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_1bfde76a3be864dce28a28c5a06dd723.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.785fc84441", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transitions_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1bfde76a3be864dce28a28c5a06dd723", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_1bfde76a3be864dce28a28c5a06dd723"}, "created_at": 1753463698.533895, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1bfde76a3be864dce28a28c5a06dd723\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP.507a662a3b": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__df16316c773b55f36c9cdfdd44c20fa4.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP.507a662a3b", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP"], "alias": "transitions_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__df16316c773b55f36c9cdfdd44c20fa4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__df16316c773b55f36c9cdfdd44c20fa4"}, "created_at": 1753463698.5377305, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__df16316c773b55f36c9cdfdd44c20fa4\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__day__2.16c256a7fe": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__day__2", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_e814b9e1c4898269faf0328edd085805.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__day__2.16c256a7fe", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__day__2"], "alias": "transitions_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e814b9e1c4898269faf0328edd085805", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_e814b9e1c4898269faf0328edd085805"}, "created_at": 1753463698.5391455, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability.transitions_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e814b9e1c4898269faf0328edd085805\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.11b541324e": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b263000c42eb9233c353ae2e1452ebc1.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.11b541324e", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transitions_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b263000c42eb9233c353ae2e1452ebc1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b263000c42eb9233c353ae2e1452ebc1"}, "created_at": 1753463698.5449383, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b263000c42eb9233c353ae2e1452ebc1\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_TESTED.d238ab65d5": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_BLOCKS_TESTED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__84d8b9503b8ca2f3bf15588d2dbaaa16.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_TESTED.d238ab65d5", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_BLOCKS_TESTED"], "alias": "transitions_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__84d8b9503b8ca2f3bf15588d2dbaaa16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__84d8b9503b8ca2f3bf15588d2dbaaa16"}, "created_at": 1753463698.5486467, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_BLOCKS_TESTED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__84d8b9503b8ca2f3bf15588d2dbaaa16\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_TESTED__NUMBER.0f3ccee52b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_TESTED__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_f362fe24d72b7b5fa88d67a0708a9037.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_TESTED__NUMBER.0f3ccee52b", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_TESTED__NUMBER"], "alias": "transitions_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f362fe24d72b7b5fa88d67a0708a9037", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f362fe24d72b7b5fa88d67a0708a9037"}, "created_at": 1753463698.5502508, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_BLOCKS_TESTED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f362fe24d72b7b5fa88d67a0708a9037\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT.9471e82f7f": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__34159c0f70df8dd43471f63e5cffd216.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT.9471e82f7f", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT"], "alias": "transitions_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__34159c0f70df8dd43471f63e5cffd216", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__34159c0f70df8dd43471f63e5cffd216"}, "created_at": 1753463698.5538783, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__34159c0f70df8dd43471f63e5cffd216\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.7431a832ce": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_84458ad153521af1e9dbb8593c90bf24.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.7431a832ce", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER"], "alias": "transitions_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_84458ad153521af1e9dbb8593c90bf24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_84458ad153521af1e9dbb8593c90bf24"}, "created_at": 1753463698.5553012, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_84458ad153521af1e9dbb8593c90bf24\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY.efb96ec4d2": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__4cba3a10333d82135d6f839a07c19f06.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY.efb96ec4d2", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY"], "alias": "transitions_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__4cba3a10333d82135d6f839a07c19f06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__4cba3a10333d82135d6f839a07c19f06"}, "created_at": 1753463698.5596325, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__4cba3a10333d82135d6f839a07c19f06\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.4cb57045ba": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_2becd8ff4b5065e1b3bba174dc391779.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.4cb57045ba", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY"], "alias": "transitions_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2becd8ff4b5065e1b3bba174dc391779", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_2becd8ff4b5065e1b3bba174dc391779"}, "created_at": 1753463698.5610476, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2becd8ff4b5065e1b3bba174dc391779\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT.55427aec67": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__2ec09d11a5a687c1afe97eafee99d0cf.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT.55427aec67", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT"], "alias": "transitions_completeness_TRANSITIONS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__2ec09d11a5a687c1afe97eafee99d0cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__2ec09d11a5a687c1afe97eafee99d0cf"}, "created_at": 1753463698.5646844, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_TRANSITIONS_IMPACTED_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__2ec09d11a5a687c1afe97eafee99d0cf\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITIONS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSITIONS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT__NUMBER.cdb9dec65b": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_f0cabafa6232f892e185df01f2b41bd3.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT__NUMBER.cdb9dec65b", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT__NUMBER"], "alias": "transitions_completeness_TRANSITIONS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f0cabafa6232f892e185df01f2b41bd3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f0cabafa6232f892e185df01f2b41bd3"}, "created_at": 1753463698.5662854, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_TRANSITIONS_IMPACTED_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f0cabafa6232f892e185df01f2b41bd3\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSITIONS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "TRANSITIONS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS.ec94b823a4": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__f67d0fb0f687982c225ec923be725d3f.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS.ec94b823a4", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS"], "alias": "transitions_completeness_TEST_FAILURE_DETAILS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__f67d0fb0f687982c225ec923be725d3f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__f67d0fb0f687982c225ec923be725d3f"}, "created_at": 1753463698.5699186, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_TEST_FAILURE_DETAILS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__f67d0fb0f687982c225ec923be725d3f\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_FAILURE_DETAILS", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEST_FAILURE_DETAILS", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS__ARRAY.2808debeca": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS__ARRAY", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_6c2b431128bb680cad6722880bf6a866.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS__ARRAY.2808debeca", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS__ARRAY"], "alias": "transitions_completeness_TEST_FAILURE_DETAILS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c2b431128bb680cad6722880bf6a866", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_6c2b431128bb680cad6722880bf6a866"}, "created_at": 1753463698.571331, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_TEST_FAILURE_DETAILS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c2b431128bb680cad6722880bf6a866\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_FAILURE_DETAILS", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "TEST_FAILURE_DETAILS", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_TIMESTAMP.76b586c86c": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__transitions_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__3efd3669bb73748100314db0d060891d.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_TIMESTAMP.76b586c86c", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__transitions_completeness_TEST_TIMESTAMP"], "alias": "transitions_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__3efd3669bb73748100314db0d060891d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__3efd3669bb73748100314db0d060891d"}, "created_at": 1753463698.5751913, "relation_name": "ALEO.not_null_silver_observability.transitions_completeness_TEST_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__3efd3669bb73748100314db0d060891d\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.8a3c52ac2d": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_ba287eb99032e04fc76e6752076e07af.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.8a3c52ac2d", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "transitions_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ba287eb99032e04fc76e6752076e07af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_ba287eb99032e04fc76e6752076e07af"}, "created_at": 1753463698.5766377, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.transitions_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ba287eb99032e04fc76e6752076e07af\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transitions_completeness_TEST_TIMESTAMP.8cfd29e509": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver_observability", "name": "dbt_utils_unique_combination_of_columns_silver_observability__transitions_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_c84200a44e0dbd0d2837d986521d0dc0.sql", "original_file_path": "models/silver/core/_observability/silver_observability__transitions_completeness.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transitions_completeness_TEST_TIMESTAMP.8cfd29e509", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_utils_unique_combination_of_columns_silver_observability__transitions_completeness_TEST_TIMESTAMP"], "alias": "transitions_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c84200a44e0dbd0d2837d986521d0dc0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c84200a44e0dbd0d2837d986521d0dc0"}, "created_at": 1753463698.5802987, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver_observability.transitions_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c84200a44e0dbd0d2837d986521d0dc0\") }}", "language": "sql", "refs": [{"name": "silver_observability__transitions_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__transitions_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver_observability__transitions_completeness", "attached_node": "model.aleo_models.silver_observability__transitions_completeness", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TEST_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver_observability__transitions_completeness')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_MIN_BLOCK", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__blocks_completeness_MIN_BLOCK.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__blocks_completeness_MIN_BLOCK"], "alias": "blocks_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.5856588, "relation_name": "ALEO.not_null_silver_observability.blocks_completeness_MIN_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_2b2ae2a10b703b5c815cdb3a6f81cce8.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER"], "alias": "blocks_completeness_MIN_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2b2ae2a10b703b5c815cdb3a6f81cce8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_2b2ae2a10b703b5c815cdb3a6f81cce8"}, "created_at": 1753463698.587101, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_MIN_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2b2ae2a10b703b5c815cdb3a6f81cce8\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MIN_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_MAX_BLOCK", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__blocks_completeness_MAX_BLOCK.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__blocks_completeness_MAX_BLOCK"], "alias": "blocks_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.590918, "relation_name": "ALEO.not_null_silver_observability.blocks_completeness_MAX_BLOCK", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_98a14b25e84030c940fbe6f6cef0c5a5.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER"], "alias": "blocks_completeness_MAX_BLOCK", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_98a14b25e84030c940fbe6f6cef0c5a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_98a14b25e84030c940fbe6f6cef0c5a5"}, "created_at": 1753463698.5923462, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_MAX_BLOCK", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_98a14b25e84030c940fbe6f6cef0c5a5\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MAX_BLOCK", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__d5783dd05cb245139a83139f64b4471f.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP"], "alias": "blocks_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__d5783dd05cb245139a83139f64b4471f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__d5783dd05cb245139a83139f64b4471f"}, "created_at": 1753463698.595996, "relation_name": "ALEO.not_null_silver_observability.blocks_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__d5783dd05cb245139a83139f64b4471f\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_fdf8791c1242d2bbd119642fac04b41b.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blocks_completeness_MIN_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fdf8791c1242d2bbd119642fac04b41b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_fdf8791c1242d2bbd119642fac04b41b"}, "created_at": 1753463698.5976481, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_MIN_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fdf8791c1242d2bbd119642fac04b41b\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MIN_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MIN_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__330010c3e984d97050486179f4215d63.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP"], "alias": "blocks_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__330010c3e984d97050486179f4215d63", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__330010c3e984d97050486179f4215d63"}, "created_at": 1753463698.6012762, "relation_name": "ALEO.not_null_silver_observability.blocks_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__330010c3e984d97050486179f4215d63\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__2.9d37175599": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__2", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_cc80b5e6a5e8aa311968c40f495463e8.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__2.9d37175599", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__2"], "alias": "blocks_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cc80b5e6a5e8aa311968c40f495463e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cc80b5e6a5e8aa311968c40f495463e8"}, "created_at": 1753463698.6027143, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability.blocks_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cc80b5e6a5e8aa311968c40f495463e8\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_015be651c1780c6db1d8d374a42ffab8.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blocks_completeness_MAX_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_015be651c1780c6db1d8d374a42ffab8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_015be651c1780c6db1d8d374a42ffab8"}, "created_at": 1753463698.608288, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_MAX_BLOCK_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_015be651c1780c6db1d8d374a42ffab8\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MAX_BLOCK_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "MAX_BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_BLOCKS_TESTED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__99e3027d2fe7b2f203f30fcd4b6e9125.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__blocks_completeness_BLOCKS_TESTED"], "alias": "blocks_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__99e3027d2fe7b2f203f30fcd4b6e9125", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__99e3027d2fe7b2f203f30fcd4b6e9125"}, "created_at": 1753463698.6121168, "relation_name": "ALEO.not_null_silver_observability.blocks_completeness_BLOCKS_TESTED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__99e3027d2fe7b2f203f30fcd4b6e9125\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_0b3264df359d3f8b44b8a97ab56aa381.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER"], "alias": "blocks_completeness_BLOCKS_TESTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0b3264df359d3f8b44b8a97ab56aa381", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_0b3264df359d3f8b44b8a97ab56aa381"}, "created_at": 1753463698.6135864, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_BLOCKS_TESTED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0b3264df359d3f8b44b8a97ab56aa381\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_TESTED", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_TESTED", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__198534ddeddbb51e3d06f8a4e73f1501.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT"], "alias": "blocks_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__198534ddeddbb51e3d06f8a4e73f1501", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__198534ddeddbb51e3d06f8a4e73f1501"}, "created_at": 1753463698.6172562, "relation_name": "ALEO.not_null_silver_observability.blocks_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__198534ddeddbb51e3d06f8a4e73f1501\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_9b7e3a6085bf4a6aa60413f92c2ccad9.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER"], "alias": "blocks_completeness_BLOCKS_IMPACTED_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9b7e3a6085bf4a6aa60413f92c2ccad9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_9b7e3a6085bf4a6aa60413f92c2ccad9"}, "created_at": 1753463698.6187162, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_BLOCKS_IMPACTED_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9b7e3a6085bf4a6aa60413f92c2ccad9\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_COUNT", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCKS_IMPACTED_COUNT", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__99bdfd4854167228d9b7c4832a9f8b85.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY"], "alias": "blocks_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__99bdfd4854167228d9b7c4832a9f8b85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__99bdfd4854167228d9b7c4832a9f8b85"}, "created_at": 1753463698.6225321, "relation_name": "ALEO.not_null_silver_observability.blocks_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__99bdfd4854167228d9b7c4832a9f8b85\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_f61b448a930a2a53c44736d3fe8cd659.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY"], "alias": "blocks_completeness_BLOCKS_IMPACTED_ARRAY", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f61b448a930a2a53c44736d3fe8cd659", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_f61b448a930a2a53c44736d3fe8cd659"}, "created_at": 1753463698.6239595, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_BLOCKS_IMPACTED_ARRAY", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f61b448a930a2a53c44736d3fe8cd659\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKS_IMPACTED_ARRAY", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "BLOCKS_IMPACTED_ARRAY", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__e98f1304028a5580917fe1a58a5319e3.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS"], "alias": "blocks_completeness_TEST_FAILURE_DETAILS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__e98f1304028a5580917fe1a58a5319e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__e98f1304028a5580917fe1a58a5319e3"}, "created_at": 1753463698.627863, "relation_name": "ALEO.not_null_silver_observability.blocks_completeness_TEST_FAILURE_DETAILS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__e98f1304028a5580917fe1a58a5319e3\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_FAILURE_DETAILS", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEST_FAILURE_DETAILS", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_a4d8ba8af4317ea704c1980eefa42df9.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY"], "alias": "blocks_completeness_TEST_FAILURE_DETAILS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a4d8ba8af4317ea704c1980eefa42df9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_a4d8ba8af4317ea704c1980eefa42df9"}, "created_at": 1753463698.6292815, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_TEST_FAILURE_DETAILS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a4d8ba8af4317ea704c1980eefa42df9\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_FAILURE_DETAILS", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY"], "column_name": "TEST_FAILURE_DETAILS", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63": {"database": "ALEO", "schema": "not_null_silver_observability", "name": "not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_observability__15e6dc07bea96568ad6d73c4414fdaea.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63", "fqn": ["aleo_models", "silver", "core", "_observability", "not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP"], "alias": "blocks_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_observability__15e6dc07bea96568ad6d73c4414fdaea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_observability__15e6dc07bea96568ad6d73c4414fdaea"}, "created_at": 1753463698.6329186, "relation_name": "ALEO.not_null_silver_observability.blocks_completeness_TEST_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_observability__15e6dc07bea96568ad6d73c4414fdaea\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_62c982d7d0fb1d2af5b2c5641c285e1d.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ"], "alias": "blocks_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_62c982d7d0fb1d2af5b2c5641c285e1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_62c982d7d0fb1d2af5b2c5641c285e1d"}, "created_at": 1753463698.6343493, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability.blocks_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_62c982d7d0fb1d2af5b2c5641c285e1d\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TEST_TIMESTAMP", "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "TEST_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver_observability", "name": "dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_9f05360c51697073ffadd3a62388e134.sql", "original_file_path": "models/silver/core/_observability/silver_observability__blocks_completeness.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284", "fqn": ["aleo_models", "silver", "core", "_observability", "dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP"], "alias": "blocks_completeness_TEST_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9f05360c51697073ffadd3a62388e134", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9f05360c51697073ffadd3a62388e134"}, "created_at": 1753463698.6381547, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver_observability.blocks_completeness_TEST_TIMESTAMP", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9f05360c51697073ffadd3a62388e134\") }}", "language": "sql", "refs": [{"name": "silver_observability__blocks_completeness", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_observability__blocks_completeness"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver_observability__blocks_completeness", "attached_node": "model.aleo_models.silver_observability__blocks_completeness", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TEST_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver_observability__blocks_completeness')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.unique_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.dad8a89fd5": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__liquidity_pool__e1ca820872d3b4801bfcaa272f5fbe4b.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.unique_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.dad8a89fd5", "fqn": ["aleo_models", "silver", "defi", "unique_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id"], "alias": "liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_silver__liquidity_pool__e1ca820872d3b4801bfcaa272f5fbe4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_silver__liquidity_pool__e1ca820872d3b4801bfcaa272f5fbe4b"}, "created_at": 1753463698.6489472, "relation_name": "ALEO.unique_silver.liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_silver__liquidity_pool__e1ca820872d3b4801bfcaa272f5fbe4b\") }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "liquidity_pool_actions_arcane_id", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "unique", "kwargs": {"column_name": "liquidity_pool_actions_arcane_id", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.49e98bc54d": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_poo_0999845e62c8dda28d4c06416dba5343.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.49e98bc54d", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id"], "alias": "liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__liquidity_poo_0999845e62c8dda28d4c06416dba5343", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver__liquidity_poo_0999845e62c8dda28d4c06416dba5343"}, "created_at": 1753463698.651074, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__liquidity_poo_0999845e62c8dda28d4c06416dba5343\") }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "liquidity_pool_actions_arcane_id", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "liquidity_pool_actions_arcane_id", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_timestamp.607d46e17d": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_block_timestamp", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_block_timestamp.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_timestamp.607d46e17d", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_block_timestamp"], "alias": "liquidity_pool_actions_arcane_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6525908, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_block_timestamp", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_timestamp", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_id.9ee382d87d": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_block_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_block_id.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_id.9ee382d87d", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_block_id"], "alias": "liquidity_pool_actions_arcane_block_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6540246, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_block_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_id", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_tx_id.b2781f4c38": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_tx_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_tx_id.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_tx_id.b2781f4c38", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_tx_id"], "alias": "liquidity_pool_actions_arcane_tx_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.655421, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_tx_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tx_id", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_succeeded.9a1609d450": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_succeeded", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_succeeded.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_succeeded.9a1609d450", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_succeeded"], "alias": "liquidity_pool_actions_arcane_succeeded", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6568363, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_succeeded", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "succeeded", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "succeeded", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_root_action.31631b8121": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_root_action", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_root_action.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_root_action.31631b8121", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_root_action"], "alias": "liquidity_pool_actions_arcane_root_action", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6582236, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_root_action", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "root_action", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "root_action", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_action.08a6fb9778": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_liquidity_action", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_liquidity_action.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_action.08a6fb9778", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_liquidity_action"], "alias": "liquidity_pool_actions_arcane_liquidity_action", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6596408, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_liquidity_action", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "liquidity_action", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "liquidity_action", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_provider.553f1a352b": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_liquidity_provider", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_poo_2936276f4cbcf166a65b3b2d7f43fd47.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_provider.553f1a352b", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_liquidity_provider"], "alias": "liquidity_pool_actions_arcane_liquidity_provider", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__liquidity_poo_2936276f4cbcf166a65b3b2d7f43fd47", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver__liquidity_poo_2936276f4cbcf166a65b3b2d7f43fd47"}, "created_at": 1753463698.6610522, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_liquidity_provider", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__liquidity_poo_2936276f4cbcf166a65b3b2d7f43fd47\") }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "liquidity_provider", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "liquidity_provider", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount_unadj.425b449bb0": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_token1_amount_unadj", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_poo_3e346c4b9df2e85d4cc0347ef07b4ad7.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount_unadj.425b449bb0", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_token1_amount_unadj"], "alias": "liquidity_pool_actions_arcane_token1_amount_unadj", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__liquidity_poo_3e346c4b9df2e85d4cc0347ef07b4ad7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver__liquidity_poo_3e346c4b9df2e85d4cc0347ef07b4ad7"}, "created_at": 1753463698.662592, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_token1_amount_unadj", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__liquidity_poo_3e346c4b9df2e85d4cc0347ef07b4ad7\") }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token1_amount_unadj", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token1_amount_unadj", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount.6dc753684d": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_token1_amount", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_token1_amount.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount.6dc753684d", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_token1_amount"], "alias": "liquidity_pool_actions_arcane_token1_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6639907, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_token1_amount", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token1_amount", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token1_amount", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_symbol.facc7331c3": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_token1_symbol", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_token1_symbol.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_symbol.facc7331c3", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_token1_symbol"], "alias": "liquidity_pool_actions_arcane_token1_symbol", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6653855, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_token1_symbol", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token1_symbol", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token1_symbol", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_id.c8c9ecae19": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_token1_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_token1_id.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_id.c8c9ecae19", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_token1_id"], "alias": "liquidity_pool_actions_arcane_token1_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6667936, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_token1_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token1_id", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token1_id", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount_unadj.ae1f0f61ad": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_token2_amount_unadj", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_poo_3ae15b73c3aa7bf1319741770ca9d59a.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount_unadj.ae1f0f61ad", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_token2_amount_unadj"], "alias": "liquidity_pool_actions_arcane_token2_amount_unadj", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__liquidity_poo_3ae15b73c3aa7bf1319741770ca9d59a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver__liquidity_poo_3ae15b73c3aa7bf1319741770ca9d59a"}, "created_at": 1753463698.6681936, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_token2_amount_unadj", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__liquidity_poo_3ae15b73c3aa7bf1319741770ca9d59a\") }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token2_amount_unadj", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token2_amount_unadj", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount.7bb30f88a5": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_token2_amount", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_token2_amount.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount.7bb30f88a5", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_token2_amount"], "alias": "liquidity_pool_actions_arcane_token2_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6696, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_token2_amount", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token2_amount", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token2_amount", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_symbol.95680fca93": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_token2_symbol", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_token2_symbol.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_symbol.95680fca93", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_token2_symbol"], "alias": "liquidity_pool_actions_arcane_token2_symbol", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6709955, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_token2_symbol", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token2_symbol", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token2_symbol", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_id.63e913cec4": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_token2_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_pool_actions_arcane_token2_id.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_id.63e913cec4", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_token2_id"], "alias": "liquidity_pool_actions_arcane_token2_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6725106, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_token2_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token2_id", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "token2_id", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_inserted_timestamp.b0fc383cba": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_inserted_timestamp", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_poo_5da04fcf90860a02e1bf81ef88c3aa5a.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_inserted_timestamp.b0fc383cba", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_inserted_timestamp"], "alias": "liquidity_pool_actions_arcane_inserted_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__liquidity_poo_5da04fcf90860a02e1bf81ef88c3aa5a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver__liquidity_poo_5da04fcf90860a02e1bf81ef88c3aa5a"}, "created_at": 1753463698.6739142, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_inserted_timestamp", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__liquidity_poo_5da04fcf90860a02e1bf81ef88c3aa5a\") }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "inserted_timestamp", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "inserted_timestamp", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_modified_timestamp.76fa053692": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__liquidity_pool_actions_arcane_modified_timestamp", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__liquidity_poo_2bc193cfa12a0e014bcdf7d712cc7209.sql", "original_file_path": "models/silver/defi/silver__liquidity_pool_actions_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_modified_timestamp.76fa053692", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__liquidity_pool_actions_arcane_modified_timestamp"], "alias": "liquidity_pool_actions_arcane_modified_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__liquidity_poo_2bc193cfa12a0e014bcdf7d712cc7209", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver__liquidity_poo_2bc193cfa12a0e014bcdf7d712cc7209"}, "created_at": 1753463698.6753163, "relation_name": "ALEO.not_null_silver.liquidity_pool_actions_arcane_modified_timestamp", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__liquidity_poo_2bc193cfa12a0e014bcdf7d712cc7209\") }}", "language": "sql", "refs": [{"name": "silver__liquidity_pool_actions_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__liquidity_pool_actions_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "modified_timestamp", "file_key_name": "models.silver__liquidity_pool_actions_arcane", "attached_node": "model.aleo_models.silver__liquidity_pool_actions_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "modified_timestamp", "model": "{{ get_where_subquery(ref('silver__liquidity_pool_actions_arcane')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__swaps_arcane_swaps_arcane_id.0e66a90f51": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__swaps_arcane_swaps_arcane_id", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__swaps_arcane_swaps_arcane_id.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.unique_silver__swaps_arcane_swaps_arcane_id.0e66a90f51", "fqn": ["aleo_models", "silver", "defi", "unique_silver__swaps_arcane_swaps_arcane_id"], "alias": "swaps_arcane_swaps_arcane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6812613, "relation_name": "ALEO.unique_silver.swaps_arcane_swaps_arcane_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "swaps_arcane_id", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "unique", "kwargs": {"column_name": "swaps_arcane_id", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_swaps_arcane_id.382e933a4b": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_swaps_arcane_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_swaps_arcane_id.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_swaps_arcane_id.382e933a4b", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_swaps_arcane_id"], "alias": "swaps_arcane_swaps_arcane_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6827507, "relation_name": "ALEO.not_null_silver.swaps_arcane_swaps_arcane_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "swaps_arcane_id", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swaps_arcane_id", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_block_timestamp.7124d3ef74": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_block_timestamp", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_block_timestamp.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_block_timestamp.7124d3ef74", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_block_timestamp"], "alias": "swaps_arcane_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6841426, "relation_name": "ALEO.not_null_silver.swaps_arcane_block_timestamp", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_timestamp", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_block_id.ae07ea79bf": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_block_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_block_id.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_block_id.ae07ea79bf", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_block_id"], "alias": "swaps_arcane_block_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.685538, "relation_name": "ALEO.not_null_silver.swaps_arcane_block_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "block_id", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_tx_id.da3758b4fc": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_tx_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_tx_id.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_tx_id.da3758b4fc", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_tx_id"], "alias": "swaps_arcane_tx_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.686912, "relation_name": "ALEO.not_null_silver.swaps_arcane_tx_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "tx_id", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_succeeded.658ad63987": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_succeeded", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_succeeded.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_succeeded.658ad63987", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_succeeded"], "alias": "swaps_arcane_succeeded", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6882772, "relation_name": "ALEO.not_null_silver.swaps_arcane_succeeded", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "succeeded", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "succeeded", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_swapper.e30532ac6c": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_swapper", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_swapper.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_swapper.e30532ac6c", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_swapper"], "alias": "swaps_arcane_swapper", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6896663, "relation_name": "ALEO.not_null_silver.swaps_arcane_swapper", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "swapper", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "swapper", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_from_amount_unadj.262b7d15e0": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_from_amount_unadj", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_from_amount_unadj.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_from_amount_unadj.262b7d15e0", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_from_amount_unadj"], "alias": "swaps_arcane_from_amount_unadj", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6910224, "relation_name": "ALEO.not_null_silver.swaps_arcane_from_amount_unadj", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from_amount_unadj", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_amount_unadj", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_from_amount.d952b8f13e": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_from_amount", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_from_amount.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_from_amount.d952b8f13e", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_from_amount"], "alias": "swaps_arcane_from_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6925051, "relation_name": "ALEO.not_null_silver.swaps_arcane_from_amount", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from_amount", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_amount", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_from_symbol.0985ad2c91": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_from_symbol", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_from_symbol.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_from_symbol.0985ad2c91", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_from_symbol"], "alias": "swaps_arcane_from_symbol", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6938846, "relation_name": "ALEO.not_null_silver.swaps_arcane_from_symbol", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from_symbol", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_symbol", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_from_id.499cc5f26d": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_from_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_from_id.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_from_id.499cc5f26d", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_from_id"], "alias": "swaps_arcane_from_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6952598, "relation_name": "ALEO.not_null_silver.swaps_arcane_from_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "from_id", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_id", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_to_amount_unadj.4c5326450c": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_to_amount_unadj", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_to_amount_unadj.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_to_amount_unadj.4c5326450c", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_to_amount_unadj"], "alias": "swaps_arcane_to_amount_unadj", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6966481, "relation_name": "ALEO.not_null_silver.swaps_arcane_to_amount_unadj", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to_amount_unadj", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_amount_unadj", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_to_amount.de80560a28": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_to_amount", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_to_amount.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_to_amount.de80560a28", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_to_amount"], "alias": "swaps_arcane_to_amount", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6980145, "relation_name": "ALEO.not_null_silver.swaps_arcane_to_amount", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to_amount", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_amount", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_to_symbol.116dc88626": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_to_symbol", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_to_symbol.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_to_symbol.116dc88626", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_to_symbol"], "alias": "swaps_arcane_to_symbol", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.6993897, "relation_name": "ALEO.not_null_silver.swaps_arcane_to_symbol", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to_symbol", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_symbol", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_to_id.5a15570738": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_to_id", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_to_id.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_to_id.5a15570738", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_to_id"], "alias": "swaps_arcane_to_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.700775, "relation_name": "ALEO.not_null_silver.swaps_arcane_to_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "to_id", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "to_id", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__swaps_arcane_root_action.04d5488b0d": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__swaps_arcane_root_action", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__swaps_arcane_root_action.sql", "original_file_path": "models/silver/defi/silver__swaps_arcane.yml", "unique_id": "test.aleo_models.not_null_silver__swaps_arcane_root_action.04d5488b0d", "fqn": ["aleo_models", "silver", "defi", "not_null_silver__swaps_arcane_root_action"], "alias": "swaps_arcane_root_action", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.7023299, "relation_name": "ALEO.not_null_silver.swaps_arcane_root_action", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__swaps_arcane", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__swaps_arcane"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "root_action", "file_key_name": "models.silver__swaps_arcane", "attached_node": "model.aleo_models.silver__swaps_arcane", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "root_action", "model": "{{ get_where_subquery(ref('silver__swaps_arcane')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.efdb4b7e98": {"database": "ALEO", "schema": "not_null_silver_stats", "name": "not_null_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.efdb4b7e98", "fqn": ["aleo_models", "silver", "stats", "not_null_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR"], "alias": "core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.7062404, "relation_name": "ALEO.not_null_silver_stats.core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP_HOUR", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP_HOUR", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.5239671c2c": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_7015e09721c7e27db55b77cd103a804c.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.5239671c2c", "fqn": ["aleo_models", "silver", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ"], "alias": "core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7015e09721c7e27db55b77cd103a804c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_7015e09721c7e27db55b77cd103a804c"}, "created_at": 1753463698.7076995, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats.core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7015e09721c7e27db55b77cd103a804c\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP_HOUR", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_LTZ", "TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP_HOUR", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT.866f191153": {"database": "ALEO", "schema": "not_null_silver_stats", "name": "not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT.866f191153", "fqn": ["aleo_models", "silver", "stats", "not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT"], "alias": "core_metrics_hourly_TRANSACTION_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.7115912, "relation_name": "ALEO.not_null_silver_stats.core_metrics_hourly_TRANSACTION_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_COUNT", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.5a8e6e8880": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_38ec3ccc685cccd018097c3f145dc04e.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.5a8e6e8880", "fqn": ["aleo_models", "silver", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT"], "alias": "core_metrics_hourly_TRANSACTION_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_38ec3ccc685cccd018097c3f145dc04e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_38ec3ccc685cccd018097c3f145dc04e"}, "created_at": 1753463698.7130177, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats.core_metrics_hourly_TRANSACTION_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_38ec3ccc685cccd018097c3f145dc04e\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_COUNT", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.5b82a449dd": {"database": "ALEO", "schema": "not_null_silver_stats", "name": "not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_stats__core_me_e9b00ef99fc6ea74d437ae3b63b5c63e.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.5b82a449dd", "fqn": ["aleo_models", "silver", "stats", "not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS"], "alias": "core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_stats__core_me_e9b00ef99fc6ea74d437ae3b63b5c63e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_stats__core_me_e9b00ef99fc6ea74d437ae3b63b5c63e"}, "created_at": 1753463698.7167208, "relation_name": "ALEO.not_null_silver_stats.core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_stats__core_me_e9b00ef99fc6ea74d437ae3b63b5c63e\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT_SUCCESS", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_COUNT_SUCCESS", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.c5d0b2cc33": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_559f31cf8562db50983ff70a416112db.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.c5d0b2cc33", "fqn": ["aleo_models", "silver", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT"], "alias": "core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_559f31cf8562db50983ff70a416112db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_559f31cf8562db50983ff70a416112db"}, "created_at": 1753463698.7181466, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats.core_metrics_hourly_TRANSACTION_COUNT_SUCCESS", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_559f31cf8562db50983ff70a416112db\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT_SUCCESS", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_COUNT_SUCCESS", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED.4fe1d21e07": {"database": "ALEO", "schema": "not_null_silver_stats", "name": "not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_stats__core_me_340f848aaa40e25d2c02248da9e484c7.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED.4fe1d21e07", "fqn": ["aleo_models", "silver", "stats", "not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED"], "alias": "core_metrics_hourly_TRANSACTION_COUNT_FAILED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver_stats__core_me_340f848aaa40e25d2c02248da9e484c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver_stats__core_me_340f848aaa40e25d2c02248da9e484c7"}, "created_at": 1753463698.7219665, "relation_name": "ALEO.not_null_silver_stats.core_metrics_hourly_TRANSACTION_COUNT_FAILED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver_stats__core_me_340f848aaa40e25d2c02248da9e484c7\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT_FAILED", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSACTION_COUNT_FAILED", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.5f9df371b1": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d4b40f346b91ed15287fa1b3b77fb812.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.5f9df371b1", "fqn": ["aleo_models", "silver", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT"], "alias": "core_metrics_hourly_TRANSACTION_COUNT_FAILED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4b40f346b91ed15287fa1b3b77fb812", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d4b40f346b91ed15287fa1b3b77fb812"}, "created_at": 1753463698.7233784, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats.core_metrics_hourly_TRANSACTION_COUNT_FAILED", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4b40f346b91ed15287fa1b3b77fb812\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSACTION_COUNT_FAILED", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TRANSACTION_COUNT_FAILED", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT.1e73e0a934": {"database": "ALEO", "schema": "not_null_silver_stats", "name": "not_null_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT.1e73e0a934", "fqn": ["aleo_models", "silver", "stats", "not_null_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT"], "alias": "core_metrics_hourly_UNIQUE_FROM_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.7272043, "relation_name": "ALEO.not_null_silver_stats.core_metrics_hourly_UNIQUE_FROM_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "UNIQUE_FROM_COUNT", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_FROM_COUNT", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.225f59bd1e": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_b3fadd8eba961e59d6310a6a774690fd.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.225f59bd1e", "fqn": ["aleo_models", "silver", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT"], "alias": "core_metrics_hourly_UNIQUE_FROM_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b3fadd8eba961e59d6310a6a774690fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_b3fadd8eba961e59d6310a6a774690fd"}, "created_at": 1753463698.728665, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats.core_metrics_hourly_UNIQUE_FROM_COUNT", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b3fadd8eba961e59d6310a6a774690fd\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "UNIQUE_FROM_COUNT", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "UNIQUE_FROM_COUNT", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TOTAL_FEES.558b8cb0c7": {"database": "ALEO", "schema": "not_null_silver_stats", "name": "not_null_silver_stats__core_metrics_hourly_TOTAL_FEES", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver_stats__core_metrics_hourly_TOTAL_FEES.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TOTAL_FEES.558b8cb0c7", "fqn": ["aleo_models", "silver", "stats", "not_null_silver_stats__core_metrics_hourly_TOTAL_FEES"], "alias": "core_metrics_hourly_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.732307, "relation_name": "ALEO.not_null_silver_stats.core_metrics_hourly_TOTAL_FEES", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": null}}, "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TOTAL_FEES__DECIMAL__FLOAT__NUMBER.ada34dd6db": {"database": "ALEO", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TOTAL_FEES__DECIMAL__FLOAT__NUMBER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_column_d58577ff63990d3053a2133fc7f9acda.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TOTAL_FEES__DECIMAL__FLOAT__NUMBER.ada34dd6db", "fqn": ["aleo_models", "silver", "stats", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TOTAL_FEES__DECIMAL__FLOAT__NUMBER"], "alias": "core_metrics_hourly_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d58577ff63990d3053a2133fc7f9acda", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_column_d58577ff63990d3053a2133fc7f9acda"}, "created_at": 1753463698.7337673, "relation_name": "ALEO.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats.core_metrics_hourly_TOTAL_FEES", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d58577ff63990d3053a2133fc7f9acda\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["DECIMAL", "FLOAT", "NUMBER"], "column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_stats__core_metrics_hourly__INSERTED_TIMESTAMP__day__1.874a5937d5": {"database": "ALEO", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_stats", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_stats__core_metrics_hourly__INSERTED_TIMESTAMP__day__1", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_expectations_expect_row_va_56a2a6ad0e294fe99284b9241be2e6db.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_stats__core_metrics_hourly__INSERTED_TIMESTAMP__day__1.874a5937d5", "fqn": ["aleo_models", "silver", "stats", "dbt_expectations_expect_row_values_to_have_recent_data_silver_stats__core_metrics_hourly__INSERTED_TIMESTAMP__day__1"], "alias": "core_metrics_hourly", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_56a2a6ad0e294fe99284b9241be2e6db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_56a2a6ad0e294fe99284b9241be2e6db"}, "created_at": 1753463698.7376003, "relation_name": "ALEO.dbt_expectations_expect_row_values_to_have_recent_data_silver_stats.core_metrics_hourly", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_56a2a6ad0e294fe99284b9241be2e6db\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.0797e73b88": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver_stats", "name": "dbt_utils_unique_combination_of_columns_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_79034807350e88d26ae38552c59ff923.sql", "original_file_path": "models/silver/stats/silver_stats__core_metrics_hourly.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.0797e73b88", "fqn": ["aleo_models", "silver", "stats", "dbt_utils_unique_combination_of_columns_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR"], "alias": "core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_79034807350e88d26ae38552c59ff923", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_79034807350e88d26ae38552c59ff923"}, "created_at": 1753463698.7431455, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver_stats.core_metrics_hourly_BLOCK_TIMESTAMP_HOUR", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_79034807350e88d26ae38552c59ff923\") }}", "language": "sql", "refs": [{"name": "silver_stats__core_metrics_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver_stats__core_metrics_hourly"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver_stats__core_metrics_hourly", "attached_node": "model.aleo_models.silver_stats__core_metrics_hourly", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_TIMESTAMP_HOUR"], "model": "{{ get_where_subquery(ref('silver_stats__core_metrics_hourly')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__complete_provider_asset_metadata_PROVIDER.b0c689d31b": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_provider_asset_metadata_PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_provider_asset_metadata_PROVIDER.sql", "original_file_path": "models/silver/price/silver__complete_provider_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_provider_asset_metadata_PROVIDER.b0c689d31b", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_provider_asset_metadata_PROVIDER"], "alias": "complete_provider_asset_metadata_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.7480876, "relation_name": "ALEO.not_null_silver.complete_provider_asset_metadata_PROVIDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_provider_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_provider_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROVIDER", "file_key_name": "models.silver__complete_provider_asset_metadata", "attached_node": "model.aleo_models.silver__complete_provider_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver__complete_provider_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_provider_asset_metadata_ASSET_ID.b4b221e9f2": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_provider_asset_metadata_ASSET_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_provider_asset_metadata_ASSET_ID.sql", "original_file_path": "models/silver/price/silver__complete_provider_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_provider_asset_metadata_ASSET_ID.b4b221e9f2", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_provider_asset_metadata_ASSET_ID"], "alias": "complete_provider_asset_metadata_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.749766, "relation_name": "ALEO.not_null_silver.complete_provider_asset_metadata_ASSET_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_provider_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_provider_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_ID", "file_key_name": "models.silver__complete_provider_asset_metadata", "attached_node": "model.aleo_models.silver__complete_provider_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('silver__complete_provider_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_provider_asset_metadata_MODIFIED_TIMESTAMP.47fee02027": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_provider_asset_metadata_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_prov_fa4fe74558b3df7164164432a6615ed8.sql", "original_file_path": "models/silver/price/silver__complete_provider_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_provider_asset_metadata_MODIFIED_TIMESTAMP.47fee02027", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_provider_asset_metadata_MODIFIED_TIMESTAMP"], "alias": "complete_provider_asset_metadata_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__complete_prov_fa4fe74558b3df7164164432a6615ed8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver__complete_prov_fa4fe74558b3df7164164432a6615ed8"}, "created_at": 1753463698.7512147, "relation_name": "ALEO.not_null_silver.complete_provider_asset_metadata_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__complete_prov_fa4fe74558b3df7164164432a6615ed8\") }}", "language": "sql", "refs": [{"name": "silver__complete_provider_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_provider_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.silver__complete_provider_asset_metadata", "attached_node": "model.aleo_models.silver__complete_provider_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_provider_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__complete_provider_asset_metadata_COMPLETE_PROVIDER_ASSET_METADATA_ID.945e90b882": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__complete_provider_asset_metadata_COMPLETE_PROVIDER_ASSET_METADATA_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__complete_provid_3e03a9f981544feb398db50a0a29cdc7.sql", "original_file_path": "models/silver/price/silver__complete_provider_asset_metadata.yml", "unique_id": "test.aleo_models.unique_silver__complete_provider_asset_metadata_COMPLETE_PROVIDER_ASSET_METADATA_ID.945e90b882", "fqn": ["aleo_models", "silver", "price", "unique_silver__complete_provider_asset_metadata_COMPLETE_PROVIDER_ASSET_METADATA_ID"], "alias": "complete_provider_asset_metadata_COMPLETE_PROVIDER_ASSET_METADATA_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_silver__complete_provid_3e03a9f981544feb398db50a0a29cdc7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_silver__complete_provid_3e03a9f981544feb398db50a0a29cdc7"}, "created_at": 1753463698.7526586, "relation_name": "ALEO.unique_silver.complete_provider_asset_metadata_COMPLETE_PROVIDER_ASSET_METADATA_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_silver__complete_provid_3e03a9f981544feb398db50a0a29cdc7\") }}", "language": "sql", "refs": [{"name": "silver__complete_provider_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__complete_provider_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMPLETE_PROVIDER_ASSET_METADATA_ID", "file_key_name": "models.silver__complete_provider_asset_metadata", "attached_node": "model.aleo_models.silver__complete_provider_asset_metadata", "test_metadata": {"name": "unique", "kwargs": {"column_name": "COMPLETE_PROVIDER_ASSET_METADATA_ID", "model": "{{ get_where_subquery(ref('silver__complete_provider_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_asset_metadata_ASSET_ID__TOKEN_ADDRESS__NAME__SYMBOL__PLATFORM__PLATFORM_ID__PROVIDER.e355e7b6b2": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__complete_provider_asset_metadata_ASSET_ID__TOKEN_ADDRESS__NAME__SYMBOL__PLATFORM__PLATFORM_ID__PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_e4eef7b7bb8906d97bd9258750290d97.sql", "original_file_path": "models/silver/price/silver__complete_provider_asset_metadata.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_asset_metadata_ASSET_ID__TOKEN_ADDRESS__NAME__SYMBOL__PLATFORM__PLATFORM_ID__PROVIDER.e355e7b6b2", "fqn": ["aleo_models", "silver", "price", "dbt_utils_unique_combination_of_columns_silver__complete_provider_asset_metadata_ASSET_ID__TOKEN_ADDRESS__NAME__SYMBOL__PLATFORM__PLATFORM_ID__PROVIDER"], "alias": "complete_provider_asset_metadata_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e4eef7b7bb8906d97bd9258750290d97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e4eef7b7bb8906d97bd9258750290d97"}, "created_at": 1753463698.7540803, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.complete_provider_asset_metadata_ASSET_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e4eef7b7bb8906d97bd9258750290d97\") }}", "language": "sql", "refs": [{"name": "silver__complete_provider_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__complete_provider_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__complete_provider_asset_metadata", "attached_node": "model.aleo_models.silver__complete_provider_asset_metadata", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ASSET_ID", "TOKEN_ADDRESS", "NAME", "SYMBOL", "PLATFORM", "PLATFORM_ID", "PROVIDER"], "model": "{{ get_where_subquery(ref('silver__complete_provider_asset_metadata')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__complete_provider_prices_PROVIDER.982c1dc287": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_provider_prices_PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_provider_prices_PROVIDER.sql", "original_file_path": "models/silver/price/silver__complete_provider_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_provider_prices_PROVIDER.982c1dc287", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_provider_prices_PROVIDER"], "alias": "complete_provider_prices_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.7602181, "relation_name": "ALEO.not_null_silver.complete_provider_prices_PROVIDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_provider_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_provider_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROVIDER", "file_key_name": "models.silver__complete_provider_prices", "attached_node": "model.aleo_models.silver__complete_provider_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver__complete_provider_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_provider_prices_ASSET_ID.a10e7dad30": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_provider_prices_ASSET_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_provider_prices_ASSET_ID.sql", "original_file_path": "models/silver/price/silver__complete_provider_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_provider_prices_ASSET_ID.a10e7dad30", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_provider_prices_ASSET_ID"], "alias": "complete_provider_prices_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.761712, "relation_name": "ALEO.not_null_silver.complete_provider_prices_ASSET_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_provider_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_provider_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ASSET_ID", "file_key_name": "models.silver__complete_provider_prices", "attached_node": "model.aleo_models.silver__complete_provider_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ID", "model": "{{ get_where_subquery(ref('silver__complete_provider_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_provider_prices_RECORDED_HOUR.73c3cfdf0d": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_provider_prices_RECORDED_HOUR", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_provider_prices_RECORDED_HOUR.sql", "original_file_path": "models/silver/price/silver__complete_provider_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_provider_prices_RECORDED_HOUR.73c3cfdf0d", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_provider_prices_RECORDED_HOUR"], "alias": "complete_provider_prices_RECORDED_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.7631304, "relation_name": "ALEO.not_null_silver.complete_provider_prices_RECORDED_HOUR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_provider_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_provider_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECORDED_HOUR", "file_key_name": "models.silver__complete_provider_prices", "attached_node": "model.aleo_models.silver__complete_provider_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECORDED_HOUR", "model": "{{ get_where_subquery(ref('silver__complete_provider_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_provider_prices_MODIFIED_TIMESTAMP.b205ba003b": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_provider_prices_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_provider_prices_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/silver/price/silver__complete_provider_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_provider_prices_MODIFIED_TIMESTAMP.b205ba003b", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_provider_prices_MODIFIED_TIMESTAMP"], "alias": "complete_provider_prices_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.7645743, "relation_name": "ALEO.not_null_silver.complete_provider_prices_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_provider_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_provider_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.silver__complete_provider_prices", "attached_node": "model.aleo_models.silver__complete_provider_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_provider_prices')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__complete_provider_prices_COMPLETE_PROVIDER_PRICES_ID.52bf8dd406": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__complete_provider_prices_COMPLETE_PROVIDER_PRICES_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__complete_provid_f49d76afb82b6b1245838eaac0e62f56.sql", "original_file_path": "models/silver/price/silver__complete_provider_prices.yml", "unique_id": "test.aleo_models.unique_silver__complete_provider_prices_COMPLETE_PROVIDER_PRICES_ID.52bf8dd406", "fqn": ["aleo_models", "silver", "price", "unique_silver__complete_provider_prices_COMPLETE_PROVIDER_PRICES_ID"], "alias": "complete_provider_prices_COMPLETE_PROVIDER_PRICES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_silver__complete_provid_f49d76afb82b6b1245838eaac0e62f56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_silver__complete_provid_f49d76afb82b6b1245838eaac0e62f56"}, "created_at": 1753463698.7660165, "relation_name": "ALEO.unique_silver.complete_provider_prices_COMPLETE_PROVIDER_PRICES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_silver__complete_provid_f49d76afb82b6b1245838eaac0e62f56\") }}", "language": "sql", "refs": [{"name": "silver__complete_provider_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__complete_provider_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMPLETE_PROVIDER_PRICES_ID", "file_key_name": "models.silver__complete_provider_prices", "attached_node": "model.aleo_models.silver__complete_provider_prices", "test_metadata": {"name": "unique", "kwargs": {"column_name": "COMPLETE_PROVIDER_PRICES_ID", "model": "{{ get_where_subquery(ref('silver__complete_provider_prices')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_prices_ASSET_ID__RECORDED_HOUR__PROVIDER.6e3c3ab2b1": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__complete_provider_prices_ASSET_ID__RECORDED_HOUR__PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_e54004aaffd15b013a71f54fe378969e.sql", "original_file_path": "models/silver/price/silver__complete_provider_prices.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_prices_ASSET_ID__RECORDED_HOUR__PROVIDER.6e3c3ab2b1", "fqn": ["aleo_models", "silver", "price", "dbt_utils_unique_combination_of_columns_silver__complete_provider_prices_ASSET_ID__RECORDED_HOUR__PROVIDER"], "alias": "complete_provider_prices_ASSET_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e54004aaffd15b013a71f54fe378969e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e54004aaffd15b013a71f54fe378969e"}, "created_at": 1753463698.7675033, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.complete_provider_prices_ASSET_ID", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e54004aaffd15b013a71f54fe378969e\") }}", "language": "sql", "refs": [{"name": "silver__complete_provider_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__complete_provider_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__complete_provider_prices", "attached_node": "model.aleo_models.silver__complete_provider_prices", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ASSET_ID", "RECORDED_HOUR", "PROVIDER"], "model": "{{ get_where_subquery(ref('silver__complete_provider_prices')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__complete_native_prices_HOUR.84672fd317": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_prices_HOUR", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_prices_HOUR.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_prices_HOUR.84672fd317", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_prices_HOUR"], "alias": "complete_native_prices_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8461528, "relation_name": "ALEO.not_null_silver.complete_native_prices_HOUR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "HOUR", "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HOUR", "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_prices_SYMBOL.640aa16109": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_prices_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_prices_SYMBOL.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_prices_SYMBOL.640aa16109", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_prices_SYMBOL"], "alias": "complete_native_prices_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8476214, "relation_name": "ALEO.not_null_silver.complete_native_prices_SYMBOL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYMBOL", "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_prices_BLOCKCHAIN.3557f90197": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_prices_BLOCKCHAIN", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_prices_BLOCKCHAIN.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_prices_BLOCKCHAIN.3557f90197", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_prices_BLOCKCHAIN"], "alias": "complete_native_prices_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8491673, "relation_name": "ALEO.not_null_silver.complete_native_prices_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_prices_PROVIDER.391be2433a": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_prices_PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_prices_PROVIDER.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_prices_PROVIDER.391be2433a", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_prices_PROVIDER"], "alias": "complete_native_prices_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8506103, "relation_name": "ALEO.not_null_silver.complete_native_prices_PROVIDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROVIDER", "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_prices_PRICE.5d22b3dfe0": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_prices_PRICE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_prices_PRICE.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_prices_PRICE.5d22b3dfe0", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_prices_PRICE"], "alias": "complete_native_prices_PRICE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8520095, "relation_name": "ALEO.not_null_silver.complete_native_prices_PRICE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PRICE", "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_prices_IS_IMPUTED.9b41704925": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_prices_IS_IMPUTED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_prices_IS_IMPUTED.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_prices_IS_IMPUTED.9b41704925", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_prices_IS_IMPUTED"], "alias": "complete_native_prices_IS_IMPUTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8534186, "relation_name": "ALEO.not_null_silver.complete_native_prices_IS_IMPUTED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IS_IMPUTED", "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IS_IMPUTED", "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_prices__INSERTED_TIMESTAMP.030d747f3c": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_prices__INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_prices__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_prices__INSERTED_TIMESTAMP.030d747f3c", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_prices__INSERTED_TIMESTAMP"], "alias": "complete_native_prices", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.854851, "relation_name": "ALEO.not_null_silver.complete_native_prices", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_prices_MODIFIED_TIMESTAMP.595acedfe2": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_prices_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_prices_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_prices_MODIFIED_TIMESTAMP.595acedfe2", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_prices_MODIFIED_TIMESTAMP"], "alias": "complete_native_prices_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8562553, "relation_name": "ALEO.not_null_silver.complete_native_prices_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__complete_native_prices_COMPLETE_NATIVE_PRICES_ID.6e5981548b": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__complete_native_prices_COMPLETE_NATIVE_PRICES_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__complete_native_prices_COMPLETE_NATIVE_PRICES_ID.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.unique_silver__complete_native_prices_COMPLETE_NATIVE_PRICES_ID.6e5981548b", "fqn": ["aleo_models", "silver", "price", "unique_silver__complete_native_prices_COMPLETE_NATIVE_PRICES_ID"], "alias": "complete_native_prices_COMPLETE_NATIVE_PRICES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8576703, "relation_name": "ALEO.unique_silver.complete_native_prices_COMPLETE_NATIVE_PRICES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMPLETE_NATIVE_PRICES_ID", "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "unique", "kwargs": {"column_name": "COMPLETE_NATIVE_PRICES_ID", "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_prices_HOUR__SYMBOL.9742f3d916": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__complete_native_prices_HOUR__SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_53833e2ea0f1a4b7218f7850d394c7a6.sql", "original_file_path": "models/silver/price/silver__complete_native_prices.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_prices_HOUR__SYMBOL.9742f3d916", "fqn": ["aleo_models", "silver", "price", "dbt_utils_unique_combination_of_columns_silver__complete_native_prices_HOUR__SYMBOL"], "alias": "complete_native_prices_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_53833e2ea0f1a4b7218f7850d394c7a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_53833e2ea0f1a4b7218f7850d394c7a6"}, "created_at": 1753463698.8592105, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.complete_native_prices_HOUR", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_53833e2ea0f1a4b7218f7850d394c7a6\") }}", "language": "sql", "refs": [{"name": "silver__complete_native_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__complete_native_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__complete_native_prices", "attached_node": "model.aleo_models.silver__complete_native_prices", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["HOUR", "SYMBOL"], "model": "{{ get_where_subquery(ref('silver__complete_native_prices')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_asset_metadata_PROVIDER.sql", "original_file_path": "models/silver/price/silver__complete_token_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_asset_metadata_PROVIDER"], "alias": "complete_token_asset_metadata_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.864323, "relation_name": "ALEO.not_null_silver.complete_token_asset_metadata_PROVIDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROVIDER", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.aleo_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.sql", "original_file_path": "models/silver/price/silver__complete_token_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS"], "alias": "complete_token_asset_metadata_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.86578, "relation_name": "ALEO.not_null_silver.complete_token_asset_metadata_TOKEN_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ADDRESS", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.aleo_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.sql", "original_file_path": "models/silver/price/silver__complete_token_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN"], "alias": "complete_token_asset_metadata_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8674212, "relation_name": "ALEO.not_null_silver.complete_token_asset_metadata_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.aleo_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.sql", "original_file_path": "models/silver/price/silver__complete_token_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID"], "alias": "complete_token_asset_metadata_BLOCKCHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8688977, "relation_name": "ALEO.not_null_silver.complete_token_asset_metadata_BLOCKCHAIN_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN_ID", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.aleo_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN_ID", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_toke_502d28fe7759d5565101adc7372ac059.sql", "original_file_path": "models/silver/price/silver__complete_token_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP"], "alias": "complete_token_asset_metadata_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__complete_toke_502d28fe7759d5565101adc7372ac059", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver__complete_toke_502d28fe7759d5565101adc7372ac059"}, "created_at": 1753463698.87033, "relation_name": "ALEO.not_null_silver.complete_token_asset_metadata_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__complete_toke_502d28fe7759d5565101adc7372ac059\") }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.aleo_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__complete_token__7b9913fd69873ddd6c6a5040164278f9.sql", "original_file_path": "models/silver/price/silver__complete_token_asset_metadata.yml", "unique_id": "test.aleo_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588", "fqn": ["aleo_models", "silver", "price", "unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID"], "alias": "complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_silver__complete_token__7b9913fd69873ddd6c6a5040164278f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_silver__complete_token__7b9913fd69873ddd6c6a5040164278f9"}, "created_at": 1753463698.871749, "relation_name": "ALEO.unique_silver.complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_silver__complete_token__7b9913fd69873ddd6c6a5040164278f9\") }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__complete_token_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.aleo_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "unique", "kwargs": {"column_name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_asset_metadata_TOKEN_ADDRESS__BLOCKCHAIN.d3d6b2a62b": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__complete_token_asset_metadata_TOKEN_ADDRESS__BLOCKCHAIN", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_2b99a7915412110c9378f9c81ab44458.sql", "original_file_path": "models/silver/price/silver__complete_token_asset_metadata.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_asset_metadata_TOKEN_ADDRESS__BLOCKCHAIN.d3d6b2a62b", "fqn": ["aleo_models", "silver", "price", "dbt_utils_unique_combination_of_columns_silver__complete_token_asset_metadata_TOKEN_ADDRESS__BLOCKCHAIN"], "alias": "complete_token_asset_metadata_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2b99a7915412110c9378f9c81ab44458", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2b99a7915412110c9378f9c81ab44458"}, "created_at": 1753463698.8731604, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.complete_token_asset_metadata_TOKEN_ADDRESS", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2b99a7915412110c9378f9c81ab44458\") }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__complete_token_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.aleo_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TOKEN_ADDRESS", "BLOCKCHAIN"], "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_HOUR", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_prices_HOUR.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_prices_HOUR"], "alias": "complete_token_prices_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8785415, "relation_name": "ALEO.not_null_silver.complete_token_prices_HOUR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "HOUR", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HOUR", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_TOKEN_ADDRESS", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_prices_TOKEN_ADDRESS.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_prices_TOKEN_ADDRESS"], "alias": "complete_token_prices_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.88, "relation_name": "ALEO.not_null_silver.complete_token_prices_TOKEN_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ADDRESS", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_BLOCKCHAIN", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_prices_BLOCKCHAIN.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_prices_BLOCKCHAIN"], "alias": "complete_token_prices_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8814244, "relation_name": "ALEO.not_null_silver.complete_token_prices_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_BLOCKCHAIN_ID", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_prices_BLOCKCHAIN_ID.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_prices_BLOCKCHAIN_ID"], "alias": "complete_token_prices_BLOCKCHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8828392, "relation_name": "ALEO.not_null_silver.complete_token_prices_BLOCKCHAIN_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN_ID", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN_ID", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_prices_PROVIDER.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_prices_PROVIDER"], "alias": "complete_token_prices_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8842332, "relation_name": "ALEO.not_null_silver.complete_token_prices_PROVIDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROVIDER", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_PRICE", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_prices_PRICE.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_prices_PRICE"], "alias": "complete_token_prices_PRICE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8857908, "relation_name": "ALEO.not_null_silver.complete_token_prices_PRICE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PRICE", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_IS_IMPUTED", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_prices_IS_IMPUTED.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_prices_IS_IMPUTED"], "alias": "complete_token_prices_IS_IMPUTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8872032, "relation_name": "ALEO.not_null_silver.complete_token_prices_IS_IMPUTED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IS_IMPUTED", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IS_IMPUTED", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices__INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_prices__INSERTED_TIMESTAMP"], "alias": "complete_token_prices", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8886318, "relation_name": "ALEO.not_null_silver.complete_token_prices", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP"], "alias": "complete_token_prices_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.890041, "relation_name": "ALEO.not_null_silver.complete_token_prices_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79", "fqn": ["aleo_models", "silver", "price", "unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID"], "alias": "complete_token_prices_COMPLETE_TOKEN_PRICES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.891433, "relation_name": "ALEO.unique_silver.complete_token_prices_COMPLETE_TOKEN_PRICES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMPLETE_TOKEN_PRICES_ID", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "unique", "kwargs": {"column_name": "COMPLETE_TOKEN_PRICES_ID", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_prices_HOUR__TOKEN_ADDRESS__BLOCKCHAIN.dde8fc55cf": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__complete_token_prices_HOUR__TOKEN_ADDRESS__BLOCKCHAIN", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_6bfe3f301137c8d74abbdbcf73c8cef9.sql", "original_file_path": "models/silver/price/silver__complete_token_prices.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_prices_HOUR__TOKEN_ADDRESS__BLOCKCHAIN.dde8fc55cf", "fqn": ["aleo_models", "silver", "price", "dbt_utils_unique_combination_of_columns_silver__complete_token_prices_HOUR__TOKEN_ADDRESS__BLOCKCHAIN"], "alias": "complete_token_prices_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6bfe3f301137c8d74abbdbcf73c8cef9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6bfe3f301137c8d74abbdbcf73c8cef9"}, "created_at": 1753463698.8928652, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.complete_token_prices_HOUR", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6bfe3f301137c8d74abbdbcf73c8cef9\") }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__complete_token_prices"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.aleo_models.silver__complete_token_prices", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["HOUR", "TOKEN_ADDRESS", "BLOCKCHAIN"], "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": "dbt_utils"}}, "test.aleo_models.not_null_silver__complete_native_asset_metadata_PROVIDER.2f310e1236": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_asset_metadata_PROVIDER", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_asset_metadata_PROVIDER.sql", "original_file_path": "models/silver/price/silver__complete_native_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_asset_metadata_PROVIDER.2f310e1236", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_asset_metadata_PROVIDER"], "alias": "complete_native_asset_metadata_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.897937, "relation_name": "ALEO.not_null_silver.complete_native_asset_metadata_PROVIDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROVIDER", "file_key_name": "models.silver__complete_native_asset_metadata", "attached_node": "model.aleo_models.silver__complete_native_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver__complete_native_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_asset_metadata_SYMBOL.ff109ff1ee": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_asset_metadata_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_asset_metadata_SYMBOL.sql", "original_file_path": "models/silver/price/silver__complete_native_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_asset_metadata_SYMBOL.ff109ff1ee", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_asset_metadata_SYMBOL"], "alias": "complete_native_asset_metadata_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.8993757, "relation_name": "ALEO.not_null_silver.complete_native_asset_metadata_SYMBOL", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SYMBOL", "file_key_name": "models.silver__complete_native_asset_metadata", "attached_node": "model.aleo_models.silver__complete_native_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver__complete_native_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_asset_metadata_BLOCKCHAIN.fea8f73c16": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_asset_metadata_BLOCKCHAIN", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_native_asset_metadata_BLOCKCHAIN.sql", "original_file_path": "models/silver/price/silver__complete_native_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_asset_metadata_BLOCKCHAIN.fea8f73c16", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_asset_metadata_BLOCKCHAIN"], "alias": "complete_native_asset_metadata_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.9007988, "relation_name": "ALEO.not_null_silver.complete_native_asset_metadata_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_native_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__complete_native_asset_metadata", "attached_node": "model.aleo_models.silver__complete_native_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__complete_native_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.not_null_silver__complete_native_asset_metadata_MODIFIED_TIMESTAMP.c6bcef6cb9": {"database": "ALEO", "schema": "not_null_silver", "name": "not_null_silver__complete_native_asset_metadata_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "aleo_models", "path": "not_null_silver__complete_nati_d2f3fe77f692011191790a57b3a4752e.sql", "original_file_path": "models/silver/price/silver__complete_native_asset_metadata.yml", "unique_id": "test.aleo_models.not_null_silver__complete_native_asset_metadata_MODIFIED_TIMESTAMP.c6bcef6cb9", "fqn": ["aleo_models", "silver", "price", "not_null_silver__complete_native_asset_metadata_MODIFIED_TIMESTAMP"], "alias": "complete_native_asset_metadata_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__complete_nati_d2f3fe77f692011191790a57b3a4752e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_silver__complete_nati_d2f3fe77f692011191790a57b3a4752e"}, "created_at": 1753463698.9022157, "relation_name": "ALEO.not_null_silver.complete_native_asset_metadata_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__complete_nati_d2f3fe77f692011191790a57b3a4752e\") }}", "language": "sql", "refs": [{"name": "silver__complete_native_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.aleo_models.silver__complete_native_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.silver__complete_native_asset_metadata", "attached_node": "model.aleo_models.silver__complete_native_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_native_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.unique_silver__complete_native_asset_metadata_COMPLETE_NATIVE_ASSET_METADATA_ID.d98ec00bc9": {"database": "ALEO", "schema": "unique_silver", "name": "unique_silver__complete_native_asset_metadata_COMPLETE_NATIVE_ASSET_METADATA_ID", "resource_type": "test", "package_name": "aleo_models", "path": "unique_silver__complete_native_4dfb7f708a7304a034cad59a3300dc38.sql", "original_file_path": "models/silver/price/silver__complete_native_asset_metadata.yml", "unique_id": "test.aleo_models.unique_silver__complete_native_asset_metadata_COMPLETE_NATIVE_ASSET_METADATA_ID.d98ec00bc9", "fqn": ["aleo_models", "silver", "price", "unique_silver__complete_native_asset_metadata_COMPLETE_NATIVE_ASSET_METADATA_ID"], "alias": "complete_native_asset_metadata_COMPLETE_NATIVE_ASSET_METADATA_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_silver__complete_native_4dfb7f708a7304a034cad59a3300dc38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_silver__complete_native_4dfb7f708a7304a034cad59a3300dc38"}, "created_at": 1753463698.903637, "relation_name": "ALEO.unique_silver.complete_native_asset_metadata_COMPLETE_NATIVE_ASSET_METADATA_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_silver__complete_native_4dfb7f708a7304a034cad59a3300dc38\") }}", "language": "sql", "refs": [{"name": "silver__complete_native_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.aleo_models.silver__complete_native_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMPLETE_NATIVE_ASSET_METADATA_ID", "file_key_name": "models.silver__complete_native_asset_metadata", "attached_node": "model.aleo_models.silver__complete_native_asset_metadata", "test_metadata": {"name": "unique", "kwargs": {"column_name": "COMPLETE_NATIVE_ASSET_METADATA_ID", "model": "{{ get_where_subquery(ref('silver__complete_native_asset_metadata')) }}"}, "namespace": null}}, "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_asset_metadata_SYMBOL.6c5f561373": {"database": "ALEO", "schema": "dbt_utils_unique_combination_of_columns_silver", "name": "dbt_utils_unique_combination_of_columns_silver__complete_native_asset_metadata_SYMBOL", "resource_type": "test", "package_name": "aleo_models", "path": "dbt_utils_unique_combination_o_dc0e0e90cc6872ee08ea2ad556afa7af.sql", "original_file_path": "models/silver/price/silver__complete_native_asset_metadata.yml", "unique_id": "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_asset_metadata_SYMBOL.6c5f561373", "fqn": ["aleo_models", "silver", "price", "dbt_utils_unique_combination_of_columns_silver__complete_native_asset_metadata_SYMBOL"], "alias": "complete_native_asset_metadata_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_dc0e0e90cc6872ee08ea2ad556afa7af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_dc0e0e90cc6872ee08ea2ad556afa7af"}, "created_at": 1753463698.9051933, "relation_name": "ALEO.dbt_utils_unique_combination_of_columns_silver.complete_native_asset_metadata_SYMBOL", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_dc0e0e90cc6872ee08ea2ad556afa7af\") }}", "language": "sql", "refs": [{"name": "silver__complete_native_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.aleo_models.silver__complete_native_asset_metadata"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__complete_native_asset_metadata", "attached_node": "model.aleo_models.silver__complete_native_asset_metadata", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["SYMBOL"], "model": "{{ get_where_subquery(ref('silver__complete_native_asset_metadata')) }}"}, "namespace": "dbt_utils"}}, "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456": {"database": "ALEO", "schema": "test", "name": "test__live_udf_api_post_data_object", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_data_object.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_data_object"], "alias": "live_udf_api_post_data_object", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.9384086, "relation_name": "ALEO.test.live_udf_api_post_data_object", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', {'foo': 'bar'}\n", "assertions": ["result:data.json is not null", "result:data.json = OBJECT_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8": {"database": "ALEO", "schema": "test", "name": "test__live_udf_api_post_data_array", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_data_array.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_data_array"], "alias": "live_udf_api_post_data_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.9509523, "relation_name": "ALEO.test.live_udf_api_post_data_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', ['foo', 'bar']\n", "assertions": ["result:data.json is not null", "result:data.json = ARRAY_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb": {"database": "ALEO", "schema": "test", "name": "test__live_udf_api_post_data_string", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_data_string.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_data_string"], "alias": "live_udf_api_post_data_string", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.9564106, "relation_name": "ALEO.test.live_udf_api_post_data_string", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', 'foo'::VARIANT\n", "assertions": ["result:data.json is not null", "result:data.json = 'foo'"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test_secrets__udf_register_secret.85444b4425": {"database": "ALEO", "schema": "test_secrets", "name": "test_secrets__udf_register_secret", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_register_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_register_secret.85444b4425", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_register_secret"], "alias": "udf_register_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.9643798, "relation_name": "ALEO.test_secrets.udf_register_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_register_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test', 'test'\n", "assertions": ["result = {'request_id':'test','success':false}"], "column_name": "udf_register_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_models.test_secrets__udf_get_secret.1762e1eb69": {"database": "ALEO", "schema": "test_secrets", "name": "test_secrets__udf_get_secret", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_get_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_get_secret.1762e1eb69", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_get_secret"], "alias": "udf_get_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.9694328, "relation_name": "ALEO.test_secrets.udf_get_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_get_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test'\n", "assertions": ["result::OBJECT = {'key': 'value'}\n"], "column_name": "udf_get_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_models.test_secrets__udf_get_secrets.898812e6e2": {"database": "ALEO", "schema": "test_secrets", "name": "test_secrets__udf_get_secrets", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_get_secrets.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_get_secrets.898812e6e2", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_get_secrets"], "alias": "udf_get_secrets", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.975168, "relation_name": "ALEO.test_secrets.udf_get_secrets", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_get_secrets", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "", "assertions": ["result = {'test': {'key': 'value'}}\n"], "column_name": "udf_get_secrets", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_models.test_secrets__udf_create_secret.d42bc02506": {"database": "ALEO", "schema": "test_secrets", "name": "test_secrets__udf_create_secret", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_create_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_create_secret.d42bc02506", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_create_secret"], "alias": "udf_create_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.9799552, "relation_name": "ALEO.test_secrets.udf_create_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_create_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test', {'key': 'value'}\n", "assertions": ["result = 200"], "column_name": "udf_create_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_models.test_secrets__udf_delete_secret.9f28745276": {"database": "ALEO", "schema": "test_secrets", "name": "test_secrets__udf_delete_secret", "resource_type": "test", "package_name": "livequery_models", "path": "test_secrets__udf_delete_secret.sql", "original_file_path": "models/deploy/core/secrets.yml", "unique_id": "test.livequery_models.test_secrets__udf_delete_secret.9f28745276", "fqn": ["livequery_models", "deploy", "core", "test_secrets__udf_delete_secret"], "alias": "udf_delete_secret", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.98501, "relation_name": "ALEO.test_secrets.udf_delete_secret", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "secrets", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_delete_secret", "file_key_name": "models.secrets", "attached_node": "model.livequery_models.secrets", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'test_delete'\n", "assertions": ["result = 200"], "column_name": "udf_delete_secret", "model": "{{ get_where_subquery(ref('secrets')) }}"}, "namespace": null}}, "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc": {"database": "ALEO", "schema": "test_udf_utils", "name": "test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call", "resource_type": "test", "package_name": "livequery_models", "path": "test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc", "fqn": ["livequery_models", "deploy", "core", "test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call"], "alias": "foo_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f"}, "created_at": 1753463698.9927819, "relation_name": "ALEO.test_udf_utils.foo_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}{{ config(alias=\"test_udf_utils_0a4722d2c768c0a081ecd140b43ca89f\") }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_json_rpc_call", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'foo', [], 1", "assertions": ["result = {\n  'jsonrpc': '2.0',\n  'method': 'foo',\n  'params': [],\n  'id': '1'\n}\n"], "column_name": "udf_json_rpc_call", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_1"], "alias": "udf_urlencode_dict_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463698.9980452, "relation_name": "ALEO.test_utils.udf_urlencode_dict_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_2"], "alias": "udf_urlencode_dict_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0028856, "relation_name": "ALEO.test_utils.udf_urlencode_dict_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'a', 'b':'b'}, TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_space"], "alias": "udf_urlencode_dict_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0079157, "relation_name": "ALEO.test_utils.udf_urlencode_dict_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_special"], "alias": "udf_urlencode_dict_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.012927, "relation_name": "ALEO.test_utils.udf_urlencode_dict_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_true_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_true_array"], "alias": "udf_urlencode_dict_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0177956, "relation_name": "ALEO.test_utils.udf_urlencode_dict_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_1"], "alias": "udf_urlencode_dict_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0228202, "relation_name": "ALEO.test_utils.udf_urlencode_dict_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_2"], "alias": "udf_urlencode_dict_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.027563, "relation_name": "ALEO.test_utils.udf_urlencode_dict_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}, FALSE\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_space"], "alias": "udf_urlencode_dict_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0323966, "relation_name": "ALEO.test_utils.udf_urlencode_dict_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_special"], "alias": "udf_urlencode_dict_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0371196, "relation_name": "ALEO.test_utils.udf_urlencode_dict_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_false_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_false_array"], "alias": "udf_urlencode_dict_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0418367, "relation_name": "ALEO.test_utils.udf_urlencode_dict_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_1"], "alias": "udf_urlencode_dict_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0467808, "relation_name": "ALEO.test_utils.udf_urlencode_dict_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_2"], "alias": "udf_urlencode_dict_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0514917, "relation_name": "ALEO.test_utils.udf_urlencode_dict_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_space"], "alias": "udf_urlencode_dict_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.056232, "relation_name": "ALEO.test_utils.udf_urlencode_dict_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_special"], "alias": "udf_urlencode_dict_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0607724, "relation_name": "ALEO.test_utils.udf_urlencode_dict_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_dict_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_dict_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_dict_array"], "alias": "udf_urlencode_dict_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0659468, "relation_name": "ALEO.test_utils.udf_urlencode_dict_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_1"], "alias": "udf_urlencode_array_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.070494, "relation_name": "ALEO.test_utils.udf_urlencode_array_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_2"], "alias": "udf_urlencode_array_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.075198, "relation_name": "ALEO.test_utils.udf_urlencode_array_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_space"], "alias": "udf_urlencode_array_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0798998, "relation_name": "ALEO.test_utils.udf_urlencode_array_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_special"], "alias": "udf_urlencode_array_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0844264, "relation_name": "ALEO.test_utils.udf_urlencode_array_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_true_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_true_array"], "alias": "udf_urlencode_array_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0891442, "relation_name": "ALEO.test_utils.udf_urlencode_array_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_1"], "alias": "udf_urlencode_array_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.093696, "relation_name": "ALEO.test_utils.udf_urlencode_array_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_2"], "alias": "udf_urlencode_array_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.0983856, "relation_name": "ALEO.test_utils.udf_urlencode_array_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], FALSE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_space"], "alias": "udf_urlencode_array_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1031067, "relation_name": "ALEO.test_utils.udf_urlencode_array_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_special"], "alias": "udf_urlencode_array_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1076365, "relation_name": "ALEO.test_utils.udf_urlencode_array_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_false_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_false_array"], "alias": "udf_urlencode_array_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1124036, "relation_name": "ALEO.test_utils.udf_urlencode_array_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_1", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_1"], "alias": "udf_urlencode_array_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1169431, "relation_name": "ALEO.test_utils.udf_urlencode_array_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']]\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_2", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_2"], "alias": "udf_urlencode_array_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.121657, "relation_name": "ALEO.test_utils.udf_urlencode_array_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']]\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_space", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_space"], "alias": "udf_urlencode_array_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1263769, "relation_name": "ALEO.test_utils.udf_urlencode_array_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']]\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_special", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_special"], "alias": "udf_urlencode_array_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1309056, "relation_name": "ALEO.test_utils.udf_urlencode_array_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']]\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_urlencode_array_array", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_urlencode_array_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_urlencode_array_array"], "alias": "udf_urlencode_array_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1356416, "relation_name": "ALEO.test_utils.udf_urlencode_array_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]]\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_int_to_binary", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_int_to_binary.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_int_to_binary"], "alias": "udf_int_to_binary", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.140184, "relation_name": "ALEO.test_utils.udf_int_to_binary", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": 123456789, "assertions": ["result = '111010110111100110100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_int_to_binary_large_number", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_int_to_binary_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_int_to_binary_large_number"], "alias": "udf_int_to_binary_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.144928, "relation_name": "ALEO.test_utils.udf_int_to_binary_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'123456789123456789123456789123456789123456789'", "assertions": ["result = '101100010010011011011100101001111010001001110011010111111101111101010111011001001101000001111110001010100001011011010000100000001000101111100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_binary_to_int", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_binary_to_int.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_binary_to_int"], "alias": "udf_binary_to_int", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.149989, "relation_name": "ALEO.test_utils.udf_binary_to_int", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "111010110111100110100010101", "assertions": ["result = '123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_binary_to_int_large_number", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_binary_to_int_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_binary_to_int_large_number"], "alias": "udf_binary_to_int_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1548655, "relation_name": "ALEO.test_utils.udf_binary_to_int_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'110110110100110110100101110101100110100000101111100010101'", "assertions": ["result = '123456789123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2": {"database": "ALEO", "schema": "test_utils", "name": "test_utils__udf_evm_decode_log", "resource_type": "test", "package_name": "livequery_models", "path": "test_utils__udf_evm_decode_log.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2", "fqn": ["livequery_models", "deploy", "core", "test_utils__udf_evm_decode_log"], "alias": "udf_evm_decode_log", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.160341, "relation_name": "ALEO.test_utils.udf_evm_decode_log", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_evm_decode_log", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant\n", "assertions": ["result = [\n  {\n    'address': '0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5',\n    'data': [\n      {\n        'decoded': true,\n        'name': 'nonce',\n        'type': 'uint256',\n        'value': 10140\n      }\n    ],\n    'decoded': true,\n    'name': 'NonceChanged'\n  }\n]"], "column_name": "udf_evm_decode_log", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test___utils_udf_introspect.79bd27a18b": {"database": "ALEO", "schema": "test", "name": "test___utils_udf_introspect", "resource_type": "test", "package_name": "livequery_models", "path": "test___utils_udf_introspect.sql", "original_file_path": "models/deploy/core/_utils.yml", "unique_id": "test.livequery_models.test___utils_udf_introspect.79bd27a18b", "fqn": ["livequery_models", "deploy", "core", "test___utils_udf_introspect"], "alias": "_utils_udf_introspect", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1663904, "relation_name": "ALEO.test._utils_udf_introspect", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models._utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_introspect", "file_key_name": "models._utils", "attached_node": "model.livequery_models._utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'hello'", "assertions": ["result = 'hello'"], "column_name": "udf_introspect", "model": "{{ get_where_subquery(ref('_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_bitquery__graphql_status_200.11917beb18": {"database": "ALEO", "schema": "test_bitquery", "name": "test_bitquery__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_bitquery__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/bitquery/bitquery__.yml", "unique_id": "test.livequery_models.test_bitquery__graphql_status_200.11917beb18", "fqn": ["livequery_models", "deploy", "marketplace", "bitquery", "test_bitquery__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1721447, "relation_name": "ALEO.test_bitquery.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bitquery__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.bitquery__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "graphql", "file_key_name": "models.bitquery__", "attached_node": "model.livequery_models.bitquery__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('bitquery__')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446": {"database": "ALEO", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200"], "alias": "get_token_metadata_by_contract_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1807384, "relation_name": "ALEO.test_quicknode_polygon_tokens.get_token_metadata_by_contract_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata_by_contract_address", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_contract_address", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e": {"database": "ALEO", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200"], "alias": "get_token_metadata_by_symbol_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1859345, "relation_name": "ALEO.test_quicknode_polygon_tokens.get_token_metadata_by_symbol_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata_by_symbol", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'symbol': 'USDC'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_symbol", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade": {"database": "ALEO", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_transactions_by_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_transactions_by_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_transactions_by_address_status_200"], "alias": "get_transactions_by_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1912708, "relation_name": "ALEO.test_quicknode_polygon_tokens.get_transactions_by_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_transactions_by_address", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transactions_by_address", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733": {"database": "ALEO", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_wallet_token_balance_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_wallet_token_balance_status_200"], "alias": "get_wallet_token_balance_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.1964293, "relation_name": "ALEO.test_quicknode_polygon_tokens.get_wallet_token_balance_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_wallet_token_balance", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_balance", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96": {"database": "ALEO", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200"], "alias": "get_wallet_token_transactions_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2018495, "relation_name": "ALEO.test_quicknode_polygon_tokens.get_wallet_token_transactions_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_wallet_token_transactions", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_transactions", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e": {"database": "ALEO", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200"], "alias": "fetch_nft_collection_details_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2096446, "relation_name": "ALEO.test_quicknode_ethereum_nfts.fetch_nft_collection_details_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nft_collection_details", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nft_collection_details", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64": {"database": "ALEO", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__fetch_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__fetch_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__fetch_nfts_status_200"], "alias": "fetch_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2150106, "relation_name": "ALEO.test_quicknode_ethereum_nfts.fetch_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb": {"database": "ALEO", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200"], "alias": "fetch_nfts_by_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2201898, "relation_name": "ALEO.test_quicknode_ethereum_nfts.fetch_nfts_by_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts_by_collection", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts_by_collection", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642": {"database": "ALEO", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200"], "alias": "get_transfers_by_nft_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2256484, "relation_name": "ALEO.test_quicknode_ethereum_nfts.get_transfers_by_nft_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_transfers_by_nft", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transfers_by_nft", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510": {"database": "ALEO", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__verify_nfts_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__verify_nfts_owner_status_200"], "alias": "verify_nfts_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.23081, "relation_name": "ALEO.test_quicknode_ethereum_nfts.verify_nfts_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "verify_nfts_owner", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "verify_nfts_owner", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e": {"database": "ALEO", "schema": "test_quicknode_solana_nfts", "name": "test_quicknode_solana_nfts__fetch_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_solana_nfts__fetch_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_solana_nfts__fetch_nfts_status_200"], "alias": "fetch_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2372348, "relation_name": "ALEO.test_quicknode_solana_nfts.fetch_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_solana_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts", "file_key_name": "models.quicknode_solana_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts", "model": "{{ get_where_subquery(ref('quicknode_solana_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31": {"database": "ALEO", "schema": "test_quicknode_solana_nfts", "name": "test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200"], "alias": "fetch_nfts_by_creator_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2426963, "relation_name": "ALEO.test_quicknode_solana_nfts.fetch_nfts_by_creator_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_solana_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts_by_creator", "file_key_name": "models.quicknode_solana_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts_by_creator", "model": "{{ get_where_subquery(ref('quicknode_solana_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2": {"database": "ALEO", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200"], "alias": "get_token_metadata_by_contract_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.24881, "relation_name": "ALEO.test_quicknode_ethereum_tokens.get_token_metadata_by_contract_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata_by_contract_address", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_contract_address", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d": {"database": "ALEO", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200"], "alias": "get_token_metadata_by_symbol_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2538135, "relation_name": "ALEO.test_quicknode_ethereum_tokens.get_token_metadata_by_symbol_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata_by_symbol", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'symbol': 'USDC'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_symbol", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431": {"database": "ALEO", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_transactions_by_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_transactions_by_address_status_200"], "alias": "get_transactions_by_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2586, "relation_name": "ALEO.test_quicknode_ethereum_tokens.get_transactions_by_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_transactions_by_address", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transactions_by_address", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850": {"database": "ALEO", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200"], "alias": "get_wallet_token_balance_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2641175, "relation_name": "ALEO.test_quicknode_ethereum_tokens.get_wallet_token_balance_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_wallet_token_balance", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_balance", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c": {"database": "ALEO", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200"], "alias": "get_wallet_token_transactions_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2691832, "relation_name": "ALEO.test_quicknode_ethereum_tokens.get_wallet_token_transactions_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_wallet_token_transactions", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_transactions", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b": {"database": "ALEO", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200"], "alias": "fetch_nft_collection_details_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.274911, "relation_name": "ALEO.test_quicknode_polygon_nfts.fetch_nft_collection_details_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nft_collection_details", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nft_collection_details", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6": {"database": "ALEO", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__fetch_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__fetch_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__fetch_nfts_status_200"], "alias": "fetch_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2804039, "relation_name": "ALEO.test_quicknode_polygon_nfts.fetch_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06": {"database": "ALEO", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200"], "alias": "fetch_nfts_by_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.285254, "relation_name": "ALEO.test_quicknode_polygon_nfts.fetch_nfts_by_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts_by_collection", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts_by_collection", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185": {"database": "ALEO", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__get_transfers_by_nft_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__get_transfers_by_nft_status_200"], "alias": "get_transfers_by_nft_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2902555, "relation_name": "ALEO.test_quicknode_polygon_nfts.get_transfers_by_nft_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_transfers_by_nft", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transfers_by_nft", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13": {"database": "ALEO", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__verify_nfts_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__verify_nfts_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__verify_nfts_owner_status_200"], "alias": "verify_nfts_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.2952106, "relation_name": "ALEO.test_quicknode_polygon_nfts.verify_nfts_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "verify_nfts_owner", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "verify_nfts_owner", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_fred__get_series_status_200.51822e30ca": {"database": "ALEO", "schema": "test_fred", "name": "test_fred__get_series_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_fred__get_series_status_200.sql", "original_file_path": "models/deploy/marketplace/fred/fred__.yml", "unique_id": "test.livequery_models.test_fred__get_series_status_200.51822e30ca", "fqn": ["livequery_models", "deploy", "marketplace", "fred", "test_fred__get_series_status_200"], "alias": "get_series_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3011372, "relation_name": "ALEO.test_fred.get_series_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fred__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.fred__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_series", "file_key_name": "models.fred__", "attached_node": "model.livequery_models.fred__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_series", "model": "{{ get_where_subquery(ref('fred__')) }}"}, "namespace": null}}, "test.livequery_models.test_strangelove__get_status_200.0a58865924": {"database": "ALEO", "schema": "test_strangelove", "name": "test_strangelove__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_strangelove__get_status_200.sql", "original_file_path": "models/deploy/marketplace/strangelove/strangelove__.yml", "unique_id": "test.livequery_models.test_strangelove__get_status_200.0a58865924", "fqn": ["livequery_models", "deploy", "marketplace", "strangelove", "test_strangelove__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3073652, "relation_name": "ALEO.test_strangelove.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "strangelove__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.strangelove__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.strangelove__", "attached_node": "model.livequery_models.strangelove__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('strangelove__')) }}"}, "namespace": null}}, "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb": {"database": "ALEO", "schema": "test_footprint_utils", "name": "test_footprint_utils__get_status_200_v2_protocol_info", "resource_type": "test", "package_name": "livequery_models", "path": "test_footprint_utils__get_status_200_v2_protocol_info.sql", "original_file_path": "models/deploy/marketplace/footprint/footprint_utils__footprint_utils.yml", "unique_id": "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb", "fqn": ["livequery_models", "deploy", "marketplace", "footprint", "test_footprint_utils__get_status_200_v2_protocol_info"], "alias": "get_status_200_v2_protocol_info", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.313112, "relation_name": "ALEO.test_footprint_utils.get_status_200_v2_protocol_info", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "footprint_utils__footprint_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.footprint_utils__footprint_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.footprint_utils__footprint_utils", "attached_node": "model.livequery_models.footprint_utils__footprint_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v2/protocol/info' , {\n  'chain': 'Ethereum',\n  'protocol_slug': 'the-sandbox',\n  'limit': 10,\n  'offset': 0\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('footprint_utils__footprint_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_snapshot__query_status_200.35a2cffb40": {"database": "ALEO", "schema": "test_snapshot", "name": "test_snapshot__query_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_snapshot__query_status_200.sql", "original_file_path": "models/deploy/marketplace/snapshot/snapshot__ .yml", "unique_id": "test.livequery_models.test_snapshot__query_status_200.35a2cffb40", "fqn": ["livequery_models", "deploy", "marketplace", "snapshot", "test_snapshot__query_status_200"], "alias": "query_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3193996, "relation_name": "ALEO.test_snapshot.query_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "snapshot__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.snapshot__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query", "file_key_name": "models.snapshot__", "attached_node": "model.livequery_models.snapshot__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query", "model": "{{ get_where_subquery(ref('snapshot__')) }}"}, "namespace": null}}, "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e": {"database": "ALEO", "schema": "test_credmark_utils", "name": "test_credmark_utils__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_credmark_utils__get_status_200.sql", "original_file_path": "models/deploy/marketplace/credmark/credmark_utils__.yml", "unique_id": "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e", "fqn": ["livequery_models", "deploy", "marketplace", "credmark", "test_credmark_utils__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3253822, "relation_name": "ALEO.test_credmark_utils.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "credmark_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.credmark_utils__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.credmark_utils__", "attached_node": "model.livequery_models.credmark_utils__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('credmark_utils__')) }}"}, "namespace": null}}, "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1": {"database": "ALEO", "schema": "test_allday", "name": "test_allday__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_allday__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/allday/allday__.yml", "unique_id": "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1", "fqn": ["livequery_models", "deploy", "marketplace", "allday", "test_allday__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3311558, "relation_name": "ALEO.test_allday.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "allday__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.allday__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "graphql", "file_key_name": "models.allday__", "attached_node": "model.livequery_models.allday__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('allday__')) }}"}, "namespace": null}}, "test.livequery_models.test_transpose__get_status_200.8721d94682": {"database": "ALEO", "schema": "test_transpose", "name": "test_transpose__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_transpose__get_status_200.sql", "original_file_path": "models/deploy/marketplace/transpose/transpose__.yml", "unique_id": "test.livequery_models.test_transpose__get_status_200.8721d94682", "fqn": ["livequery_models", "deploy", "marketplace", "transpose", "test_transpose__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3372343, "relation_name": "ALEO.test_transpose.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transpose__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.transpose__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.transpose__", "attached_node": "model.livequery_models.transpose__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('transpose__')) }}"}, "namespace": null}}, "test.livequery_models.test_subquery__graphql_status_200.02580cea10": {"database": "ALEO", "schema": "test_subquery", "name": "test_subquery__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_subquery__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/subquery/subquery__.yml", "unique_id": "test.livequery_models.test_subquery__graphql_status_200.02580cea10", "fqn": ["livequery_models", "deploy", "marketplace", "subquery", "test_subquery__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3431933, "relation_name": "ALEO.test_subquery.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "subquery__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.subquery__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "graphql", "file_key_name": "models.subquery__", "attached_node": "model.livequery_models.subquery__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'kepler-network' , {'query':'query { _mmrs (first: 5) { nodes { key } } }'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('subquery__')) }}"}, "namespace": null}}, "test.livequery_models.test_defillama__get_status_200.90864f8f89": {"database": "ALEO", "schema": "test_defillama", "name": "test_defillama__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_defillama__get_status_200.sql", "original_file_path": "models/deploy/marketplace/defillama/defillama__.yml", "unique_id": "test.livequery_models.test_defillama__get_status_200.90864f8f89", "fqn": ["livequery_models", "deploy", "marketplace", "defillama", "test_defillama__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3489642, "relation_name": "ALEO.test_defillama.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defillama__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.defillama__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.defillama__", "attached_node": "model.livequery_models.defillama__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/protocols' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('defillama__')) }}"}, "namespace": null}}, "test.livequery_models.test_reservoir__get_status_200.cb905ea233": {"database": "ALEO", "schema": "test_reservoir", "name": "test_reservoir__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_reservoir__get_status_200.sql", "original_file_path": "models/deploy/marketplace/reservoir/reservoir__.yml", "unique_id": "test.livequery_models.test_reservoir__get_status_200.cb905ea233", "fqn": ["livequery_models", "deploy", "marketplace", "reservoir", "test_reservoir__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3549495, "relation_name": "ALEO.test_reservoir.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "reservoir__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.reservoir__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.reservoir__", "attached_node": "model.livequery_models.reservoir__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('reservoir__')) }}"}, "namespace": null}}, "test.livequery_models.test_apilayer__get_status_200.fa02bd0f30": {"database": "ALEO", "schema": "test_apilayer", "name": "test_apilayer__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_apilayer__get_status_200.sql", "original_file_path": "models/deploy/marketplace/apilayer/apilayer__.yml", "unique_id": "test.livequery_models.test_apilayer__get_status_200.fa02bd0f30", "fqn": ["livequery_models", "deploy", "marketplace", "apilayer", "test_apilayer__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3609269, "relation_name": "ALEO.test_apilayer.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apilayer__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.apilayer__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.apilayer__", "attached_node": "model.livequery_models.apilayer__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/odds/sports' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('apilayer__')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714": {"database": "ALEO", "schema": "test_helius_das", "name": "test_helius_das__get_asset_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_asset_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_asset_status_200"], "alias": "get_asset_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3700385, "relation_name": "ALEO.test_helius_das.get_asset_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_asset", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_asset", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d": {"database": "ALEO", "schema": "test_helius_das", "name": "test_helius_das__get_signatures_for_asset_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_signatures_for_asset_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_signatures_for_asset_status_200"], "alias": "get_signatures_for_asset_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3753257, "relation_name": "ALEO.test_helius_das.get_signatures_for_asset_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_signatures_for_asset", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_signatures_for_asset", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616": {"database": "ALEO", "schema": "test_helius_das", "name": "test_helius_das__search_assets_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__search_assets_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__search_assets_status_200"], "alias": "search_assets_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3804574, "relation_name": "ALEO.test_helius_das.search_assets_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "search_assets", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "search_assets", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3": {"database": "ALEO", "schema": "test_helius_das", "name": "test_helius_das__get_asset_proof_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_asset_proof_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_asset_proof_status_200"], "alias": "get_asset_proof_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3858352, "relation_name": "ALEO.test_helius_das.get_asset_proof_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_asset_proof", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_asset_proof", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c": {"database": "ALEO", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_owner_status_200"], "alias": "get_assets_by_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.391012, "relation_name": "ALEO.test_helius_das.get_assets_by_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_assets_by_owner", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_owner", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165": {"database": "ALEO", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_authority_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_authority_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_authority_status_200"], "alias": "get_assets_by_authority_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.3963444, "relation_name": "ALEO.test_helius_das.get_assets_by_authority_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_assets_by_authority", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_authority", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a": {"database": "ALEO", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_creator_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_creator_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_creator_status_200"], "alias": "get_assets_by_creator_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.401862, "relation_name": "ALEO.test_helius_das.get_assets_by_creator_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_assets_by_creator", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_creator", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d": {"database": "ALEO", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_group_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_group_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_group_status_200"], "alias": "get_assets_by_group_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.407072, "relation_name": "ALEO.test_helius_das.get_assets_by_group_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_assets_by_group", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_group", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0": {"database": "ALEO", "schema": "test_helius_apis", "name": "test_helius_apis__token_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_apis__token_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_apis__token_metadata_status_200"], "alias": "token_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.414085, "relation_name": "ALEO.test_helius_apis.token_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_apis__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_apis__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token_metadata", "file_key_name": "models.helius_apis__helius_utils", "attached_node": "model.livequery_models.helius_apis__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "token_metadata", "model": "{{ get_where_subquery(ref('helius_apis__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_apis__balances_status_200.d668884644": {"database": "ALEO", "schema": "test_helius_apis", "name": "test_helius_apis__balances_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_apis__balances_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_apis__balances_status_200.d668884644", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_apis__balances_status_200"], "alias": "balances_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.419426, "relation_name": "ALEO.test_helius_apis.balances_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_apis__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_apis__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "balances", "file_key_name": "models.helius_apis__helius_utils", "attached_node": "model.livequery_models.helius_apis__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "balances", "model": "{{ get_where_subquery(ref('helius_apis__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da": {"database": "ALEO", "schema": "test_helius_apis", "name": "test_helius_apis__parse_transactions_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_apis__parse_transactions_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_apis__parse_transactions_status_200"], "alias": "parse_transactions_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.4245994, "relation_name": "ALEO.test_helius_apis.parse_transactions_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_apis__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_apis__helius_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "parse_transactions", "file_key_name": "models.helius_apis__helius_utils", "attached_node": "model.livequery_models.helius_apis__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "parse_transactions", "model": "{{ get_where_subquery(ref('helius_apis__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_cmc__get_status_200.bc3231cada": {"database": "ALEO", "schema": "test_cmc", "name": "test_cmc__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_cmc__get_status_200.sql", "original_file_path": "models/deploy/marketplace/cmc/cmc__.yml", "unique_id": "test.livequery_models.test_cmc__get_status_200.bc3231cada", "fqn": ["livequery_models", "deploy", "marketplace", "cmc", "test_cmc__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.4305992, "relation_name": "ALEO.test_cmc.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cmc__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.cmc__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.cmc__", "attached_node": "model.livequery_models.cmc__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': 1691524740, 'time_end': 1691528400, 'id': '15478,15479'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('cmc__')) }}"}, "namespace": null}}, "test.livequery_models.test_espn__get_status_200.b4f84cc829": {"database": "ALEO", "schema": "test_espn", "name": "test_espn__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_espn__get_status_200.sql", "original_file_path": "models/deploy/marketplace/espn/espn__.yml", "unique_id": "test.livequery_models.test_espn__get_status_200.b4f84cc829", "fqn": ["livequery_models", "deploy", "marketplace", "espn", "test_espn__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.436615, "relation_name": "ALEO.test_espn.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "espn__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.espn__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.espn__", "attached_node": "model.livequery_models.espn__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('espn__')) }}"}, "namespace": null}}, "test.livequery_models.test_opensea__get_status_200.5de63cfbb1": {"database": "ALEO", "schema": "test_opensea", "name": "test_opensea__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_opensea__get_status_200.sql", "original_file_path": "models/deploy/marketplace/opensea/opensea__.yml", "unique_id": "test.livequery_models.test_opensea__get_status_200.5de63cfbb1", "fqn": ["livequery_models", "deploy", "marketplace", "opensea", "test_opensea__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.4424124, "relation_name": "ALEO.test_opensea.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "opensea__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.opensea__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.opensea__", "attached_node": "model.livequery_models.opensea__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/health' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('opensea__')) }}"}, "namespace": null}}, "test.livequery_models.test_coingecko__get_status_200.047f15c956": {"database": "ALEO", "schema": "test_coingecko", "name": "test_coingecko__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_coingecko__get_status_200.sql", "original_file_path": "models/deploy/marketplace/coingecko/coingecko__.yml", "unique_id": "test.livequery_models.test_coingecko__get_status_200.047f15c956", "fqn": ["livequery_models", "deploy", "marketplace", "coingecko", "test_coingecko__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.4483778, "relation_name": "ALEO.test_coingecko.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "coingecko__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.coingecko__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.coingecko__", "attached_node": "model.livequery_models.coingecko__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('coingecko__')) }}"}, "namespace": null}}, "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb": {"database": "ALEO", "schema": "test_deepnftvalue", "name": "test_deepnftvalue__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_deepnftvalue__get_status_200.sql", "original_file_path": "models/deploy/marketplace/deepnftvalue/deepnftvalue__.yml", "unique_id": "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb", "fqn": ["livequery_models", "deploy", "marketplace", "deepnftvalue", "test_deepnftvalue__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.454342, "relation_name": "ALEO.test_deepnftvalue.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "deepnftvalue__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.deepnftvalue__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.deepnftvalue__", "attached_node": "model.livequery_models.deepnftvalue__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/collections' , {'limit': 5}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('deepnftvalue__')) }}"}, "namespace": null}}, "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94": {"database": "ALEO", "schema": "test_github_actions", "name": "test_github_actions__workflows_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_actions__workflows_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.yml", "unique_id": "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_actions__workflows_status_200"], "alias": "workflows_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.460833, "relation_name": "ALEO.test_github_actions.workflows_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_actions__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_actions__github_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workflows", "file_key_name": "models.github_actions__github_utils", "attached_node": "model.livequery_models.github_actions__github_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'FlipsideCrypto', 'admin-models'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "workflows", "model": "{{ get_where_subquery(ref('github_actions__github_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb": {"database": "ALEO", "schema": "test_github_actions", "name": "test_github_actions__runs_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_actions__runs_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.yml", "unique_id": "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_actions__runs_status_200"], "alias": "runs_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.4661639, "relation_name": "ALEO.test_github_actions.runs_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_actions__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_actions__github_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "runs", "file_key_name": "models.github_actions__github_utils", "attached_node": "model.livequery_models.github_actions__github_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'FlipsideCrypto', 'admin-models', {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "runs", "model": "{{ get_where_subquery(ref('github_actions__github_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553": {"database": "ALEO", "schema": "test_github_actions", "name": "test_github_actions__workflow_runs_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_actions__workflow_runs_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.yml", "unique_id": "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_actions__workflow_runs_status_200"], "alias": "workflow_runs_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.4719508, "relation_name": "ALEO.test_github_actions.workflow_runs_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_actions__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_actions__github_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workflow_runs", "file_key_name": "models.github_actions__github_utils", "attached_node": "model.livequery_models.github_actions__github_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "workflow_runs", "model": "{{ get_where_subquery(ref('github_actions__github_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_github_utils__octocat_status_200.3573395088": {"database": "ALEO", "schema": "test_github_utils", "name": "test_github_utils__octocat_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_utils__octocat_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_utils__github_utils.yml", "unique_id": "test.livequery_models.test_github_utils__octocat_status_200.3573395088", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_utils__octocat_status_200"], "alias": "octocat_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.4779832, "relation_name": "ALEO.test_github_utils.octocat_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_utils__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_utils__github_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "octocat", "file_key_name": "models.github_utils__github_utils", "attached_node": "model.livequery_models.github_utils__github_utils", "test_metadata": {"name": "test_udf", "kwargs": {"assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "octocat", "model": "{{ get_where_subquery(ref('github_utils__github_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_dappradar__get_status_200.86e3502ff3": {"database": "ALEO", "schema": "test_dappradar", "name": "test_dappradar__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_dappradar__get_status_200.sql", "original_file_path": "models/deploy/marketplace/dappradar/dappradar__.yml", "unique_id": "test.livequery_models.test_dappradar__get_status_200.86e3502ff3", "fqn": ["livequery_models", "deploy", "marketplace", "dappradar", "test_dappradar__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.483637, "relation_name": "ALEO.test_dappradar.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dappradar__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.dappradar__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.dappradar__", "attached_node": "model.livequery_models.dappradar__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/4tsxo4vuhotaojtl/defi/chains' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('dappradar__')) }}"}, "namespace": null}}, "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652": {"database": "ALEO", "schema": "test_chainbase_utils", "name": "test_chainbase_utils__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_chainbase_utils__get_status_200.sql", "original_file_path": "models/deploy/marketplace/chainbase/chainbase_utils__.yml", "unique_id": "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652", "fqn": ["livequery_models", "deploy", "marketplace", "chainbase", "test_chainbase_utils__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.489659, "relation_name": "ALEO.test_chainbase_utils.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "chainbase_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.chainbase_utils__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.chainbase_utils__", "attached_node": "model.livequery_models.chainbase_utils__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('chainbase_utils__')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4": {"database": "ALEO", "schema": "test_alchemy_transfers", "name": "test_alchemy_transfers__get_asset_transfers_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_transfers__get_asset_transfers_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_transfers__get_asset_transfers_status_200"], "alias": "get_asset_transfers_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.495789, "relation_name": "ALEO.test_alchemy_transfers.get_asset_transfers_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_transfers__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_transfers__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_asset_transfers", "file_key_name": "models.alchemy_transfers__alchemy_utils", "attached_node": "model.livequery_models.alchemy_transfers__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_asset_transfers", "model": "{{ get_where_subquery(ref('alchemy_transfers__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nfts_status_200"], "alias": "get_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5089455, "relation_name": "ALEO.test_alchemy_nfts.get_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nfts", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nfts", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_owners_for_token_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_owners_for_token_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_owners_for_token_status_200"], "alias": "get_owners_for_token_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5143025, "relation_name": "ALEO.test_alchemy_nfts.get_owners_for_token_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_owners_for_token", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_owners_for_token", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_owners_for_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_owners_for_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_owners_for_collection_status_200"], "alias": "get_owners_for_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.51947, "relation_name": "ALEO.test_alchemy_nfts.get_owners_for_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_owners_for_collection", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_owners_for_collection", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__is_holder_of_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__is_holder_of_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__is_holder_of_collection_status_200"], "alias": "is_holder_of_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5248308, "relation_name": "ALEO.test_alchemy_nfts.is_holder_of_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_holder_of_collection", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "is_holder_of_collection", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_contracts_for_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_contracts_for_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_contracts_for_owner_status_200"], "alias": "get_contracts_for_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5301862, "relation_name": "ALEO.test_alchemy_nfts.get_contracts_for_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_contracts_for_owner", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_contracts_for_owner", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nft_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nft_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nft_metadata_status_200"], "alias": "get_nft_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5353508, "relation_name": "ALEO.test_alchemy_nfts.get_nft_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nft_metadata", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nft_metadata", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nft_metadata_batch_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nft_metadata_batch_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nft_metadata_batch_status_200"], "alias": "get_nft_metadata_batch_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.540388, "relation_name": "ALEO.test_alchemy_nfts.get_nft_metadata_batch_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nft_metadata_batch", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nft_metadata_batch", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_contract_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_contract_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_contract_metadata_status_200"], "alias": "get_contract_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5456762, "relation_name": "ALEO.test_alchemy_nfts.get_contract_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_contract_metadata", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_contract_metadata", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_contract_metadata_batch_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_contract_metadata_batch_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_contract_metadata_batch_status_200"], "alias": "get_contract_metadata_batch_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5510032, "relation_name": "ALEO.test_alchemy_nfts.get_contract_metadata_batch_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_contract_metadata_batch", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_contract_metadata_batch", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__invalidate_contract_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__invalidate_contract_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__invalidate_contract_status_200"], "alias": "invalidate_contract_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5563881, "relation_name": "ALEO.test_alchemy_nfts.invalidate_contract_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invalidate_contract", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "invalidate_contract", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__reingest_contract_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__reingest_contract_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__reingest_contract_status_200"], "alias": "reingest_contract_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5612454, "relation_name": "ALEO.test_alchemy_nfts.reingest_contract_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reingest_contract", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "reingest_contract", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__search_contract_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__search_contract_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__search_contract_metadata_status_200"], "alias": "search_contract_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5662422, "relation_name": "ALEO.test_alchemy_nfts.search_contract_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "search_contract_metadata", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'query': 'bored'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "search_contract_metadata", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nfts_for_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nfts_for_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nfts_for_collection_status_200"], "alias": "get_nfts_for_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5713696, "relation_name": "ALEO.test_alchemy_nfts.get_nfts_for_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nfts_for_collection", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nfts_for_collection", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_spam_contracts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_spam_contracts_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_spam_contracts_status_200"], "alias": "get_spam_contracts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5772312, "relation_name": "ALEO.test_alchemy_nfts.get_spam_contracts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_spam_contracts", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_spam_contracts", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__is_spam_contract_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__is_spam_contract_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__is_spam_contract_status_200"], "alias": "is_spam_contract_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5823672, "relation_name": "ALEO.test_alchemy_nfts.is_spam_contract_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_spam_contract", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "is_spam_contract", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__is_airdrop_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__is_airdrop_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__is_airdrop_status_200"], "alias": "is_airdrop_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5873494, "relation_name": "ALEO.test_alchemy_nfts.is_airdrop_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_airdrop", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "is_airdrop", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_floor_price_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_floor_price_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_floor_price_status_200"], "alias": "get_floor_price_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.5973635, "relation_name": "ALEO.test_alchemy_nfts.get_floor_price_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_floor_price", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_floor_price", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nft_sales_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nft_sales_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nft_sales_status_200"], "alias": "get_nft_sales_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6027775, "relation_name": "ALEO.test_alchemy_nfts.get_nft_sales_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nft_sales", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nft_sales", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__compute_rarity_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__compute_rarity_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__compute_rarity_status_200"], "alias": "compute_rarity_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6079826, "relation_name": "ALEO.test_alchemy_nfts.compute_rarity_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "compute_rarity", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "compute_rarity", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35": {"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__summarize_nft_attributes_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__summarize_nft_attributes_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__summarize_nft_attributes_status_200"], "alias": "summarize_nft_attributes_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6133473, "relation_name": "ALEO.test_alchemy_nfts.summarize_nft_attributes_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "summarize_nft_attributes", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "summarize_nft_attributes", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24": {"database": "ALEO", "schema": "test_alchemy_tokens", "name": "test_alchemy_tokens__get_token_allowance_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_tokens__get_token_allowance_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_tokens__get_token_allowance_status_200"], "alias": "get_token_allowance_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.620522, "relation_name": "ALEO.test_alchemy_tokens.get_token_allowance_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_tokens__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_tokens__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_allowance", "file_key_name": "models.alchemy_tokens__alchemy_utils", "attached_node": "model.livequery_models.alchemy_tokens__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_allowance", "model": "{{ get_where_subquery(ref('alchemy_tokens__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb": {"database": "ALEO", "schema": "test_alchemy_tokens", "name": "test_alchemy_tokens__get_token_balances_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_tokens__get_token_balances_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_tokens__get_token_balances_status_200"], "alias": "get_token_balances_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6256957, "relation_name": "ALEO.test_alchemy_tokens.get_token_balances_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_tokens__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_tokens__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_balances", "file_key_name": "models.alchemy_tokens__alchemy_utils", "attached_node": "model.livequery_models.alchemy_tokens__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20']\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_balances", "model": "{{ get_where_subquery(ref('alchemy_tokens__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76": {"database": "ALEO", "schema": "test_alchemy_tokens", "name": "test_alchemy_tokens__get_token_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_tokens__get_token_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_tokens__get_token_metadata_status_200"], "alias": "get_token_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6310334, "relation_name": "ALEO.test_alchemy_tokens.get_token_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_tokens__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_tokens__alchemy_utils"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata", "file_key_name": "models.alchemy_tokens__alchemy_utils", "attached_node": "model.livequery_models.alchemy_tokens__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48']\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata", "model": "{{ get_where_subquery(ref('alchemy_tokens__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220": {"database": "ALEO", "schema": "test_topshot", "name": "test_topshot__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_topshot__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/topshot/topshot__.yml", "unique_id": "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220", "fqn": ["livequery_models", "deploy", "marketplace", "topshot", "test_topshot__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.636782, "relation_name": "ALEO.test_topshot.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "topshot__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.topshot__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "graphql", "file_key_name": "models.topshot__", "attached_node": "model.livequery_models.topshot__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '\n    query {\n      getMintedMoment (momentId: 5) {\n          data {\n              id\n          }\n      }\n  }\n}',\n  'variables': '{}'\n}\n", "assertions": ["result:status_code = 200"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('topshot__')) }}"}, "namespace": null}}, "test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6": {"database": "ALEO", "schema": "test_solscan_public_api_get", "name": "test_solscan_public_api_get__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_solscan_public_api_get__get_status_200.sql", "original_file_path": "models/deploy/marketplace/solscan/solscan__.yml", "unique_id": "test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6", "fqn": ["livequery_models", "deploy", "marketplace", "solscan", "test_solscan_public_api_get__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6424909, "relation_name": "ALEO.test_solscan_public_api_get.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "solscan__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.solscan__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "public_api_get", "file_key_name": "models.solscan__", "attached_node": "model.livequery_models.solscan__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/block/last' , {'limit': 10}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "public_api_get", "model": "{{ get_where_subquery(ref('solscan__')) }}"}, "namespace": null}}, "test.livequery_models.test_covalent__get_status_200.bb43bb7f69": {"database": "ALEO", "schema": "test_covalent", "name": "test_covalent__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_covalent__get_status_200.sql", "original_file_path": "models/deploy/marketplace/covalent/covalent__.yml", "unique_id": "test.livequery_models.test_covalent__get_status_200.bb43bb7f69", "fqn": ["livequery_models", "deploy", "marketplace", "covalent", "test_covalent__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6484337, "relation_name": "ALEO.test_covalent.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "covalent__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.covalent__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.covalent__", "attached_node": "model.livequery_models.covalent__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/1/block_v2/5000000/' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('covalent__')) }}"}, "namespace": null}}, "test.livequery_models.test_stakingrewards__query_status_200.144a35304b": {"database": "ALEO", "schema": "test_stakingrewards", "name": "test_stakingrewards__query_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_stakingrewards__query_status_200.sql", "original_file_path": "models/deploy/marketplace/stakingrewards/stakingrewards__ .yml", "unique_id": "test.livequery_models.test_stakingrewards__query_status_200.144a35304b", "fqn": ["livequery_models", "deploy", "marketplace", "stakingrewards", "test_stakingrewards__query_status_200"], "alias": "query_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6542237, "relation_name": "ALEO.test_stakingrewards.query_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stakingrewards__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.stakingrewards__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query", "file_key_name": "models.stakingrewards__", "attached_node": "model.livequery_models.stakingrewards__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query", "model": "{{ get_where_subquery(ref('stakingrewards__')) }}"}, "namespace": null}}, "test.livequery_models.test_nftscan__get_status_200.33868e0f0d": {"database": "ALEO", "schema": "test_nftscan", "name": "test_nftscan__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_nftscan__get_status_200.sql", "original_file_path": "models/deploy/marketplace/nftscan/nftscan__.yml", "unique_id": "test.livequery_models.test_nftscan__get_status_200.33868e0f0d", "fqn": ["livequery_models", "deploy", "marketplace", "nftscan", "test_nftscan__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6602726, "relation_name": "ALEO.test_nftscan.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nftscan__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.nftscan__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.nftscan__", "attached_node": "model.livequery_models.nftscan__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('nftscan__')) }}"}, "namespace": null}}, "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707": {"database": "ALEO", "schema": "test_playgrounds", "name": "test_playgrounds__query_subgraph_status_200_liquidity_pools", "resource_type": "test", "package_name": "livequery_models", "path": "test_playgrounds__query_subgraph_status_200_liquidity_pools.sql", "original_file_path": "models/deploy/marketplace/playgrounds/playgrounds__.yml", "unique_id": "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707", "fqn": ["livequery_models", "deploy", "marketplace", "playgrounds", "test_playgrounds__query_subgraph_status_200_liquidity_pools"], "alias": "query_subgraph_status_200_liquidity_pools", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6666903, "relation_name": "ALEO.test_playgrounds.query_subgraph_status_200_liquidity_pools", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "playgrounds__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.playgrounds__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query_subgraph", "file_key_name": "models.playgrounds__", "attached_node": "model.livequery_models.playgrounds__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query_subgraph", "model": "{{ get_where_subquery(ref('playgrounds__')) }}"}, "namespace": null}}, "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee": {"database": "ALEO", "schema": "test_playgrounds", "name": "test_playgrounds__query_subgraph_status_200_total_pool_count", "resource_type": "test", "package_name": "livequery_models", "path": "test_playgrounds__query_subgraph_status_200_total_pool_count.sql", "original_file_path": "models/deploy/marketplace/playgrounds/playgrounds__.yml", "unique_id": "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee", "fqn": ["livequery_models", "deploy", "marketplace", "playgrounds", "test_playgrounds__query_subgraph_status_200_total_pool_count"], "alias": "query_subgraph_status_200_total_pool_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6721663, "relation_name": "ALEO.test_playgrounds.query_subgraph_status_200_total_pool_count", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "playgrounds__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.playgrounds__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query_subgraph", "file_key_name": "models.playgrounds__", "attached_node": "model.livequery_models.playgrounds__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query_subgraph", "model": "{{ get_where_subquery(ref('playgrounds__')) }}"}, "namespace": null}}, "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822": {"database": "ALEO", "schema": "test_dapplooker", "name": "test_dapplooker__get_chart_status_202", "resource_type": "test", "package_name": "livequery_models", "path": "test_dapplooker__get_chart_status_202.sql", "original_file_path": "models/deploy/marketplace/dapplooker/dapplooker__.yml", "unique_id": "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822", "fqn": ["livequery_models", "deploy", "marketplace", "dapplooker", "test_dapplooker__get_chart_status_202"], "alias": "get_chart_status_202", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.6906207, "relation_name": "ALEO.test_dapplooker.get_chart_status_202", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dapplooker__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.dapplooker__"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_chart", "file_key_name": "models.dapplooker__", "attached_node": "model.livequery_models.dapplooker__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'a68cc6dd-1bc1-40ca-aaf8-b5155785f0b4'\n", "assertions": ["result:status_code between 200 and 299"], "column_name": "get_chart", "model": "{{ get_where_subquery(ref('dapplooker__')) }}"}, "namespace": null}}}, "sources": {"source.aleo_models.crosschain.dim_labels": {"database": "crosschain_dev", "schema": "core", "name": "dim_labels", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.crosschain.dim_labels", "fqn": ["aleo_models", "crosschain", "dim_labels"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_labels", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_labels", "created_at": 1753463699.6996481}, "source.aleo_models.crosschain_silver.number_sequence": {"database": "crosschain", "schema": "silver", "name": "number_sequence", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.crosschain_silver.number_sequence", "fqn": ["aleo_models", "crosschain_silver", "number_sequence"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "number_sequence", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.number_sequence", "created_at": 1753463699.7007875}, "source.aleo_models.crosschain_silver.labels_combined": {"database": "crosschain", "schema": "silver", "name": "labels_combined", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.crosschain_silver.labels_combined", "fqn": ["aleo_models", "crosschain_silver", "labels_combined"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "labels_combined", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.labels_combined", "created_at": 1753463699.7009475}, "source.aleo_models.crosschain_silver.complete_token_asset_metadata": {"database": "crosschain", "schema": "silver", "name": "complete_token_asset_metadata", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.crosschain_silver.complete_token_asset_metadata", "fqn": ["aleo_models", "crosschain_silver", "complete_token_asset_metadata"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_token_asset_metadata", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_token_asset_metadata", "created_at": 1753463699.7010915}, "source.aleo_models.crosschain_silver.complete_token_prices": {"database": "crosschain", "schema": "silver", "name": "complete_token_prices", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.crosschain_silver.complete_token_prices", "fqn": ["aleo_models", "crosschain_silver", "complete_token_prices"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_token_prices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_token_prices", "created_at": 1753463699.7012267}, "source.aleo_models.crosschain_silver.complete_provider_asset_metadata": {"database": "crosschain", "schema": "silver", "name": "complete_provider_asset_metadata", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.crosschain_silver.complete_provider_asset_metadata", "fqn": ["aleo_models", "crosschain_silver", "complete_provider_asset_metadata"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_provider_asset_metadata", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_provider_asset_metadata", "created_at": 1753463699.7013602}, "source.aleo_models.crosschain_silver.complete_provider_prices": {"database": "crosschain", "schema": "silver", "name": "complete_provider_prices", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.crosschain_silver.complete_provider_prices", "fqn": ["aleo_models", "crosschain_silver", "complete_provider_prices"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_provider_prices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_provider_prices", "created_at": 1753463699.7015097}, "source.aleo_models.crosschain_silver.complete_native_asset_metadata": {"database": "crosschain", "schema": "silver", "name": "complete_native_asset_metadata", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.crosschain_silver.complete_native_asset_metadata", "fqn": ["aleo_models", "crosschain_silver", "complete_native_asset_metadata"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_native_asset_metadata", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_native_asset_metadata", "created_at": 1753463699.7016563}, "source.aleo_models.crosschain_silver.complete_native_prices": {"database": "crosschain", "schema": "silver", "name": "complete_native_prices", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.crosschain_silver.complete_native_prices", "fqn": ["aleo_models", "crosschain_silver", "complete_native_prices"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_native_prices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_native_prices", "created_at": 1753463699.7017844}, "source.aleo_models.bronze_streamline.blocks": {"database": "streamline", "schema": "\"ALEO\"", "name": "blocks", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.bronze_streamline.blocks", "fqn": ["aleo_models", "bronze_streamline", "blocks"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "blocks", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.\"ALEO\".blocks", "created_at": 1753463699.7019086}, "source.aleo_models.bronze_streamline.transactions": {"database": "streamline", "schema": "\"ALEO\"", "name": "transactions", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.bronze_streamline.transactions", "fqn": ["aleo_models", "bronze_streamline", "transactions"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "transactions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.\"ALEO\".transactions", "created_at": 1753463699.7020297}, "source.aleo_models.github_actions.workflows": {"database": "ALEO", "schema": "github_actions", "name": "workflows", "resource_type": "source", "package_name": "aleo_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.aleo_models.github_actions.workflows", "fqn": ["aleo_models", "github_actions", "workflows"], "source_name": "github_actions", "source_description": "", "loader": "", "identifier": "workflows", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ALEO.github_actions.workflows", "created_at": 1753463699.702154}, "source.livequery_models.crosschain.dim_date_hours": {"database": "crosschain_dev", "schema": "core", "name": "dim_date_hours", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.crosschain.dim_date_hours", "fqn": ["livequery_models", "crosschain", "dim_date_hours"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_date_hours", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_date_hours", "created_at": 1753463699.7022896}, "source.livequery_models.crosschain.dim_contracts": {"database": "crosschain_dev", "schema": "core", "name": "dim_contracts", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.crosschain.dim_contracts", "fqn": ["livequery_models", "crosschain", "dim_contracts"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_contracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_contracts", "created_at": 1753463699.7024262}, "source.livequery_models.crosschain.dim_evm_event_abis": {"database": "crosschain_dev", "schema": "core", "name": "dim_evm_event_abis", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.crosschain.dim_evm_event_abis", "fqn": ["livequery_models", "crosschain", "dim_evm_event_abis"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_evm_event_abis", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_evm_event_abis", "created_at": 1753463699.7025802}, "source.livequery_models.ethereum_core.fact_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "fact_event_logs", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.ethereum_core.fact_event_logs", "fqn": ["livequery_models", "ethereum_core", "fact_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "fact_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.fact_event_logs", "created_at": 1753463699.7027235}, "source.livequery_models.ethereum_core.ez_decoded_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "ez_decoded_event_logs", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.ethereum_core.ez_decoded_event_logs", "fqn": ["livequery_models", "ethereum_core", "ez_decoded_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "ez_decoded_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.ez_decoded_event_logs", "created_at": 1753463699.702887}}, "macros": {"macro.aleo_models.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.aleo_models.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'ALEO' %}\n        CREATE SCHEMA IF NOT EXISTS _internal;\n        {{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.aleo_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.4952257, "supported_languages": null}, "macro.aleo_models.enable_search_optimization": {"name": "enable_search_optimization", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.aleo_models.enable_search_optimization", "macro_sql": "{% macro enable_search_optimization(schema_name, table_name, condition = '') %}\n    {% if target.database == 'ALEO' %}\n        ALTER TABLE {{ schema_name }}.{{ table_name }} ADD SEARCH OPTIMIZATION {{ condition }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.4956858, "supported_languages": null}, "macro.aleo_models.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.aleo_models.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.4966018, "supported_languages": null}, "macro.aleo_models.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.aleo_models.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n{% set clone_query %}\ncall aleo._internal.create_prod_clone('aleo', 'aleo_dev', 'internal_dev');\n{% endset %}\n\n{% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.4969993, "supported_languages": null}, "macro.aleo_models.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.aleo_models.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.4983282, "supported_languages": null}, "macro.aleo_models.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.aleo_models.create_udfs", "macro_sql": "{% macro create_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set sql %}\n        {{ create_udf_bulk_rest_api_v2() }};\n{% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.aleo_models.create_udf_bulk_rest_api_v2", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.4988956, "supported_languages": null}, "macro.aleo_models.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.aleo_models.generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.499961, "supported_languages": null}, "macro.aleo_models.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.aleo_models.generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {% if split_name | length < 2 %}\n        {{ split_name [0] | trim }}\n    {% else %}\n        {{ split_name [1] | trim }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5006416, "supported_languages": null}, "macro.aleo_models.generate_tmp_view_name": {"name": "generate_tmp_view_name", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.aleo_models.generate_tmp_view_name", "macro_sql": "{% macro generate_tmp_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] ~ '__dbt_tmp' | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.501139, "supported_languages": null}, "macro.aleo_models.generate_view_name": {"name": "generate_view_name", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.aleo_models.generate_view_name", "macro_sql": "{% macro generate_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5016172, "supported_languages": null}, "macro.aleo_models.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.aleo_models.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value(\n        'BLOCKCHAIN_NAME',\n        'ALEO'\n    ) }}\n    {{ set_database_tag_value(\n        'BLOCKCHAIN_TYPE',\n        'ZK'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.aleo_models.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5020075, "supported_languages": null}, "macro.aleo_models.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.aleo_models.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.aleo_models.create_tag_if_missing", "macro.aleo_models.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5183747, "supported_languages": null}, "macro.aleo_models.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.aleo_models.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.519286, "supported_languages": null}, "macro.aleo_models.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.aleo_models.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5208724, "supported_languages": null}, "macro.aleo_models.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.aleo_models.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5224125, "supported_languages": null}, "macro.aleo_models.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.aleo_models.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.523022, "supported_languages": null}, "macro.aleo_models.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.aleo_models.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5236554, "supported_languages": null}, "macro.aleo_models.create_udf_bulk_rest_api_v2": {"name": "create_udf_bulk_rest_api_v2", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "unique_id": "macro.aleo_models.create_udf_bulk_rest_api_v2", "macro_sql": "{% macro create_udf_bulk_rest_api_v2() %}\n    CREATE\n    OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_rest_api_v2(\n        json OBJECT\n    ) returns ARRAY api_integration = {% if target.name == \"prod\" %}\n        aws_aleo_api_prod_v2 AS 'https://onyzmq60n9.execute-api.us-east-1.amazonaws.com/prod/udf_bulk_rest_api'\n    {% else %}\n        aws_aleo_api_stg_v2 AS 'https://gvmfebiq6g.execute-api.us-east-1.amazonaws.com/stg/udf_bulk_rest_api'\n    {%- endif %};\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5240629, "supported_languages": null}, "macro.aleo_models.streamline_external_table_query_v2": {"name": "streamline_external_table_query_v2", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.aleo_models.streamline_external_table_query_v2", "macro_sql": "{% macro streamline_external_table_query_v2(\n        model,\n        partition_function\n    ) %}\n    \n    {% set days = var(\"BRONZE_LOOKBACK_DAYS\")%}\n  \n    WITH meta AS (\n        SELECT\n            last_modified AS inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -ABS({{days}}), CURRENT_TIMESTAMP()),\n                    table_name => '{{ source( \"bronze_streamline\", model) }}')\n                ) A\n            )\n        SELECT\n            s.*,\n            b.file_name,\n            inserted_timestamp\n        FROM\n            {{ source(\n                \"bronze_streamline\",\n                model\n            ) }}\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b.partition_key = s.partition_key\n        WHERE\n            b.partition_key = s.partition_key\n            AND DATA :error IS NULL\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.525345, "supported_languages": null}, "macro.aleo_models.streamline_external_table_FR_query_v2": {"name": "streamline_external_table_FR_query_v2", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.aleo_models.streamline_external_table_FR_query_v2", "macro_sql": "{% macro streamline_external_table_FR_query_v2(\n        model,\n        partition_function\n    ) %}\n    WITH meta AS (\n        SELECT\n            registered_on AS inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => '{{ source( \"bronze_streamline\", model) }}'\n                )\n            ) A\n    )\nSELECT\n    s.*,\n    b.file_name,\n    inserted_timestamp\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    AND DATA :error IS NULL\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5257633, "supported_languages": null}, "macro.aleo_models.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/dbt/get_merge_sql.sql", "original_file_path": "macros/dbt/get_merge_sql.sql", "unique_id": "macro.aleo_models.get_merge_sql", "macro_sql": "{% macro get_merge_sql(\n        target,\n        source,\n        unique_key,\n        dest_columns,\n        incremental_predicates\n    ) -%}\n    {% set predicate_override = \"\" %}\n    {% if incremental_predicates [0] == \"dynamic_range\" %}\n        -- run some queries to dynamically determine the min + max of this 'input_column' in the new data\n        {% set input_column = incremental_predicates [1] %}\n        {% set get_limits_query %}\n    SELECT\n        MIN(\n            {{ input_column }}\n        ) AS lower_limit,\n        MAX(\n            {{ input_column }}\n        ) AS upper_limit\n    FROM\n        {{ source }}\n\n        {% endset %}\n        {% set limits = run_query(get_limits_query) [0] %}\n        {% set lower_limit,\n        upper_limit = limits [0],\n        limits [1] %}\n        -- use those calculated min + max values to limit 'target' scan, to only the days with new data\n        {% set predicate_override %}\n        dbt_internal_dest.{{ input_column }} BETWEEN '{{ lower_limit }}'\n        AND '{{ upper_limit }}' {% endset %}\n    {% endif %}\n\n    {% set predicates = [predicate_override] if predicate_override else incremental_predicates %}\n    -- standard merge from here\n    {% set merge_sql = dbt.get_merge_sql(\n        target,\n        source,\n        unique_key,\n        dest_columns,\n        predicates\n    ) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5278802, "supported_languages": null}, "macro.aleo_models.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/dbt/get_tmp_relation_type.sql", "original_file_path": "macros/dbt/get_tmp_relation_type.sql", "unique_id": "macro.aleo_models.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(\n        strategy,\n        unique_key,\n        language\n    ) %}\n    -- always table\n    {{ return('table') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5281847, "supported_languages": null}, "macro.aleo_models.test_compare_model_subset": {"name": "test_compare_model_subset", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tests/compare_model_subset.sql", "original_file_path": "macros/tests/compare_model_subset.sql", "unique_id": "macro.aleo_models.test_compare_model_subset", "macro_sql": "{% test compare_model_subset(model, compare_model, compare_columns, model_condition) %}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n    select {{compare_cols_csv}} from {{ model }}\n    {{ model_condition }}\n),\nb as (\n    select {{compare_cols_csv}} from {{ compare_model }}\n),\na_minus_b as (\n    select * from a\n    except\n    select * from b\n),\nb_minus_a as (\n    select * from b\n    except\n    select * from a\n),\nunioned as (\n    select 'in_actual_not_in_expected' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'in_expected_not_in_actual' as which_diff, b_minus_a.* from b_minus_a\n)\nselect * from unioned\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5289118, "supported_languages": null}, "macro.aleo_models.tx_gaps": {"name": "tx_gaps", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "unique_id": "macro.aleo_models.tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_id,\n            tx_count\n        FROM\n            {{ ref('silver__blocks') }}\n    ),\n    model_name AS (\n        SELECT\n            block_id,\n            COUNT(\n                DISTINCT tx_id\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_id\n    )\nSELECT\n    block_base.block_id,\n    tx_count,\n    model_name.block_id,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_id = model_name.block_id\nWHERE\n    tx_count <> model_tx_count\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5293472, "supported_languages": null}, "macro.aleo_models.sequence_gaps": {"name": "sequence_gaps", "resource_type": "macro", "package_name": "aleo_models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "unique_id": "macro.aleo_models.sequence_gaps", "macro_sql": "{% macro sequence_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n        WHERE\n            block_timestamp::date <= current_date - 1\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5308046, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5317948, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5367658, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5373254, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5376484, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.537839, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.53797, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5382257, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.538636, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5395062, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5540972, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5545459, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.555721, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5567338, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_paginated_relations_array": {"name": "snowflake__get_paginated_relations_array", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_paginated_relations_array", "macro_sql": "{% macro snowflake__get_paginated_relations_array(max_iter, max_results_per_iter, max_total_results, schema_relation, watermark) %}\n\n  {% set paginated_relations = [] %}\n\n  {% for _ in range(0, max_iter) %}\n\n      {% if schema_relation is string %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% else %}\n        {%- set paginated_sql -%}\n          show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }} from '{{ watermark.table_name }}'\n        {%- endset -%}\n      {% endif -%}\n\n      {%- set paginated_result = run_query(paginated_sql) %}\n      {%- set paginated_n = (paginated_result | length) -%}\n\n      {#\n        terminating condition: if there are 0 records in the result we reached\n        the end exactly on the previous iteration\n      #}\n      {%- if paginated_n == 0 -%}\n        {%- break -%}\n      {%- endif -%}\n\n      {#\n        terminating condition: At some point the user needs to be reasonable with how\n        many objects are contained in their schemas. Since there was already\n        one iteration before attempting pagination, loop.index == max_iter means\n        the limit has been surpassed.\n      #}\n\n      {%- if loop.index == max_iter -%}\n        {%- set msg -%}\n           dbt will list a maximum of {{ max_total_results }} objects in schema {{ schema_relation }}.\n           Your schema exceeds this limit. Please contact support@getdbt.com for troubleshooting tips,\n           or review and reduce the number of objects contained.\n        {%- endset -%}\n\n        {% do exceptions.raise_compiler_error(msg) %}\n      {%- endif -%}\n\n      {%- do paginated_relations.append(paginated_result) -%}\n      {% set watermark.table_name = paginated_result.columns[1].values()[-1] %}\n\n      {#\n        terminating condition: paginated_n < max_results_per_iter means we reached the end\n      #}\n      {%- if paginated_n < max_results_per_iter -%}\n         {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n\n  {{ return(paginated_relations) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5586526, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10, max_results_per_iter=10000) %}\n\n  {%- set max_total_results = max_results_per_iter * max_iter -%}\n  {% if schema_relation is string %}\n    {%- set sql -%}\n      show objects in {{ schema_relation }} limit {{ max_results_per_iter }}\n    {%- endset -%}\n  {% else %}\n    {%- set sql -%}\n      show objects in {{ schema_relation.include(identifier=False) }} limit {{ max_results_per_iter }}\n    {%- endset -%}\n  {% endif -%}\n\n  {%- set result = run_query(sql) -%}\n\n  {%- set n = (result | length) -%}\n  {%- set watermark = namespace(table_name=result.columns[1].values()[-1]) -%}\n  {%- set paginated = namespace(result=[]) -%}\n\n  {% if n >= max_results_per_iter %}\n\n    {% set paginated.result = snowflake__get_paginated_relations_array(\n         max_iter,\n         max_results_per_iter,\n         max_total_results,\n         schema_relation,\n         watermark\n       )\n    %}\n\n  {% endif %}\n\n  {%- set all_results_array = [result] + paginated.result -%}\n  {%- set result = result.merge(all_results_array) -%}\n  {%- do return(result) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__get_paginated_relations_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5602558, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5607738, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5611956, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5617554, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5627766, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5630515, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5632968, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5640156, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5642905, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5650327, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5664089, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5667567, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.567154, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5675855, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5677629, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5697799, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5702293, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5706246, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5709407, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5757992, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5781643, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.578528, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5792425, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5796993, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.58022, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5834064, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False, table_type=none) %}\n{#- The following logic is only for backwards-compatiblity with deprecated `temporary` parameter -#}\n{% if table_type is not none %}\n    {#- Just use the table_type as-is -#}\n{% elif temporary -%}\n    {#- Case 1 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {%- set table_type = \"temporary\" -%}\n{% else %}\n    {#- Case 2 when the deprecated `temporary` parameter is used without the replacement `table_type` parameter -#}\n    {#- Snowflake treats \"\" as meaning \"permanent\" -#}\n    {%- set table_type = \"\" -%}\n{%- endif %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5841877, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5843544, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5851612, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5888176, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5937822, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5940504, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5944118, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.594861, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.597881, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5983229, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5988827, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5993104, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5996037, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5997741, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.5999396, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6001444, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6004994, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6007705, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6009738, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6016037, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6018922, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6029193, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6033788, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.603898, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.60427, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6048615, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6050754, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- set transient = config.get('transient', default=true) -%}\n\n  {% if temporary -%}\n    {%- set table_type = \"temporary\" -%}\n  {%- elif transient -%}\n    {%- set table_type = \"transient\" -%}\n  {%- else -%}\n    {%- set table_type = \"\" -%}\n  {%- endif %}\n\n  {%- if language == 'sql' -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {{ table_type }} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, table_type=table_type) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.61065, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6109362, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6112213, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6114297, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6139543, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6141853, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6158266, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6160998, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6163666, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6165898, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6170616, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set _dynamic_table_sql -%}\n        show dynamic tables\n            like '{{ relation.identifier }}'\n            in schema {{ relation.database }}.{{ relation.schema }}\n        ;\n        select\n            \"name\",\n            \"schema_name\",\n            \"database_name\",\n            \"text\",\n            \"target_lag\",\n            \"warehouse\"\n        from table(result_scan(last_query_id()))\n    {%- endset %}\n    {% set _dynamic_table = run_query(_dynamic_table_sql) %}\n\n    {% do return({'dynamic_table': _dynamic_table}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6178432, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.619426, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6197596, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) %}\n\n    create or replace dynamic table {{ relation }}\n        target_lag = '{{ config.get(\"target_lag\") }}'\n        warehouse = {{ config.get(\"snowflake_warehouse\") }}\n        as (\n            {{ sql }}\n        )\n    ;\n    {{ snowflake__refresh_dynamic_table(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__refresh_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6203084, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6208646, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6213114, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6217897, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6233315, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6236367, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6238573, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6240776, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.624293, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6308672, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6323378, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6327028, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.63343, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6337304, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.633936, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6341565, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6343338, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6345866, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6347668, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6354744, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6357498, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6375754, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6421971, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6462693, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6502883, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.656954, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.657533, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6579015, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.659818, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6601524, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.661085, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.662664, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6630096, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6632867, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6637256, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6640031, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6645813, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6648593, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6652374, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6655247, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6657486, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6660216, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6662636, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6666903, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6688926, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6697195, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6706977, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6710386, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6721408, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6800902, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6824846, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.682872, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.684371, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6847773, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6857357, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6932914, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.6942263, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7016177, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7033994, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7051728, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.706424, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7067943, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7069747, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7120667, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7125401, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7127995, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.717196, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.717465, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7178159, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7190726, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7193258, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7195957, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7216625, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes') or false %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7237382, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7245712, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7253094, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7339244, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.734383, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7347, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7348504, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7350736, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7352538, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7355778, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7359068, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where {{ columns.dbt_valid_to }} is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7378309, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7381191, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as {{ columns.dbt_valid_to }}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7387965, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7394156, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7403083, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7409472, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.valid_snapshot_target(target_relation, columns) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7486925, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.751278, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.755166, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7567472, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7571998, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7575202, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.758413, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7589974, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7595878, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7599576, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7607977, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7612977, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.761749, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7627144, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7629457, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7631636, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7633286, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7639534, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7642024, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7643216, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7645779, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.76483, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.765373, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7656715, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7659056, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7661767, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7709482, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7713451, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7716608, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.772058, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7723286, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7725892, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7728543, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7732115, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7735236, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7739644, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7742374, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7744915, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.774767, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7750068, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.775249, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7754912, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7757914, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7760458, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7770147, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7772734, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7775898, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7778413, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7782247, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7789454, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.779354, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7797086, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7827673, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7831388, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7836213, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7839358, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7842405, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7845197, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.786332, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.786881, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7871535, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7876828, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.788014, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7889988, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7893734, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.79061, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7911992, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7915087, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ compiled_code }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7918098, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7945247, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.794779, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7951043, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.795552, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7959127, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7963862, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7966707, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7969415, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.797305, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7982368, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7985864, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7987976, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.7999828, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8001928, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8004308, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8010316, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8013012, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8015244, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8017585, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8019545, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8025508, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8031433, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.805467, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.805649, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8058975, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8060691, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.806609, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8068812, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8070662, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8073945, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8077176, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8080583, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8083653, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8087106, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8098469, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.810126, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.81051, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8108456, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8125467, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.817492, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8183181, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8199565, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8202593, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8204033, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8226776, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8229113, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8240676, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8246925, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8255486, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8262212, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8263378, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8288765, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8306417, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8320527, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8323982, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8345325, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.835358, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8358035, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8363585, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8367617, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8375082, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8379166, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8383458, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8389423, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8395138, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8399374, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8401456, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8404853, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8406103, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8409636, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.841125, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8416727, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8420413, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8427765, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8430288, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8433673, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.843745, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8439116, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8442338, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8443558, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8455079, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.846394, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.846754, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8473089, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8477361, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.847937, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8490934, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8497286, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8500087, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8508015, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8512065, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8514063, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8517928, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8519576, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8523347, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8525994, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8538651, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.854096, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8543463, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.854593, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.854837, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8550606, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8553054, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8555841, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.855829, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.856054, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.856294, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.856675, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.856919, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.857137, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8575265, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8577282, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8581328, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8583376, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.858736, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8589497, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.859307, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8594837, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8603377, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8609648, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8613732, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8616028, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.86208, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.862331, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8628283, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8630855, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.863577, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8640032, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8644035, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.864628, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8650498, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8652582, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8657324, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8659892, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8666158, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8669984, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.867216, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8675876, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.867828, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8688383, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8694124, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.869699, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.870002, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8702939, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8707008, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8710172, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8716981, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8723607, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8728814, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8732784, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8742967, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.874959, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8752642, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8757324, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.876206, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.876529, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8770008, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.877315, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8778632, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8782349, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8794816, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8812518, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.88164, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8818357, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8830228, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8832934, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8839507, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8849716, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8856695, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8859427, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8862095, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8866339, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8868573, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8872628, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8875003, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8878639, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8880534, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8884594, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.888686, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8890893, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8893266, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8902092, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8905263, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8909445, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8911684, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8916318, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.891975, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8923724, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8926141, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.892971, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8931558, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8937662, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8940036, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8942719, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8949356, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8953326, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8955684, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8967803, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.897001, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8986402, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.8989344, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.899283, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.900745, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9009254, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9017193, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9019744, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9021847, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9040968, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9048095, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9053097, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.906081, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9064581, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9069097, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9073358, "supported_languages": null}, "macro.fsc_utils.get_ancestors": {"name": "get_ancestors", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_ancestors", "macro_sql": "{%- macro get_ancestors(node, include_depth=false, exclude_source=false) -%}\n{#\n    Return a list of ancestors for a node in a DAG.\n #}\n    {%- for dep in node.depends_on.nodes | unique | list  recursive %}\n        {% if dep.startswith(\"model.\") and \"bronze__\" not in dep %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n            {{- loop(graph.nodes[dep].depends_on.nodes) -}}\n        {% elif not exclude_source %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n        {%- endif -%}\n    {%- endfor %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9117472, "supported_languages": null}, "macro.fsc_utils.get_view_ddl": {"name": "get_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_view_ddl", "macro_sql": "{% macro get_view_ddl() %}\n{#\n    Return a dictionary of view names and their DDL statements.\n    The DDL statements are escaped to be used in a Snowflake query.\n    The dictionary is converted to JSON to be used in a dbt macro..\n #}\n    {% if execute %}\n        {% set query %}\n            SELECT\n            CONCAT_WS('.', TABLE_SCHEMA, TABLE_NAME) as VIEW_NAME,\n            VIEW_DEFINITION\n            FROM {{target.database}}.INFORMATION_SCHEMA.VIEWS\n            WHERE TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'STREAMLINE')\n            AND TABLE_SCHEMA NOT LIKE 'TEST_%'\n        {%- endset -%}\n        {%- set results = run_query(query) -%}\n        {% set ddl = {} %}\n        {% for key, value in results.rows %}\n          {%- do ddl.update({key: value|replace(\"$$\", \"\\$\\$\")}) -%}\n        {%- endfor -%}\n        {{- tojson(ddl) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9126148, "supported_languages": null}, "macro.fsc_utils.replace_database_references": {"name": "replace_database_references", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.replace_database_references", "macro_sql": "{% macro replace_database_references(references_to_replace, ddl) %}\n{#\n    Return the DDL statement for a view with the references replaced.\n    All items in references_to_replace are replaced with __NEW__,\n    while all remaining references to the database are replaced with __SOURCE__.\n\n    references_to_replace: a list of references to replace with __NEW__\n    ddl: the DDL statement to be replaced\n\n#}\n    {% set re = modules.re %}\n    {% set outer = namespace(replaced=ddl) %}\n    {% for key in references_to_replace %}\n        {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ key ~ \"\\\\b\", re.IGNORECASE) -%}\n        {%- set replacement  =  \"__NEW__\" ~ \".\" ~ key -%}\n        {% set outer.replaced = original.sub(replacement, outer.replaced) %}\n    {%- endfor -%}\n    {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ \"\\\\b\", re.IGNORECASE) -%}\n    {% set outer.replaced = original.sub(\"__SOURCE__.\", outer.replaced) %}\n    {{- outer.replaced -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9138415, "supported_languages": null}, "macro.fsc_utils.generate_view_ddl": {"name": "generate_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_view_ddl", "macro_sql": "{% macro generate_view_ddl(dag, schema) %}\n{#\n    Return a list of DDL statements for views in a DAG.\n\n    dag: a DAG of views\n    schema: schemas to create schema DDL for\n #}\n    {%- set ddl =  fromjson(fsc_utils.get_view_ddl())  -%}\n    {%- set created = {} -%}\n    {%- set final_text = [] -%}\n    {%- for view, deps in dag.items() -%}\n        {%- for d in deps -%}\n            {%- set table_name = d.split(\".\")[-1].replace(\"__\", \".\").upper() -%}\n            {%- if ddl.get(table_name) and table_name not in created -%}\n                {%- set replaced = fsc_utils.replace_database_references(ddl.keys(), ddl[table_name]) -%}\n                {%- do final_text.append(replaced) -%}\n                {%- do created.update({table_name:true}) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endfor -%}\n    {%- set schema_ddl = [] -%}\n    {%- for s in schema -%}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + final_text) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_view_ddl", "macro.fsc_utils.replace_database_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9154341, "supported_languages": null}, "macro.fsc_utils.generate_dag_and_schemas": {"name": "generate_dag_and_schemas", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_dag_and_schemas", "macro_sql": "{% macro generate_dag_and_schemas(node_paths, materializations) %}\n{#\n    Return a DAG of views and a list of schemas to create.\n\n    node_paths: a list of node paths to include in the DAG\n    materializations: a list of materializations to include in the DAG\n #}\n    {%- set dag = {} -%}\n    {%- set schema = [] -%}\n    {%- for key, value in graph.nodes.items() -%}\n        {%\n        if value.refs\n        and set(value.fqn).intersection(node_paths)\n        and value.config.materialized in materializations\n        and value.config.enabled\n        and not value.sources\n        and not key.endswith(\"_create_gold\")\n        -%}\n        {%- set name = value.schema + \".\" + value.alias -%}\n        {%- set _result = fromyaml(\"[\" ~ fsc_utils.get_ancestors(value, exclude_source=true)[:-1] ~ \"]\") -%}\n            {% if _result -%}\n                {%- do _result.insert(0, key) -%}\n                {%- do dag.update({name.upper() : _result | reverse|list})  -%}\n                {% for d in _result -%}\n                    {%- if d.split(\".\")[-1].split(\"__\")[0] not in schema -%}\n                        {%- do schema.append(d.split(\".\")[-1].split(\"__\")[0]) -%}\n                    {%- endif -%}\n                {%- endfor -%}\n            {%- else -%}\n                {%- do dag.update({name.upper() : [key] }) -%}\n                {%- if value.schema not in schema -%}\n                    {%- do schema.append(value.schema) -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {%- set final = {\"dag\": dag, \"schema\": schema} -%}\n    {{- tojson(final) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_ancestors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9179318, "supported_languages": null}, "macro.fsc_utils.generate_table_views_ddl": {"name": "generate_table_views_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_table_views_ddl", "macro_sql": "{% macro generate_table_views_ddl(tables, schema) %}\n{#\n    Return a list of DDL statements for views of tables from a list.\n\n    tables: a list of tables to create views for\n    schema: schemas to create schema DDL for\n #}\n    {%- set schema_ddl = [] -%}\n    {%- set view_ddl = [] -%}\n    {% for s in schema %}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {% for table in tables %}\n        {%- do view_ddl.append(\"CREATE OR REPLACE VIEW __NEW__.\" ~ table ~ \" copy grants AS SELECT * FROM \" ~ \"__SOURCE__.\" ~ table ~\";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + view_ddl) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.918735, "supported_languages": null}, "macro.fsc_utils.generate_datashare_ddl": {"name": "generate_datashare_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_ddl", "macro_sql": "{% macro generate_datashare_ddl() %}\n{#\n    generate DDL for datashare\n\n    Return: DDL for datashare\n #}\n    {%- set gold_views = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"view\"])) -%}\n    {%- set gold_views_ddl = fromyaml(fsc_utils.generate_view_ddl(gold_views[\"dag\"], gold_views[\"schema\"])) -%}\n    {%- set gold_tables = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"incremental\", \"table\"])) -%}\n    {%- set gold_tables_ddl = fromyaml(fsc_utils.generate_table_views_ddl(gold_tables[\"dag\"].keys(), gold_tables[\"schema\"])) -%}\n    {%- set combined_ddl = gold_views_ddl + gold_tables_ddl -%}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {{- \"BEGIN\\n\" ~ (combined_ddl | join(\"\\n\")) ~ \"\\nEND\" -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.generate_dag_and_schemas", "macro.fsc_utils.generate_view_ddl", "macro.fsc_utils.generate_table_views_ddl"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.919913, "supported_languages": null}, "macro.fsc_utils.generate_datashare_udf_ddl": {"name": "generate_datashare_udf_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_udf_ddl", "macro_sql": "{% macro generate_datashare_udf_ddl() %}\n{#\n    generate UDF DDL for datashare\n\n    Return: UDF DDL for datashare\n #}\n    {%- set schema = \"UTILS\" -%}\n    {%- set udfs = fromyaml(fsc_utils.udf_configs(schema)) -%}\n    {%- set combined_ddl = [] -%}\n    {%- for udf in udfs -%}\n        {% set name_ = udf [\"name\"] %}\n        {% set signature = udf [\"signature\"] %}\n        {% set return_type = udf [\"return_type\"] %}\n        {% set sql_ = udf [\"sql\"] %}\n        {% set options = udf [\"options\"] %}\n        {% set api_integration = udf [\"api_integration\"] %}\n        {% set func_type = udf [\"func_type\"] %}\n        {% set exclude_from_datashare = udf.get(\"exclude_from_datashare\",False) %}\n        {% if not exclude_from_datashare %}\n            {%- set udf_ddl = fsc_utils.create_sql_function(\n                name_ = name_,\n                signature = signature,\n                return_type = return_type,\n                sql_ = sql_,\n                options = options,\n                api_integration = api_integration,\n                func_type = func_type\n            ).replace(\"\\\\\",\"\\\\\\\\\").replace(\"'\",\"\\\\'\") -%}\n            {%- do combined_ddl.append(udf_ddl) -%}       \n        {% endif %} \n    {% endfor %}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {%- do combined_ddl.insert(1, \"USE DATABASE __NEW__;\") -%}\n    {%- do combined_ddl.insert(2, \"CREATE SCHEMA IF NOT EXISTS \"~schema~\";\") -%}\n    {{- \"'BEGIN','\" ~ (combined_ddl | join(\"','\")) ~ \"','END'\" -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_sql_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9220748, "supported_languages": null}, "macro.fsc_utils.dynamic_range_predicate": {"name": "dynamic_range_predicate", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dynamic_range_predicate.sql", "original_file_path": "macros/dynamic_range_predicate.sql", "unique_id": "macro.fsc_utils.dynamic_range_predicate", "macro_sql": "{% macro dynamic_range_predicate(source, predicate_column, output_alias=\"\") -%}\n    {% set supported_data_types = [\"INTEGER\",\"DATE\"] %}\n    {% set predicate_column_data_type_query %}\n        SELECT typeof({{predicate_column}}::variant)\n        FROM {{ source }}\n        WHERE {{predicate_column}} IS NOT NULL\n        LIMIT 1;\n    {% endset %}\n    {% set predicate_column_data_type_result = run_query(predicate_column_data_type_query) %}\n    {% if predicate_column_data_type_result.rows|length == 0 %}\n        {{ return('1=1') }}\n    {% endif %}\n    {% set predicate_column_data_type = predicate_column_data_type_result.columns[0].values()[0] %}\n    \n\n    {% if predicate_column_data_type not in supported_data_types %}\n        {{ exceptions.raise_compiler_error(\"Data type of \"~ predicate_column_data_type ~\" is not supported, use one of \"~ supported_data_types ~\" column instead\") }}\n    {% endif %}\n\n    {% set get_start_end_query %}\n        SELECT\n            MIN(\n                {{ predicate_column }}\n            ) AS full_range_start,\n            MAX(\n                {{ predicate_column }}\n            ) AS full_range_end\n        FROM\n            {{ source }}\n    {% endset %}\n    {% set start_end_results = run_query(get_start_end_query).columns %}\n    {% set start_preciate_value = start_end_results[0].values()[0] %}\n    {% set end_predicate_value = start_end_results[1].values()[0] %}\n\n    {% set get_limits_query %}\n        WITH block_range AS (\n            {% if predicate_column_data_type == \"INTEGER\" %}\n                SELECT \n                    SEQ4() + {{ start_preciate_value }} as predicate_value\n                FROM \n                    TABLE(GENERATOR(rowcount => {{ end_predicate_value - start_preciate_value }}+1))\n            {% else %}\n                SELECT\n                    date_day as predicate_value\n                FROM\n                    crosschain.core.dim_dates\n                WHERE\n                    date_day BETWEEN '{{ start_preciate_value }}' AND '{{ end_predicate_value }}'\n            {% endif %}\n        ),\n        partition_block_counts AS (\n            SELECT\n                b.predicate_value,\n                COUNT(r.{{ predicate_column }}) AS count_in_window\n            FROM\n                block_range b\n                LEFT OUTER JOIN {{ source }}\n                r\n                ON r.{{ predicate_column }} = b.predicate_value\n            GROUP BY\n                1\n        ),\n        range_groupings AS (\n            SELECT\n                predicate_value,\n                count_in_window,\n                conditional_change_event(\n                    count_in_window > 0\n                ) over (\n                    ORDER BY\n                        predicate_value\n                ) AS group_val\n            FROM\n                partition_block_counts\n        ),\n        contiguous_ranges AS (\n            SELECT\n                MIN(predicate_value) AS start_value,\n                MAX(predicate_value) AS end_value\n            FROM\n                range_groupings\n            WHERE\n                count_in_window > 0\n            GROUP BY\n                group_val\n        ),\n        between_stmts AS (\n            SELECT\n                CONCAT(\n                    '{{ output_alias~\".\" if output_alias else \"\" }}',\n                    '{{ predicate_column }} between \\'',\n                    start_value,\n                    '\\' and \\'',\n                    end_value,\n                    '\\''\n                ) AS b\n            FROM\n                contiguous_ranges\n        )\n        SELECT\n            CONCAT('(', LISTAGG(b, ' OR '), ')')\n        FROM\n            between_stmts \n    {% endset %}\n    \n    {% set between_stmts = run_query(get_limits_query).columns[0].values()[0] %}\n\n    {% if between_stmts != '()' %}\n        /* in case empty update array */\n        {% set predicate_override = between_stmts %}\n    {% else %}\n        {% set predicate_override = '1=1' %}\n        /* need to have something or it will error since it expects at least 1 predicate */\n    {% endif %}\n\n    {{ return(predicate_override) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9299018, "supported_languages": null}, "macro.fsc_utils.get_query_tag": {"name": "get_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.get_query_tag", "macro_sql": "{% macro get_query_tag() %}\n    {# Get the full path of the model #}\n    {% set model_path = model.path | string %}\n    {% set folder_path = '/'.join(model_path.split('/')[:-1]) %}\n    \n    {# Get core folders from vars #}\n    {% set core_folders = var('core_folders') %}\n    \n    {# Initialize is_core and check each path pattern #}\n    {% set ns = namespace(is_core=false) %}\n    \n    {% for folder in core_folders %}\n        {% if folder in folder_path %}\n            {% set ns.is_core = true %}\n        {% endif %}\n    {% endfor %}\n    \n    {# Build the JSON query tag #}\n    {% set tag_dict = {\n        \"project\": project_name,\n        \"model\": model.name,\n        \"model_type\": \"core\" if ns.is_core else \"non_core\",\n        \"invocation_id\": invocation_id,\n        \"dbt_tags\": config.get('tags', [])\n    } %}\n    \n    {% set query_tag = tojson(tag_dict) %}\n    \n    {# Return the properly escaped string #}\n    {{ return(\"'\" ~ query_tag ~ \"'\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9317076, "supported_languages": null}, "macro.fsc_utils.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.set_query_tag", "macro_sql": "{% macro set_query_tag() %}\n    {% set tag = fsc_utils.get_query_tag() %}\n    {% do run_query(\"alter session set query_tag = \" ~ tag) %}\n    {{ return(\"\") }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.get_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9320755, "supported_languages": null}, "macro.fsc_utils.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.fsc_utils.create_udfs", "macro_sql": "{% macro create_udfs(drop_=False,schema=\"utils\") %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set name %}\n        {{- fsc_utils.udf_configs(schema) -}}\n        {% endset %}\n        {%  set udfs = fromyaml(name) %}\n        {% set sql %}\n        CREATE schema if NOT EXISTS {{ schema }};\n        {%- for udf in udfs -%}\n        {{- fsc_utils.create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {% endfor %}\n        {% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_or_drop_function_from_config", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.933228, "supported_languages": null}, "macro.fsc_utils.create_streamline_udfs": {"name": "create_streamline_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_streamline_udfs.sql", "original_file_path": "macros/create_streamline_udfs.sql", "unique_id": "macro.fsc_utils.create_streamline_udfs", "macro_sql": "{% macro create_streamline_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% do run_query(\"CREATE SCHEMA IF NOT EXISTS streamline\") %}\n        \n        {{ create_udf_bulk_rest_api_v2() }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fsc_utils.create_udf_bulk_rest_api_v2"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.933898, "supported_languages": null}, "macro.fsc_utils.create_evm_streamline_udfs": {"name": "create_evm_streamline_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_streamline_udfs.sql", "original_file_path": "macros/create_streamline_udfs.sql", "unique_id": "macro.fsc_utils.create_evm_streamline_udfs", "macro_sql": "{% macro create_evm_streamline_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% do run_query(\"CREATE SCHEMA IF NOT EXISTS streamline\") %}\n        \n        {{ create_udf_bulk_rest_api_v2() }}\n        {{ create_udf_bulk_decode_logs() }}\n        {{ create_udf_bulk_decode_traces() }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fsc_utils.create_udf_bulk_rest_api_v2", "macro.fsc_utils.create_udf_bulk_decode_logs", "macro.fsc_utils.create_udf_bulk_decode_traces"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.934322, "supported_languages": null}, "macro.fsc_utils.create_gha_tasks": {"name": "create_gha_tasks", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.create_gha_tasks", "macro_sql": "{% macro create_gha_tasks() %}\n    {% set query %}\nSELECT\n    task_name,\n    workflow_name,\n    workflow_schedule\nFROM\n    {{ ref('github_actions__tasks') }}\n\n    {% endset %}\n    {% set results = run_query(query) %}\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    {% set prod_db = target.database.lower().replace(\n        '_dev',\n        ''\n    ) %}\n    {% for result in results_list %}\n        {% set task_name = result [0] %}\n        {% set workflow_name = result [1] %}\n        {% set workflow_schedule = result [2] %}\n        {% set sql %}\n        EXECUTE IMMEDIATE 'CREATE OR REPLACE TASK github_actions.{{ task_name }} WAREHOUSE = DBT_CLOUD SCHEDULE = \\'USING CRON {{ workflow_schedule }} UTC\\' COMMENT = \\'Task to trigger {{ workflow_name }}.yml workflow according to {{ workflow_schedule }}\\' AS DECLARE rs resultset; output string; BEGIN rs := (SELECT github_actions.workflow_dispatches(\\'FlipsideCrypto\\', \\'{{ prod_db }}-models\\', \\'{{ workflow_name }}.yml\\', NULL):status_code::int AS status_code); SELECT LISTAGG($1, \\';\\') INTO :output FROM TABLE(result_scan(LAST_QUERY_ID())) LIMIT 1; CALL SYSTEM$SET_RETURN_VALUE(:output); END;' {% endset %}\n        {% do run_query(sql) %}\n        {% if var(\"START_GHA_TASKS\") %}\n            {% if target.database.lower() == prod_db %}\n                {% set sql %}\n                ALTER task github_actions.{{ task_name }}\n                resume;\n{% endset %}\n                {% do run_query(sql) %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.944678, "supported_languages": null}, "macro.fsc_utils.gha_tasks_view": {"name": "gha_tasks_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_tasks_view", "macro_sql": "{% macro gha_tasks_view() %}\nSELECT\n    workflow_name,\n    concat_ws(\n        '_',\n        'TRIGGER',\n        UPPER(workflow_name)\n    ) AS task_name,\n    workflow_schedule\nFROM\n    {{ source(\n        'github_actions',\n        'workflows'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9449193, "supported_languages": null}, "macro.fsc_utils.gha_task_history_view": {"name": "gha_task_history_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_history_view", "macro_sql": "{% macro gha_task_history_view() %}\n    {% set query %}\nSELECT\n    DISTINCT task_name\nFROM\n    {{ ref('github_actions__tasks') }}\n\n    {% endset %}\n    {% set results = run_query(query) %}\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    WITH task_history_data AS (\n        SELECT\n            *\n        FROM\n            ({% for result in results_list %}\n            SELECT\n                NAME AS task_name, completed_time, return_value, state, database_name, schema_name, scheduled_time, query_start_time\n            FROM\n                TABLE(information_schema.task_history(scheduled_time_range_start => DATEADD('hour', -24, CURRENT_TIMESTAMP()), task_name => '{{ result[0]}}')) {% if not loop.last %}\n                UNION ALL\n                {% endif %}\n            {% endfor %}) AS subquery\n        WHERE\n            database_name = '{{ target.database }}'\n            AND schema_name = 'GITHUB_ACTIONS')\n        SELECT\n            *\n        FROM\n            task_history_data\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9458652, "supported_languages": null}, "macro.fsc_utils.gha_task_schedule_view": {"name": "gha_task_schedule_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_schedule_view", "macro_sql": "{% macro gha_task_schedule_view() %}\n    WITH base AS (\n        SELECT\n            w.workflow_name AS workflow_name,\n            w.workflow_schedule AS workflow_schedule,\n            w.task_name AS task_name,\n            t.timestamp AS scheduled_time\n        FROM\n            {{ ref('github_actions__tasks') }} AS w\n            CROSS JOIN TABLE(\n                utils.udf_cron_to_prior_timestamps(\n                    w.workflow_name,\n                    w.workflow_schedule\n                )\n            ) AS t\n    )\nSELECT\n    task_name,\n    workflow_name,\n    workflow_schedule,\n    scheduled_time\nFROM\n    base\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9461007, "supported_languages": null}, "macro.fsc_utils.gha_task_performance_view": {"name": "gha_task_performance_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_performance_view", "macro_sql": "{% macro gha_task_performance_view() %}\nSELECT\n    s.task_name,\n    s.workflow_name,\n    s.scheduled_time,\n    h.return_value\nFROM\n    {{ ref('github_actions__task_schedule') }}\n    s\n    LEFT JOIN {{ ref('github_actions__task_history') }}\n    h\n    ON s.task_name = h.task_name\n    AND TO_TIMESTAMP_NTZ(\n        s.scheduled_time\n    ) BETWEEN TO_TIMESTAMP_NTZ(DATEADD(MINUTE, -1, h.scheduled_time))\n    AND TO_TIMESTAMP_NTZ(DATEADD(MINUTE, 1, h.scheduled_time))\n    AND TRY_TO_NUMBER(\n        h.return_value\n    ) BETWEEN 200\n    AND 299\n    AND h.state = 'SUCCEEDED'\nORDER BY\n    task_name,\n    scheduled_time\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9463813, "supported_languages": null}, "macro.fsc_utils.gha_task_current_status_view": {"name": "gha_task_current_status_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_current_status_view", "macro_sql": "{% macro gha_task_current_status_view() %}\n    WITH base AS (\n        SELECT\n            task_name,\n            workflow_name,\n            scheduled_time,\n            return_value,\n            return_value IS NOT NULL AS was_successful\n        FROM\n            {{ ref('github_actions__task_performance') }}\n            qualify ROW_NUMBER() over (\n                PARTITION BY task_name\n                ORDER BY\n                    scheduled_time DESC\n            ) <= 2\n    )\nSELECT\n    task_name,\n    workflow_name,\n    MAX(scheduled_time) AS recent_scheduled_time,\n    MIN(scheduled_time) AS prior_scheduled_time,\n    SUM(IFF(return_value = 204, 1, 0)) AS successes,\n    successes > 0 AS pipeline_active\nFROM\n    base\nGROUP BY\n    task_name,\n    workflow_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9466379, "supported_languages": null}, "macro.fsc_utils.alter_gha_task": {"name": "alter_gha_task", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.alter_gha_task", "macro_sql": "{% macro alter_gha_task(\n        task_name,\n        task_action\n    ) %}\n    {% set sql %}\n    EXECUTE IMMEDIATE 'ALTER TASK IF EXISTS github_actions.{{ task_name }} {{ task_action }};' {% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9469955, "supported_languages": null}, "macro.fsc_utils.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9477243, "supported_languages": null}, "macro.fsc_utils.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.948141, "supported_languages": null}, "macro.fsc_utils.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.sql", "original_file_path": "macros/streamline/functions.sql", "unique_id": "macro.fsc_utils.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9485693, "supported_languages": null}, "macro.fsc_utils.test_sequence_gaps": {"name": "test_sequence_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9526265, "supported_languages": null}, "macro.fsc_utils.test_tx_block_count": {"name": "test_tx_block_count", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_tx_block_count", "macro_sql": "{% test tx_block_count(\n        model,\n        column_name\n) %}\n\nSELECT \n    {{ column_name }}, \n    COUNT(DISTINCT block_number) AS num_blocks\nFROM\n    {{ model }}\nGROUP BY {{ column_name }}\nHAVING num_blocks > 1\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.952885, "supported_languages": null}, "macro.fsc_utils.tx_gaps": {"name": "tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_full') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9531765, "supported_languages": null}, "macro.fsc_utils.recent_tx_gaps": {"name": "recent_tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.recent_tx_gaps", "macro_sql": "{% macro recent_tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_recent') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9535525, "supported_languages": null}, "macro.fsc_utils.test_recent_decoded_logs_match": {"name": "test_recent_decoded_logs_match", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_recent_decoded_logs_match", "macro_sql": "{% test recent_decoded_logs_match(\n    model\n) %}\nSELECT\n    block_number,\n    _log_id\nFROM\n    {{ model }}\n    d\nWHERE\n    NOT EXISTS (\n        SELECT\n            1\n        FROM\n            {{ ref('silver__logs') }}\n            l\n        WHERE\n            d.block_number = l.block_number\n            AND d.tx_hash = l.tx_hash\n            AND d.event_index = l.event_index\n            AND d.contract_address = l.contract_address\n            AND d.topics [0] :: STRING = l.topics [0] :: STRING\n    ) \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.953823, "supported_languages": null}, "macro.fsc_utils.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    return (str(int(hex, 16)) if hex and hex != \"0x\" else None)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9673445, "supported_languages": null}, "macro.fsc_utils.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  hex_to_int('hex', '200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', '0x200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', NULL);\n  >> NULL\n  hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n  >> -440911153\n  \"\"\"\n  if not hex:\n    return None\n  if encoding.lower() == 's2c':\n    if hex[0:2].lower() != '0x':\n      hex = f'0x{hex}'\n\n    bits = len(hex[2:])*4\n    value = int(hex, 0)\n    if value & (1 << (bits-1)):\n        value -= 1 << bits\n    return str(value)\n  else:\n    return str(int(hex, 16))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9675503, "supported_languages": null}, "macro.fsc_utils.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9676867, "supported_languages": null}, "macro.fsc_utils.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.967886, "supported_languages": null}, "macro.fsc_utils.create_udf_decimal_adjust": {"name": "create_udf_decimal_adjust", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_decimal_adjust", "macro_sql": "{% macro create_udf_decimal_adjust() %}\n\nfrom decimal import Decimal, ROUND_DOWN\n\ndef custom_divide(input, adjustment):\n    try:\n        if adjustment is None or input is None:\n            return None\n\n        # Perform the division using Decimal type\n        result = Decimal(input) / pow(10, Decimal(adjustment))\n\n        # Determine the number of decimal places in the result\n        decimal_places = max(0, -result.as_tuple().exponent)\n\n        # Convert the result to a string representation without scientific notation and with dynamic decimal precision\n        result_str = \"{:.{prec}f}\".format(result, prec=decimal_places)\n\n        return result_str\n    except Exception as e:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9680586, "supported_languages": null}, "macro.fsc_utils.create_udf_cron_to_prior_timestamps": {"name": "create_udf_cron_to_prior_timestamps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro_sql": "{% macro create_udf_cron_to_prior_timestamps() %}\nimport croniter\nimport datetime\n\nclass TimestampGenerator:\n\n    def __init__(self):\n        pass\n\n    def process(self, workflow_name, workflow_schedule):\n        for timestamp in self.generate_timestamps(workflow_name, workflow_schedule):\n            yield (workflow_name, workflow_schedule, timestamp)\n\n    def generate_timestamps(self, workflow_name, workflow_schedule):\n        # Create a cron iterator object\n        cron = croniter.croniter(workflow_schedule)\n\n        # Generate timestamps for the prev 10 runs\n        timestamps = []\n        for i in range(10):\n            prev_run = cron.get_prev(datetime.datetime)\n            timestamps.append(prev_run)\n\n        return timestamps\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9682312, "supported_languages": null}, "macro.fsc_utils.create_udf_transform_logs": {"name": "create_udf_transform_logs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_transform_logs", "macro_sql": "{% macro create_udf_transform_logs() %}\n\nfrom copy import deepcopy\n\ndef transform_tuple(components: list, values: list):\n    transformed_values = []\n    for i, component in enumerate(components):\n        if i < len(values):\n            if component[\"type\"] == \"tuple\":\n                transformed_values.append({\"value\": transform_tuple(component[\"components\"], values[i]), **component})\n            elif component[\"type\"] == \"tuple[]\":\n                if not values[i]:\n                    transformed_values.append({\"value\": [], **component})\n                    continue\n                sub_values = [transform_tuple(component[\"components\"], v) for v in values[i]]\n                transformed_values.append({\"value\": sub_values, **component})\n            else:\n                transformed_values.append({\"value\": values[i], **component})\n    return {item[\"name\"]: item[\"value\"] for item in transformed_values}\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n\n        if not new_event[\"value\"]:\n            return new_event\n\n        if isinstance(new_event[\"value\"][0], list):\n            result_list = []\n            for value_set in new_event[\"value\"]:\n                result_list.append(transform_tuple(components, value_set))\n            new_event[\"value\"] = result_list\n\n        else:\n            new_event[\"value\"] = transform_tuple(components, new_event[\"value\"])\n\n        return new_event\n\n    else:\n        return event\n\ndef transform(events: dict):\n    try:\n        results = [\n            transform_event(event) if event.get(\"decoded\") else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.968509, "supported_languages": null}, "macro.fsc_utils.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    leading_zeros = 0\n\n    for char in base58:\n        if char == '1':\n            leading_zeros += 1\n        else:\n            break\n\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    hex_leading_zeros = '00' * leading_zeros\n\n    return '0x' + hex_leading_zeros + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.968692, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9688547, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(input, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    data = bytes.fromhex(input)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n\n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9691145, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_algorand": {"name": "create_udf_hex_to_algorand", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_algorand", "macro_sql": "{% macro create_udf_hex_to_algorand() %}\n\nimport hashlib\nimport base64\n\ndef transform_hex_to_algorand(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n    public_key_bytes = bytearray.fromhex(input)\n\n    sha512_256_hash = hashlib.new('sha512_256', public_key_bytes).digest()\n\n    checksum = sha512_256_hash[-4:]\n\n    algorand_address = base64.b32encode(public_key_bytes + checksum).decode('utf-8').rstrip('=')\n\n    return algorand_address\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9692695, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_tezos": {"name": "create_udf_hex_to_tezos", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_tezos", "macro_sql": "{% macro create_udf_hex_to_tezos() %}\n\nimport hashlib\n\ndef transform_hex_to_tezos(input, prefix):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    if len(input) != 40:\n        return 'Invalid length'\n\n    hash_bytes = bytes.fromhex(input)\n\n    prefixes = {\n        'tz1': '06a19f',  # Ed25519\n        'tz2': '06a1a1',  # Secp256k1\n        'tz3': '06a1a4'   # P-256\n    }\n\n    if prefix not in prefixes:\n        return 'Invalid prefix: Must be tz1, tz2, or tz3'\n\n    prefix_bytes = bytes.fromhex(prefixes[prefix])\n\n    prefixed_hash = prefix_bytes + hash_bytes\n\n    checksum = hashlib.sha256(hashlib.sha256(prefixed_hash).digest()).digest()[:4]\n\n    full_hash = prefixed_hash + checksum\n\n    tezos_address = transform_hex_to_base58(full_hash.hex())\n\n    return tezos_address\n\ndef transform_hex_to_base58(input):\n    if input is None:\n        return None\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9695115, "supported_languages": null}, "macro.fsc_utils.create_udf_detect_overflowed_responses": {"name": "create_udf_detect_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro_sql": "{% macro create_udf_detect_overflowed_responses() %}\n\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\ndef main(file_url, index_cols):\n    with SnowflakeFile.open(file_url, 'rb') as f:\n        df = pd.read_json(f, lines=True, compression='gzip')\n    data_length = df[\"data\"].astype(str).apply(len)\n    return df[data_length > VARCHAR_MAX][index_cols].values.tolist()\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.969664, "supported_languages": null}, "macro.fsc_utils.create_udtf_flatten_overflowed_responses": {"name": "create_udtf_flatten_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udtf_flatten_overflowed_responses", "macro_sql": "{% macro create_udtf_flatten_overflowed_responses() %}\n\nimport logging\nimport simplejson as json\n\nimport numpy as np\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\n\nlogger = logging.getLogger(\"udtf_flatten_overflowed_responses\")\n\nclass Flatten:\n    \"\"\"\n    Recursive function to flatten a nested JSON file\n    \"\"\"\n\n    def __init__(self, mode: str, exploded_key: list) -> None:\n        self.mode = mode\n        self.exploded_key = exploded_key\n\n    def _flatten_response(\n        self,\n        response_key: str,\n        responses: str,\n        block_number: int,\n        metadata: dict,\n        seq_index: int = 0,\n        path: str = \"\",\n    ):\n        \"\"\"\n        Example:\n\n        input: {\"a\":1, \"b\":[77,88], \"c\": {\"d\":\"X\"}}\n\n        output:\n        - SEQ: A unique sequence number associated with the input record; the sequence is not guaranteed to be gap-free or ordered in any particular way.\n        - KEY: For maps or objects, this column contains the key to the exploded value.\n        - PATH: The path to the element within a data structure which needs to be flattened.\n        - INDEX: The index of the element, if it is an array; otherwise NULL.\n        - VALUE_: The value of the element of the flattened array/object.\n\n        \"\"\"\n        exploded_data = []\n        if self.mode == \"array\":\n            check_mode = isinstance(responses, list)\n        elif self.mode == \"dict\":\n            check_mode = isinstance(responses, dict)\n        elif self.mode == \"both\":\n            check_mode = isinstance(responses, list) or isinstance(responses, dict)\n\n        if check_mode:\n            if isinstance(responses, dict):\n                looped_keys = responses.keys()\n                for key in looped_keys:\n                    next_path = f\"{path}.{key}\" if path else key\n                    index = None\n                    exploded_data.append(\n                        {\n                            \"block_number\": block_number,\n                            \"metadata\": metadata,\n                            \"seq\": seq_index,\n                            \"key\": key,\n                            \"path\": next_path,\n                            \"index\": index,\n                            \"value_\": responses[key],\n                        }\n                    )\n                    exploded_data.extend(\n                        self._flatten_response(\n                            key,\n                            responses[key],\n                            block_number,\n                            metadata,\n                            seq_index,\n                            next_path,\n                        )\n                    )\n\n            elif isinstance(responses, list):\n                looped_keys = range(len(responses))\n                if response_key in self.exploded_key or len(self.exploded_key) == 0:\n                    for item_i, item in enumerate(responses):\n                        if response_key == \"result\":\n                            seq_index += 1\n                        index = item_i\n                        exploded_data.append(\n                            {\n                                \"block_number\": block_number,\n                                \"metadata\": metadata,\n                                \"seq\": seq_index,\n                                \"key\": None,\n                                \"path\": f\"{path}[{item_i}]\",\n                                \"index\": index,\n                                \"value_\": item,\n                            }\n                        )\n                        exploded_data.extend(\n                            self._flatten_response(\n                                item_i,\n                                item,\n                                block_number,\n                                metadata,\n                                seq_index,\n                                f\"{path}[{item_i}]\",\n                            )\n                        )\n\n        return exploded_data\n\nclass FlattenRows:\n    \"\"\"\n    Recursive function to flatten a given JSON file from Snowflake stage\n    \"\"\"\n    def process(self, file_url: str, index_cols: list, index_vals: list):\n        with SnowflakeFile.open(file_url, 'rb') as f:\n            df = pd.read_json(f, lines=True, compression='gzip')\n\n        df.set_index(index_cols, inplace=True, drop=False)\n        df = df.loc[index_vals]\n\n        flattener = Flatten(mode=\"both\", exploded_key=[])\n\n        df[\"value_\"] = df.apply(\n                lambda x: flattener._flatten_response(\n                    block_number=x[\"block_number\"], metadata=x[\"metadata\"], responses=x[\"data\"], response_key=None\n                ),\n                axis=\"columns\",\n            )\n        df[\"value_\"] = df[\"value_\"].apply(pd.DataFrame.from_records)\n        df[\"index_cols\"] = df.index\n        df = df[[\"index_cols\", \"value_\"]]\n        flattened = pd.concat(\n            df[\"value_\"].values.tolist(), keys=df[\"index_cols\"].values.tolist()\n        ).droplevel(-1)\n\n        cleansed = flattened.replace({np.nan: None})\n\n        overflow = cleansed[\"value_\"].astype(str).apply(len) > VARCHAR_MAX\n\n        cleansed.loc[overflow, [\"value_\"]] = None\n        temp_index_cols = list(range(len(index_cols)))\n        cleansed = cleansed.reset_index(names=temp_index_cols, drop=False)\n        cleansed[\"index_cols\"] = cleansed[temp_index_cols].apply(list, axis=1)\n        cleansed.drop(columns=temp_index_cols, inplace=True, errors=\"ignore\")\n        return list(cleansed[np.roll(cleansed.columns.values, 1).tolist()].itertuples(index=False, name=None))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.970232, "supported_languages": null}, "macro.fsc_utils.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ fsc_utils.compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9790478, "supported_languages": null}, "macro.fsc_utils.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"REST_API_ID_PROD\") if target.name == \"prod\" else var(\"REST_API_ID_DEV\") }}.execute-api.{{ var( aws_region, \"us-east-1\" ) }}.amazonaws.com/{{ target.name }}/{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.979514, "supported_languages": null}, "macro.fsc_utils.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for name,\n        data_type in params -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {% endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.980044, "supported_languages": null}, "macro.fsc_utils.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- fsc_utils.compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ fsc_utils.construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.compile_signature", "macro.fsc_utils.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.98096, "supported_languages": null}, "macro.fsc_utils.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ fsc_utils.create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ fsc_utils.drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.create_sql_function", "macro.fsc_utils.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9822385, "supported_languages": null}, "macro.fsc_utils.if_data_call_function_v2": {"name": "if_data_call_function_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.if_data_call_function_v2", "macro_sql": "{% macro if_data_call_function_v2(\n        func,\n        target,\n        params\n    ) %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: Calling udf \" ~ func ~ \" with params: \\n\" ~ params | tojson(indent=2) ~  \"\\n on \" ~ target,\n                True\n            ) }}\n        {% endif %}\n    SELECT\n        {{ func }}( parse_json($${{ params | tojson }}$$) )\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ target }}\n            LIMIT\n                1\n        )\n    {% else %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: NOOP\",\n                False\n            ) }}\n        {% endif %}\n    SELECT\n        NULL\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9831028, "supported_languages": null}, "macro.fsc_utils.if_data_call_wait": {"name": "if_data_call_wait", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.if_data_call_wait", "macro_sql": "{% macro if_data_call_wait() %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% set query %}\n    SELECT\n        1\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ model.schema ~ \".\" ~ model.alias }}\n            LIMIT\n                1\n        ) {% endset %}\n        {% if execute %}\n            {% set results = run_query(\n                query\n            ) %}\n            {% if results %}\n                {{ log(\n                    \"Waiting...\",\n                    info = True\n                ) }}\n\n                {% set wait_query %}\n            SELECT\n                system$wait(\n                    {{ var(\n                        \"WAIT\",\n                        400\n                    ) }}\n                ) {% endset %}\n                {% do run_query(wait_query) %}\n            {% else %}\n            SELECT\n                NULL;\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9841049, "supported_languages": null}, "macro.fsc_utils.decode_logs_history": {"name": "decode_logs_history", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.decode_logs_history", "macro_sql": "{% macro decode_logs_history(\n        start,\n        stop\n    ) %}\n    WITH look_back AS (\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"_max_block_by_date\") }}\n            qualify ROW_NUMBER() over (\n                ORDER BY\n                    block_number DESC\n            ) = 1\n    )\nSELECT\n    l.block_number,\n    l._log_id,\n    A.abi AS abi,\n    OBJECT_CONSTRUCT(\n        'topics',\n        l.topics,\n        'data',\n        l.data,\n        'address',\n        l.contract_address\n    ) AS DATA\nFROM\n    {{ ref(\"silver__logs\") }}\n    l\n    INNER JOIN {{ ref(\"silver__complete_event_abis\") }} A\n    ON A.parent_contract_address = l.contract_address\n    AND A.event_signature = l.topics[0]:: STRING\n    AND l.block_number BETWEEN A.start_block\n    AND A.end_block\nWHERE\n    (\n        l.block_number BETWEEN {{ start }}\n        AND {{ stop }}\n    )\n    AND l.block_number <= (\n        SELECT\n            block_number\n        FROM\n            look_back\n    )\n    AND _log_id NOT IN (\n        SELECT\n            _log_id\n        FROM\n            {{ ref(\"streamline__complete_decode_logs\") }}\n        WHERE\n            (\n                block_number BETWEEN {{ start }}\n                AND {{ stop }}\n            )\n            AND block_number <= (\n                SELECT\n                    block_number\n                FROM\n                    look_back\n            )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.988, "supported_languages": null}, "macro.fsc_utils.block_reorg": {"name": "block_reorg", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.block_reorg", "macro_sql": "{% macro block_reorg(reorg_model_list, hours) %}\n  {% set models = reorg_model_list.split(\",\") %}\n  {% for model in models %}\n  {% set sql %}\n    DELETE FROM\n        {{ ref(model) }} t\n    WHERE\n        t._inserted_timestamp > DATEADD(\n            'hour',\n            -{{ hours }},\n            SYSDATE()\n        )\n        AND NOT EXISTS (\n            SELECT\n                1\n            FROM\n                {{ ref('silver__transactions') }}\n                s\n            WHERE s.block_number = t.block_number\n                AND s.tx_hash = t.tx_hash\n        );\n    {% endset %}\n    {% do run_query(sql) %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9886732, "supported_languages": null}, "macro.fsc_utils.streamline_external_table_query_v2": {"name": "streamline_external_table_query_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.streamline_external_table_query_v2", "macro_sql": "{% macro streamline_external_table_query_v2(\n        model,\n        partition_function\n    ) %}\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -3, CURRENT_TIMESTAMP()),\n                    table_name => '{{ source( \"bronze_streamline\", model) }}')\n                ) A\n            )\n        SELECT\n            s.*,\n            b.file_name,\n            _inserted_timestamp\n        FROM\n            {{ source(\n                \"bronze_streamline\",\n                model\n            ) }}\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b.partition_key = s.partition_key\n        WHERE\n            b.partition_key = s.partition_key\n            AND DATA :error IS NULL\n            AND DATA is not null\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.989079, "supported_languages": null}, "macro.fsc_utils.streamline_external_table_FR_query_v2": {"name": "streamline_external_table_FR_query_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.streamline_external_table_FR_query_v2", "macro_sql": "{% macro streamline_external_table_FR_query_v2(\n        model,\n        partition_function\n    ) %}\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => '{{ source( \"bronze_streamline\", model) }}'\n                )\n            ) A\n    )\nSELECT\n    s.*,\n    b.file_name,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    AND DATA :error IS NULL\n    AND DATA is not null\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9894876, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_rest_api_v2": {"name": "create_udf_bulk_rest_api_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_rest_api_v2", "macro_sql": "{% macro create_udf_bulk_rest_api_v2() %}    \n    {{ log(\"Creating udf udf_bulk_rest_api for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_rest_api_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}udf_bulk_rest_api'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9967656, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_decode_logs": {"name": "create_udf_bulk_decode_logs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_decode_logs", "macro_sql": "{% macro create_udf_bulk_decode_logs() %}    \n    {{ log(\"Creating udf udf_bulk_decode_logs_v2 for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_decode_logs_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}bulk_decode_logs'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463692.9987543, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_decode_traces": {"name": "create_udf_bulk_decode_traces", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_decode_traces", "macro_sql": "{% macro create_udf_bulk_decode_traces() %}    \n    {{ log(\"Creating udf udf_bulk_decode_traces_v2 for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_decode_traces_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}bulk_decode_traces'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0007198, "supported_languages": null}, "macro.fsc_utils.udf_configs": {"name": "udf_configs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/configs.yaml.sql", "original_file_path": "macros/streamline/configs.yaml.sql", "unique_id": "macro.fsc_utils.udf_configs", "macro_sql": "{% macro udf_configs(schema) %}\n\n{#\n  UTILITY SCHEMA\n#}\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_udf_hex_to_int_with_encoding() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    STRICT IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ fsc_utils.create_udf_evm_text_signature() | indent(4) }}\n\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ fsc_utils.create_udf_keccak256() | indent(4) }}\n\n- name: {{ schema }}.udf_decimal_adjust\n  signature:\n    - [input, string]\n    - [adjustment, int]\n  return_type: VARCHAR\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'custom_divide'\n  sql: |\n    {{ fsc_utils.create_udf_decimal_adjust() | indent(4) }}\n\n- name: {{ schema }}.udf_cron_to_prior_timestamps\n  signature:\n    - [workflow_name, STRING]\n    - [workflow_schedule, STRING]\n  return_type: TABLE(workflow_name STRING, workflow_schedule STRING, timestamp TIMESTAMP_NTZ)\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('croniter')\n    HANDLER = 'TimestampGenerator'\n  sql: |\n    {{ fsc_utils.create_udf_cron_to_prior_timestamps() | indent(4) }}\n\n- name: {{ schema }}.udf_transform_logs\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform'\n  sql: |\n    {{ fsc_utils.create_udf_transform_logs() | indent(4) }}\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [base58, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ fsc_utils.create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [input, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_algorand\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_algorand'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_algorand() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_tezos\n  signature:\n    - [input, STRING]\n    - [prefix, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_tezos'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_tezos() | indent(4) }}\n\n- name: {{ schema }}.udf_detect_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n  return_type: ARRAY\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Detect overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas')\n    HANDLER = 'main'\n  sql: |\n    {{ fsc_utils.create_udf_detect_overflowed_responses() | indent(4) }}\n\n- name: {{ schema }}.udtf_flatten_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n    - [index_vals, ARRAY]\n  return_type: |\n    table(\n          index_vals ARRAY,\n          block_number NUMBER,\n          metadata OBJECT,\n          seq NUMBER,\n          key STRING,\n          path STRING,\n          index NUMBER,\n          value_ VARIANT\n        )\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Flatten rows from a JSON file with overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas', 'simplejson', 'numpy')\n    HANDLER = 'FlattenRows'\n  sql: |\n    {{ fsc_utils.create_udtf_flatten_overflowed_responses() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.python_hex_to_int", "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro.fsc_utils.sql_udf_json_rpc_call", "macro.fsc_utils.create_udf_evm_text_signature", "macro.fsc_utils.create_udf_keccak256", "macro.fsc_utils.create_udf_decimal_adjust", "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro.fsc_utils.create_udf_transform_logs", "macro.fsc_utils.create_udf_base58_to_hex", "macro.fsc_utils.create_udf_hex_to_base58", "macro.fsc_utils.create_udf_hex_to_bech32", "macro.fsc_utils.create_udf_hex_to_algorand", "macro.fsc_utils.create_udf_hex_to_tezos", "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro.fsc_utils.create_udtf_flatten_overflowed_responses"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0108097, "supported_languages": null}, "macro.fsc_utils.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.fsc_utils.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set predicate_override = \"\" %}\n    {% if incremental_predicates[0] == \"dynamic_range_predicate\" %}\n        -- run some queries to dynamically determine the min + max of this 'date_column' in the new data\n        {% set predicate_override = fsc_utils.dynamic_range_predicate(source, incremental_predicates[1], \"DBT_INTERNAL_DEST\") %}\n    {% endif %}\n    {% set predicates = [predicate_override] if predicate_override else incremental_predicates %}\n    -- standard merge from here\n    {% set merge_sql = dbt.get_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n    {{ return(merge_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.dynamic_range_predicate", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0119016, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.012635, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0137327, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0141432, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.014533, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0150685, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0152822, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0155048, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0177639, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.018294, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.019351, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0202348, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0208318, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0212529, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.021678, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0218923, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0228624, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0237367, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0240705, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.024606, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.025775, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.02638, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.026668, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0274365, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.028025, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0288572, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0306416, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0330157, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0339525, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0351958, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0367486, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0371456, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0379853, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0393147, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0403469, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0406904, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.040985, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.041277, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0415509, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0418143, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.042374, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0427456, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0432913, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0441842, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0446937, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0452013, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0466588, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0479126, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0520725, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0572608, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0592022, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.059901, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0606205, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0609114, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0615926, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0626988, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0631557, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0636775, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0643213, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0653, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0662355, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0674872, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0691607, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0712452, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0727842, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0749927, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0754821, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0759504, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0764399, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.07725, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0779235, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.078886, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0792675, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0795412, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0799394, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0805626, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.080941, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0811858, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0821052, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0833154, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0839717, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0848086, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0855439, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0867505, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0880973, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0892444, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.090881, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0914757, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0920265, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0926762, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.093366, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0948367, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0963595, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.097372, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.0987384, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.102844, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1052725, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.106202, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.107416, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1083114, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1088328, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1097078, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1106787, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1114244, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1120262, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1127243, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.113174, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1141946, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1154258, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.116182, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1167145, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1173337, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1180296, "supported_languages": null}, "macro.livequery_models.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.livequery_models.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% if target.database == 'LIVEQUERY' %}\n            CREATE schema IF NOT EXISTS _internal;\n    {{ sp_create_prod_clone('_internal') }};\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1185665, "supported_languages": null}, "macro.livequery_models.apply_grants_by_schema": {"name": "apply_grants_by_schema", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_models.apply_grants_by_schema", "macro_sql": "{% macro apply_grants_by_schema(schema) %}\n{#\n    Generates SQL to grant permissions to roles for a given schema.\n    This gets run automatically when a deployment is made to prod.\n\n    This can be manually run to grant permissions to a new schema:\n    `dbt run-operation apply_grants_by_schema --args '{\"schema\": \"my_schema\"}'`\n #}\n    {%- set outer = namespace(sql=\"\") -%}\n    {% for role in fromyaml(var(\"ROLES\")) %}\n            {% set sql -%}\n                {% if schema.startswith(\"_\") %}\n                    REVOKE USAGE ON SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                    REVOKE USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                {%- else -%}\n                    GRANT USAGE ON SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n\n                    GRANT SELECT ON ALL TABLES IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT SELECT ON ALL VIEWS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                {%- endif -%}\n            {%- endset -%}\n            {%- set outer.sql = outer.sql ~ sql -%}\n    {%- endfor -%}\n    {{ outer.sql }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1211329, "supported_languages": null}, "macro.livequery_models.apply_grants_to_all_schema": {"name": "apply_grants_to_all_schema", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_models.apply_grants_to_all_schema", "macro_sql": "{% macro apply_grants_to_all_schema() %}\n{#\n    Run SQL to grant permissions to roles for all schemas.\n    This is useful for when a new role is created and needs to be granted access to all schemas.\n    This is not used in the normal grant process.\n\n    `dbt run-operation apply_grants_to_all_schema`\n #}\n    {% if execute and target.name == \"prod\" %}\n        {% set sql_get_schema %}\n            SELECT SCHEMA_NAME\n            FROM {{ target.database }}.INFORMATION_SCHEMA.SCHEMATA\n            WHERE SCHEMA_NAME NOT IN ('PUBLIC', 'INFORMATION_SCHEMA')\n        {%- endset -%}\n        {%- set results = run_query(sql_get_schema) -%}\n        {% set sql_apply_grants %}\n            {%- for schema in results.columns[0].values() -%}\n                {{ apply_grants_by_schema(schema) }}\n            {%- endfor -%}\n        {%- endset -%}\n        {% do log(sql_apply_grants, true) %}\n        {% do run_query(sql_apply_grants) %}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1220164, "supported_languages": null}, "macro.livequery_models.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.livequery_models.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1228642, "supported_languages": null}, "macro.livequery_models.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.livequery_models.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call livequery._internal.create_prod_clone(\n        'livequery',\n        'livequery_dev',\n        'livequery_dev_owner'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1232173, "supported_languages": null}, "macro.livequery_models.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.livequery_models.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.124433, "supported_languages": null}, "macro.livequery_models.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_models.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1250281, "supported_languages": null}, "macro.livequery_models.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_models.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1254344, "supported_languages": null}, "macro.livequery_models.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.livequery_models.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value('BLOCKCHAIN_NAME','LIVEQUERY') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.125707, "supported_languages": null}, "macro.livequery_models.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.livequery_models.create_tag_if_missing", "macro.livequery_models.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.14294, "supported_languages": null}, "macro.livequery_models.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.144053, "supported_languages": null}, "macro.livequery_models.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1462357, "supported_languages": null}, "macro.livequery_models.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1482785, "supported_languages": null}, "macro.livequery_models.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1489353, "supported_languages": null}, "macro.livequery_models.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1496255, "supported_languages": null}, "macro.livequery_models.config_core__utils": {"name": "config_core__utils", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/_utils.yaml.sql", "original_file_path": "macros/core/_utils.yaml.sql", "unique_id": "macro.livequery_models.config_core__utils", "macro_sql": "{% macro config_core__utils(schema=\"_utils\") %}\n\n- name: {{ schema }}.udf_introspect\n  signature:\n    - [echo, STRING]\n  func_type: SECURE EXTERNAL\n  return_type: TEXT\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  sql: introspect\n\n- name: {{ schema }}.udf_user_tier\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userTier::STRING, 'community')\n\n- name: {{ schema }}.udf_provider\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):provider::STRING, 'quicknode')\n\n- name: {{ schema }}.udf_whoami\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userId::STRING, CURRENT_USER())\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [user_id, STRING]\n    - [key, STRING]\n  return_type: OBJECT\n  func_type: SECURE EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: secret/register\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.151124, "supported_languages": null}, "macro.livequery_models.config_core__live": {"name": "config_core__live", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/_live.yaml.sql", "original_file_path": "macros/core/_live.yaml.sql", "unique_id": "macro.livequery_models.config_core__live", "macro_sql": "{% macro config_core__live(schema=\"_live\") %}\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [DATA, VARIANT]\n    - [user_id, STRING]\n    - [SECRET, STRING]\n  return_type: VARIANT\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n  sql: udf_api\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1515334, "supported_languages": null}, "macro.livequery_models.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.sql", "original_file_path": "macros/core/functions.sql", "unique_id": "macro.livequery_models.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1519516, "supported_languages": null}, "macro.livequery_models.config_core_live": {"name": "config_core_live", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/live.yaml.sql", "original_file_path": "macros/core/live.yaml.sql", "unique_id": "macro.livequery_models.config_core_live", "macro_sql": "{% macro config_core_live(schema=\"live\") %}\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          {},\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          {},\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n\n- name: {{ schema }}.udf_rpc\n  signature:\n    - [blockchain, STRING]\n    - [network, STRING]\n    - [method, STRING]\n    - [parameters, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n    COMMENT = $$Executes an JSON RPC call on a blockchain.$$\n  sql: |\n    {{ sql_live_rpc_call(\"method\", \"parameters\", \"blockchain\", \"network\") | indent(4) -}}\n\n- name: {{ schema }}.udf_allow_list\n  signature: []\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns a list of allowed domains.$$\n  sql: allowed\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.sql_live_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.153903, "supported_languages": null}, "macro.livequery_models.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    try:\n        return str(int(hex, 16)) if hex and hex != \"0x\" else None\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1563008, "supported_languages": null}, "macro.livequery_models.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('hex', '200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', '0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', NULL);\n    >> NULL\n    hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n    >> -440911153\n    \"\"\"\n    try:\n        if not hex:\n            return None\n        if encoding.lower() == 's2c':\n            if hex[0:2].lower() != '0x':\n                hex = f'0x{hex}'\n\n            bits = len(hex[2:]) * 4\n            value = int(hex, 0)\n            if value & (1 << (bits - 1)):\n                value -= 1 << bits\n            return str(value)\n        else:\n            return str(int(hex, 16))\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.156532, "supported_languages": null}, "macro.livequery_models.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1566725, "supported_languages": null}, "macro.livequery_models.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1568747, "supported_languages": null}, "macro.livequery_models.python_object_to_url_query_string": {"name": "python_object_to_url_query_string", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_object_to_url_query_string", "macro_sql": "{% macro python_object_to_url_query_string() %}\nfrom urllib.parse import urlencode\n\ndef object_to_url_query_string(query, doseq=False):\n    {# return type(query) #}\n    if isinstance(query, dict):\n        return urlencode(query, doseq)\n    return urlencode([tuple(i) for i in query], doseq)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1570222, "supported_languages": null}, "macro.livequery_models.python_udf_evm_transform_log": {"name": "python_udf_evm_transform_log", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_udf_evm_transform_log", "macro_sql": "{% macro python_udf_evm_transform_log(schema) %}\nfrom copy import deepcopy\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n        for iy, y in enumerate(new_event[\"value\"]):\n            for i, c in enumerate(components):\n                y[i] = {\"value\": y[i], **c}\n            new_event[\"value\"][iy] = {z[\"name\"]: z[\"value\"] for z in y}\n        return new_event\n    else:\n        return event\n\n\ndef transform(events: list):\n    try:\n        results = [\n            transform_event(event) if event[\"decoded\"] else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1572142, "supported_languages": null}, "macro.livequery_models.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    return '0x' + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1573787, "supported_languages": null}, "macro.livequery_models.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(hex):\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(hex)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1575742, "supported_languages": null}, "macro.livequery_models.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(hex, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    data = bytes.fromhex(hex)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n    \n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1578355, "supported_languages": null}, "macro.livequery_models.create_udf_int_to_binary": {"name": "create_udf_int_to_binary", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_int_to_binary", "macro_sql": "{% macro create_udf_int_to_binary() %}\n\ndef int_to_binary(num):\n    num = int(num)\n    is_negative = num < 0\n    if is_negative:\n        num = -num\n\n    binary_string = bin(num)[2:]\n\n    if is_negative:\n        inverted_string = \"\".join(\"1\" if bit == \"0\" else \"0\" for bit in binary_string)\n\n        carry = 1\n        result = \"\"\n        for i in range(len(inverted_string) - 1, -1, -1):\n            if inverted_string[i] == \"1\" and carry == 1:\n                result = \"0\" + result\n            elif inverted_string[i] == \"0\" and carry == 1:\n                result = \"1\" + result \n                carry = 0\n            else:\n                result = inverted_string[i] + result\n\n        binary_string = result \n\n    return binary_string \n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.158009, "supported_languages": null}, "macro.livequery_models.create_udf_binary_to_int": {"name": "create_udf_binary_to_int", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_binary_to_int", "macro_sql": "{% macro create_udf_binary_to_int() %}\n\ndef binary_to_int(binary):\n\n  for char in binary:\n    if char not in \"01\":\n      raise ValueError(\"Input string must be a valid binary string.\")\n      \n  integer = 0\n\n  for i, digit in enumerate(binary[::-1]):\n    digit_int = int(digit)\n\n    integer += digit_int * 2**i\n\n  return str(integer)\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1581488, "supported_languages": null}, "macro.livequery_models.config_core_utils": {"name": "config_core_utils", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/utils.yaml.sql", "original_file_path": "macros/core/utils.yaml.sql", "unique_id": "macro.livequery_models.config_core_utils", "macro_sql": "{% macro config_core_utils(schema=\"utils\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_udf_hex_to_int_with_encoding() | indent(4) }}\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ create_udf_evm_text_signature() | indent(4) }}\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ create_udf_keccak256() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n- name: {{ schema }}.udf_int_to_hex\n  signature:\n    - [int, INTEGER]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    select CONCAT('0x', TRIM(TO_CHAR(int, 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an object to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an array to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_object_to_url_query_string\n  signature:\n    - [object, OBJECT]\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: SELECT utils.udf_urlencode(object, FALSE)\n\n- name: {{ schema }}.udf_evm_transform_log\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    IMMUTABLE\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform'\n  sql: |\n    {{ python_udf_evm_transform_log() | indent(4) }}\n\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, ARRAY]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, OBJECT]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [base58, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [hex, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_int_to_binary\n  signature:\n    - [num, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'int_to_binary'\n  sql: |\n    {{ create_udf_int_to_binary() | indent(4) }}\n\n- name: {{ schema }}.udf_binary_to_int\n  signature:\n    - [binary, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.8'\n    HANDLER = 'binary_to_int'\n  sql: |\n    {{ create_udf_binary_to_int() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.python_hex_to_int", "macro.livequery_models.python_udf_hex_to_int_with_encoding", "macro.livequery_models.create_udf_evm_text_signature", "macro.livequery_models.create_udf_keccak256", "macro.livequery_models.sql_udf_json_rpc_call", "macro.livequery_models.python_object_to_url_query_string", "macro.livequery_models.python_udf_evm_transform_log", "macro.livequery_models.create_udf_base58_to_hex", "macro.livequery_models.create_udf_hex_to_base58", "macro.livequery_models.create_udf_hex_to_bech32", "macro.livequery_models.create_udf_int_to_binary", "macro.livequery_models.create_udf_binary_to_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1692028, "supported_languages": null}, "macro.livequery_models.config_core_secrets": {"name": "config_core_secrets", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/secrets.yaml.sql", "original_file_path": "macros/core/secrets.yaml.sql", "unique_id": "macro.livequery_models.config_core_secrets", "macro_sql": "{% macro config_core_secrets(schema=\"secrets\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Registers a secret with the given request ID and key. $$\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_get_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns the secret value for the given secret name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME)\n        ):data::OBJECT\n\n- name: {{ schema }}.udf_get_secrets\n  signature: []\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns all secrets for the current user. $$\n  sql: |\n    SELECT\n      {{ schema }}.udf_get_secret('')\n\n- name: {{ schema }}.udf_create_secret\n  signature:\n    - [name, STRING]\n    - [secret, OBJECT]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Creates a new secret with the given name and value. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        SECRET\n        ):status_code::INTEGER\n\n- name: {{ schema }}.udf_delete_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Deletes the secret with the given name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        'DELETE',\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        {},\n        {},\n        ''\n        ):status_code::INTEGER\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1707385, "supported_languages": null}, "macro.livequery_models.config_bitquery_udfs": {"name": "config_bitquery_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/bitquery/udfs.yaml.sql", "original_file_path": "macros/marketplace/bitquery/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_bitquery_udfs", "macro_sql": "{% macro config_bitquery_udfs(schema_name = \"bitquery\", utils_schema_name = \"bitquery_utils\") -%}\n{#\n    This macro is used to generate the BitQuery calls\n #}\n\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Run a graphql query on BitQuery [BitQuery docs here](https://docs.bitquery.io/docs/start/first-query/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://graphql.bitquery.io',\n        {'X-API-KEY': '{API_KEY}'},\n        QUERY,\n        '_FSC_SYS/BITQUERY'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.17114, "supported_languages": null}, "macro.livequery_models.quicknode_ethereum_mainnet_rpc_call": {"name": "quicknode_ethereum_mainnet_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "original_file_path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "unique_id": "macro.livequery_models.quicknode_ethereum_mainnet_rpc_call", "macro_sql": "{% macro quicknode_ethereum_mainnet_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.ethereum_mainnet_rpc('{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1715662, "supported_languages": null}, "macro.livequery_models.quicknode_polygon_mainnet_rpc_call": {"name": "quicknode_polygon_mainnet_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "original_file_path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "unique_id": "macro.livequery_models.quicknode_polygon_mainnet_rpc_call", "macro_sql": "{% macro quicknode_polygon_mainnet_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.polygon_mainnet_rpc('{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1717741, "supported_languages": null}, "macro.livequery_models.quicknode_solana_mainnet_rpc_call": {"name": "quicknode_solana_mainnet_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "original_file_path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "unique_id": "macro.livequery_models.quicknode_solana_mainnet_rpc_call", "macro_sql": "{% macro quicknode_solana_mainnet_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.solana_mainnet_rpc('{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.171982, "supported_languages": null}, "macro.livequery_models.config_quicknode_polygon_nfts_udfs": {"name": "config_quicknode_polygon_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/polygon_nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/polygon_nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_polygon_nfts_udfs", "macro_sql": "{% macro config_quicknode_polygon_nfts_udfs(schema_name = \"quicknode_polygon_nfts\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Polygon NFT endpoints\n #}\n\n- name: {{ schema_name -}}.fetch_nft_collection_details\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns collection details for specified contracts. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_fetchNFTCollectionDetails_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTCollectionDetails') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_fetchNFTs_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTs') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts_by_collection\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs within a given collection. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_fetchNFTsByCollection_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTsByCollection') | trim }}\n\n- name: {{ schema_name -}}.get_transfers_by_nft\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers by given NFT. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTransfersByNFT_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTransfersByNFT') | trim }}\n\n- name: {{ schema_name -}}.verify_nfts_owner\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Confirms ownership of specified NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_verifyNFTsOwner_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_verifyNFTsOwner') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_polygon_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1736965, "supported_languages": null}, "macro.livequery_models.config_quicknode_solana_nfts_udfs": {"name": "config_quicknode_solana_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/solana_nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/solana_nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_solana_nfts_udfs", "macro_sql": "{% macro config_quicknode_solana_nfts_udfs(schema_name = \"quicknode_solana_nfts\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Solana NFT endpoints\n #}\n\n- name: {{ schema_name -}}.fetch_nfts\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/solana/qn_fetchNFTs).$$\n  sql: {{ quicknode_solana_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTs') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts_by_creator\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs that have been created by an address. [QuickNode docs here](https://www.quicknode.com/docs/solana/qn_fetchNFTsByCreator).$$\n  sql: {{ quicknode_solana_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTsByCreator') | trim }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_solana_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1745684, "supported_languages": null}, "macro.livequery_models.config_quicknode_ethereum_nfts_udfs": {"name": "config_quicknode_ethereum_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/ethereum_nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/ethereum_nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_ethereum_nfts_udfs", "macro_sql": "{% macro config_quicknode_ethereum_nfts_udfs(schema_name = \"quicknode_ethereum_nfts\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Ethereum NFT endpoints\n #}\n\n- name: {{ schema_name -}}.fetch_nft_collection_details\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns collection details for specified contracts. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_fetchNFTCollectionDetails_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTCollectionDetails') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_fetchNFTs).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTs') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts_by_collection\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs within a given collection. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_fetchNFTsByCollection_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTsByCollection') | trim }}\n\n- name: {{ schema_name -}}.get_transfers_by_nft\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers by given NFT. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTransfersByNFT_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTransfersByNFT') | trim }}\n\n- name: {{ schema_name -}}.verify_nfts_owner\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Confirms ownership of specified NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_verifyNFTsOwner_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_verifyNFTsOwner') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_ethereum_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1762893, "supported_languages": null}, "macro.livequery_models.config_quicknode_polygon_tokens_udfs": {"name": "config_quicknode_polygon_tokens_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/polygon_token_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/polygon_token_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_polygon_tokens_udfs", "macro_sql": "{% macro config_quicknode_polygon_tokens_udfs(schema_name = \"quicknode_polygon_tokens\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Polygon Token endpoints\n #}\n\n- name: {{ schema_name -}}.get_token_metadata_by_contract_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified contract.  [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTokenMetadataByContractAddress_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataByContractAddress') | trim }}\n\n- name: {{ schema_name -}}.get_token_metadata_by_symbol\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified token symbol.  [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTokenMetadataBySymbol_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataBySymbol') | trim }}\n\n- name: {{ schema_name -}}.get_transactions_by_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transactions within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTransactionsByAddress_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTransactionsByAddress') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_balance\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns ERC-20 tokens and token balances within a wallet. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getWalletTokenBalance_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenBalance') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_transactions\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers of a specified token within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getWalletTokenTransactions_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenTransactions') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_polygon_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1781309, "supported_languages": null}, "macro.livequery_models.config_quicknode_ethereum_tokens_udfs": {"name": "config_quicknode_ethereum_tokens_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/ethereum_token_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/ethereum_token_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_ethereum_tokens_udfs", "macro_sql": "{% macro config_quicknode_ethereum_tokens_udfs(schema_name = \"quicknode_ethereum_tokens\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Ethereum Token endpoints\n #}\n\n- name: {{ schema_name -}}.get_token_metadata_by_contract_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified contract.  [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTokenMetadataByContractAddress_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataByContractAddress') | trim }}\n\n- name: {{ schema_name -}}.get_token_metadata_by_symbol\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified token symbol.  [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTokenMetadataBySymbol_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataBySymbol') | trim }}\n\n- name: {{ schema_name -}}.get_transactions_by_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transactions within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTransactionsByAddress_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTransactionsByAddress') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_balance\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns ERC-20 tokens and token balances within a wallet. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getWalletTokenBalance_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenBalance') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_transactions\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers of a specified token within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getWalletTokenTransactions_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenTransactions') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_ethereum_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1799955, "supported_languages": null}, "macro.livequery_models.config_quicknode_utils_udfs": {"name": "config_quicknode_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_utils_udfs", "macro_sql": "{% macro config_quicknode_utils_udfs(schema_name = \"quicknode_utils\", utils_schema_name=\"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode base endpoints/RPC calls\n #}\n\n- name: {{ schema_name -}}.ethereum_mainnet_rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an Ethereum RPC call to QuickNode.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      '{ethereum-mainnet}',\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': [PARAMS]},\n      '_FSC_SYS/QUICKNODE'\n    ) as response\n\n- name: {{ schema_name -}}.polygon_mainnet_rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Polygon RPC call to QuickNode.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      '{polygon-matic}',\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': [PARAMS]},\n      '_FSC_SYS/QUICKNODE'\n    ) as response\n\n- name: {{ schema_name -}}.solana_mainnet_rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Solana RPC call to QuickNode.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      '{solana-solana-mainnet}',\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/QUICKNODE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1807692, "supported_languages": null}, "macro.livequery_models.config_fred_udfs": {"name": "config_fred_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/fred/udfs.yaml.sql", "original_file_path": "macros/marketplace/fred/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_fred_udfs", "macro_sql": "{% macro config_fred_udfs(schema_name = \"fred\", utils_schema_name = \"fred_utils\") -%}\n{#\n    This macro is used to generate the FRED Calls\n #}\n- name: {{ schema_name -}}.get_series\n  signature:\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a FRED series [FRED docs here](https://fred.stlouisfed.org/docs/api/fred/series.html).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.stlouisfed.org/fred/series/observations?api_key={API_KEY}&', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {},\n        {},\n        '_FSC_SYS/FRED'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1811805, "supported_languages": null}, "macro.livequery_models.config_strangelove_udfs": {"name": "config_strangelove_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/strangelove/udfs.yaml.sql", "original_file_path": "macros/marketplace/strangelove/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_strangelove_udfs", "macro_sql": "{% macro config_strangelove_udfs(schema_name = \"strangelove\", utils_schema_name = \"strangelove_utils\") -%}\n{#\n    This macro is used to generate the Subquery Calls\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The url to issue a get request to]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Issue a GET request to a Strangelove Endpoint [Strangelove docs here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n          URL, '?',\n          utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'x-apikey': '{API_KEY}'},\n        {},\n        '_FSC_SYS/STRANGELOVE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The url to issue a post request to]\n    - [QUERY, OBJECT, The body of the request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Issue a POST request to a Strangelove Endpoint [Strangelove docs here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {'x-apikey': '{API_KEY}'},\n        QUERY,\n        '_FSC_SYS/STRANGELOVE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.181806, "supported_languages": null}, "macro.livequery_models.footprint_get_api_call": {"name": "footprint_get_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/footprint/footprint_config_utils.sql", "original_file_path": "macros/marketplace/footprint/footprint_config_utils.sql", "unique_id": "macro.livequery_models.footprint_get_api_call", "macro_sql": "{% macro footprint_get_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.get('/{{api_path}}', QUERY_PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1821244, "supported_languages": null}, "macro.livequery_models.footprint_post_api_call": {"name": "footprint_post_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/footprint/footprint_config_utils.sql", "original_file_path": "macros/marketplace/footprint/footprint_config_utils.sql", "unique_id": "macro.livequery_models.footprint_post_api_call", "macro_sql": "{% macro footprint_post_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.post('/{{api_path}}', BODY) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1823254, "supported_languages": null}, "macro.livequery_models.config_footprint_utils_udfs": {"name": "config_footprint_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/footprint/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/footprint/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_footprint_utils_udfs", "macro_sql": "{% macro config_footprint_utils_udfs(schema_name = \"footprint_utils\", utils_schema_name=\"footprint_utils\") -%}\n{#\n    This macro is used to generate the Footprint base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, ARRAY, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Footprint API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://api.footprint.network/api', PATH, '?',\n            utils.udf_urlencode(QUERY_ARGS, TRUE)\n        ),\n        {'api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/FOOTPRINT'\n    ) as response\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Footprint API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://api.footprint.network/api', PATH, '?',\n            utils.udf_urlencode(QUERY_ARGS, TRUE)\n        ),\n        {'api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/FOOTPRINT'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Footprint API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.footprint.network/api', PATH),\n        {'api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/FOOTPRINT'\n    ) as response\n\n\n- name: {{ schema_name -}}.rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, ARRAY, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Footprint.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      concat('https://api.footprint.network/api'),\n      {'api-key': '{API_KEY}'},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/FOOTPRINT') as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1833491, "supported_languages": null}, "macro.livequery_models.config_snapshot_udfs": {"name": "config_snapshot_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/snapshot/udfs.yaml.sql", "original_file_path": "macros/marketplace/snapshot/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_snapshot_udfs", "macro_sql": "{% macro config_snapshot_udfs(schema_name = \"snapshot\", utils_schema_name=\"snapshot_utils\") -%}\n{#\n    This macro is used to generate the Snapshot Base endpoints\n #}\n\n- name: {{ schema_name -}}.query\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Graphql Query to the Snapshot API. [Snapshot docs here](https://docs.snapshot.org/tools/api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://hub.snapshot.org/graphql',\n        {},\n        QUERY\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1837585, "supported_languages": null}, "macro.livequery_models.config_credmark_utils_udfs": {"name": "config_credmark_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/credmark/util_udfs.sql", "original_file_path": "macros/marketplace/credmark/util_udfs.sql", "unique_id": "macro.livequery_models.config_credmark_utils_udfs", "macro_sql": "{% macro config_credmark_utils_udfs(schema_name = \"credmark_utils\", utils_schema_name=\"credmark_utils\") -%}\n{#\n    This macro is used to generate the Credmark base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Credmark API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://gateway.credmark.com', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'Authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/CREDMARK'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Credmark API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://gateway.credmark.com', PATH),\n        {'Authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/CREDMARK'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.184342, "supported_languages": null}, "macro.livequery_models.config_zapper_udfs": {"name": "config_zapper_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/zapper/udfs.yaml.sql", "original_file_path": "macros/marketplace/zapper/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_zapper_udfs", "macro_sql": "{% macro config_zapper_udfs(schema_name = \"zapper\", utils_schema_name=\"zapper_utils\") -%}\n{#\n    This macro is used to generate the Zapper Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Zapper API. [Zapper docs here](https://studio.zapper.xyz/docs/apis/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.zapper.xyz', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Basic {API_KEY}'},\n        {},\n        '_FSC_SYS/ZAPPER'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Zapper API. [Zapper docs here](https://studio.zapper.xyz/docs/apis/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.zapper.xyz', PATH),\n        {'Authorization': 'Basic {API_KEY}'},\n        BODY,\n        '_FSC_SYS/ZAPPER'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1849542, "supported_languages": null}, "macro.livequery_models.config_chainstack_udfs": {"name": "config_chainstack_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/chainstack/udfs.yaml.sql", "original_file_path": "macros/marketplace/chainstack/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_chainstack_udfs", "macro_sql": "{% macro config_chainstack_udfs(schema_name = \"chainstack\", utils_schema_name=\"chainstack_utils\") -%}\n{#\n    This macro is used to generate the Chainstack Base api endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Chainstack API. [Chainstack docs here](https://docs.chainstack.com/reference/blockchain-apis).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.chainstack.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/CHAINSTACK'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Chainstack API. [Chainstack docs here](https://docs.chainstack.com/reference/blockchain-apis).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.chainstack.com', PATH),\n        {'authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/CHAINSTACK'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1855726, "supported_languages": null}, "macro.livequery_models.config_allday_udfs": {"name": "config_allday_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/allday/allday.graphql.sql", "original_file_path": "macros/marketplace/allday/allday.graphql.sql", "unique_id": "macro.livequery_models.config_allday_udfs", "macro_sql": "{% macro config_allday_udfs(schema_name = \"allday\", utils_schema_name = \"allday_utils\") -%}\n{#\n    This macro is used to generate the AllDay calls\n #}\n\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Run a graphql query on AllDay.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        CONCAT('https://nflallday.com/consumer/graphql?query=', utils.udf_object_to_url_query_string(QUERY)),\n        {'User-Agent': 'Flipside_Flow_metadata/0.1','Accept-Encoding': 'gzip', 'Content-Type': 'application/json', 'Accept': 'application/json','Connection': 'keep-alive'},\n        {},\n        '_FSC_SYS/ALLDAY'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.185985, "supported_languages": null}, "macro.livequery_models.config_transpose_udfs": {"name": "config_transpose_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/transpose/udfs.yaml.sql", "original_file_path": "macros/marketplace/transpose/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_transpose_udfs", "macro_sql": "{% macro config_transpose_udfs(schema_name = \"transpose\", utils_schema_name=\"transpose_utils\") -%}\n{#\n    This macro is used to generate the Transpose Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Transpose API. [Transpose docs here](https://docs.transpose.io/rest/overview/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.transpose.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/TRANSPOSE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Transpose API. [Transpose docs here](https://docs.transpose.io/rest/overview/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.transpose.io', PATH),\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/TRANSPOSE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1865873, "supported_languages": null}, "macro.livequery_models.config_subquery_udfs": {"name": "config_subquery_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/subquery/udfs.yaml.sql", "original_file_path": "macros/marketplace/subquery/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_subquery_udfs", "macro_sql": "{% macro config_subquery_udfs(schema_name = \"subquery\", utils_schema_name = \"subquery_utils\") -%}\n{#\n    This macro is used to generate the Subquery Calls\n #}\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [PROJECT, STRING, The sub-query project name]\n    - [QUERY, OBJECT, The graphql query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Query a SubQuery Project [SubQuery docs here](https://explorer.subquery.network/subquery/subquery/kepler-network).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.subquery.network/sq/subquery/', PROJECT),\n        {},\n        QUERY\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1869853, "supported_languages": null}, "macro.livequery_models.config_defillama_udfs": {"name": "config_defillama_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/defillama/udfs.yaml.sql", "original_file_path": "macros/marketplace/defillama/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_defillama_udfs", "macro_sql": "{% macro config_defillama_udfs(schema_name = \"defillama\", utils_schema_name=\"defillama_utils\") -%}\n{#\n    This macro is used to generate the Defillama endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Defillama API. [Defillama docs here](https://defillama.com/docs/api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.llama.fi', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Accept': '*/*', 'User-Agent': 'livequery/1.0 (Snowflake)', 'Host':'api.llama.fi', 'Connection': 'keep-alive'},\n        {},\n        IFF(ARRAY_CONTAINS('api_key'::VARIANT, OBJECT_KEYS(QUERY_ARGS)), '_FSC_SYS/DEFILLAMA', '')\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1874187, "supported_languages": null}, "macro.livequery_models.config_reservoir_udfs": {"name": "config_reservoir_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/reservoir/udfs.yaml.sql", "original_file_path": "macros/marketplace/reservoir/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_reservoir_udfs", "macro_sql": "{% macro config_reservoir_udfs(schema_name = \"reservoir\", utils_schema_name=\"reservoir_utils\") -%}\n{#\n    This macro is used to generate the Reservoir Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Reservoir NFT Data API. [Reservoir docs here](https://docs.reservoir.tools/reference/nft-data-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.reservoir.tools', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'x-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/RESERVOIR'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Reservoir NFT Data API. [Reservoir docs here](https://docs.reservoir.tools/reference/nft-data-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.reservoir.tools', PATH),\n        {'x-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/RESERVOIR'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.188037, "supported_languages": null}, "macro.livequery_models.config_apilayer_udfs": {"name": "config_apilayer_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/apilayer/udfs.yaml.sql", "original_file_path": "macros/marketplace/apilayer/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_apilayer_udfs", "macro_sql": "{% macro config_apilayer_udfs(schema_name = \"apilayer\", utils_schema_name=\"apilayer_utils\") -%}\n{#\n    This macro is used to generate the ApiLayer Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the ApiLayer API. [ApiLayer docs here](https://apilayer.com/docs/article/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.apilayer.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'apikey': '{API_KEY}'},\n        {},\n        '_FSC_SYS/APILAYER'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the ApiLayer API. [ApiLayer docs here](https://apilayer.com/docs/article/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.apilayer.com', PATH),\n        {'apikey': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/APILAYER'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1886632, "supported_languages": null}, "macro.livequery_models.helius_rpc_call": {"name": "helius_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/helius_config_utils.sql", "original_file_path": "macros/marketplace/helius/helius_config_utils.sql", "unique_id": "macro.livequery_models.helius_rpc_call", "macro_sql": "{% macro helius_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.rpc(NETWORK, '{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1890402, "supported_languages": null}, "macro.livequery_models.helius_get_call": {"name": "helius_get_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/helius_config_utils.sql", "original_file_path": "macros/marketplace/helius/helius_config_utils.sql", "unique_id": "macro.livequery_models.helius_get_call", "macro_sql": "{% macro helius_get_call(schema_name, path) %}\nSELECT {{ schema_name -}}.get(NETWORK, '{{path}}', QUERY_PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1892421, "supported_languages": null}, "macro.livequery_models.helius_post_call": {"name": "helius_post_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/helius_config_utils.sql", "original_file_path": "macros/marketplace/helius/helius_config_utils.sql", "unique_id": "macro.livequery_models.helius_post_call", "macro_sql": "{% macro helius_post_call(schema_name, path) %}\nSELECT {{ schema_name -}}.post(NETWORK, '{{path}}', BODY) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1894565, "supported_languages": null}, "macro.livequery_models.config_helius_das_udfs": {"name": "config_helius_das_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/das_udfs.yaml.sql", "original_file_path": "macros/marketplace/helius/das_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_helius_das_udfs", "macro_sql": "{% macro config_helius_das_udfs(schema_name = \"helius_das\", utils_schema_name = \"helius_utils\") -%}\n{#\n    This macro is used to generate the Helius DAS endpoints\n #}\n\n- name: {{ schema_name -}}.get_asset\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get an asset by its ID. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-asset).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAsset') | trim }}\n\n- name: {{ schema_name -}}.get_signatures_for_asset\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of transaction signatures related to a compressed asset. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-signatures-for-asset).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getSignaturesForAsset') | trim }}\n\n- name: {{ schema_name -}}.search_assets\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Search for assets by a variety of parameters. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/search-assets).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'searchAssets') | trim }}\n\n- name: {{ schema_name -}}.get_asset_proof\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a merkle proof for a compressed asset by its ID. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-asset-proof).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetProof') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_owner\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets owned by an address. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-owner).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByOwner') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_authority\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets with a specific authority. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-authority).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByAuthority') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_creator\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets created by an address. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-creator).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByCreator') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_group\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets by a group key and value. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-group).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByGroup') | trim }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.helius_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.192748, "supported_languages": null}, "macro.livequery_models.config_helius_utils_udfs": {"name": "config_helius_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/helius/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_helius_utils_udfs", "macro_sql": "{% macro config_helius_utils_udfs(schema = \"helius_utils\", utils_schema_name=\"helius_utils\") -%}\n{#\n    This macro is used to generate the Helius base endpoints\n #}\n\n- name: {{ schema -}}.get\n  signature:\n    - [NETWORK, STRING, The network 'devnet' or 'mainnet']\n    - [PATH, STRING, The API path starting with '/']\n    - [QUERY_PARAMS, OBJECT, The query parameters]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an HTTP GET request to Helius.$$\n  sql: |\n    SELECT live.udf_api(\n      'GET',\n      CASE\n          WHEN NETWORK = 'devnet' THEN\n              concat('https://api-devnet.helius.xyz', PATH, '?api-key={API_KEY}&', utils.udf_object_to_url_query_string(QUERY_PARAMS))\n          ELSE\n              concat('https://api.helius.xyz', PATH, '?api-key={API_KEY}&', utils.udf_object_to_url_query_string(QUERY_PARAMS))\n      END,\n      {},\n      {},\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n- name: {{ schema -}}.post\n  signature:\n    - [NETWORK, STRING, The network 'devnet' or 'mainnet']\n    - [PATH, STRING, The API path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an HTTP POST request to Helius.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      CASE\n          WHEN NETWORK = 'devnet' THEN\n              concat('https://api-devnet.helius.xyz', PATH, '?api-key={API_KEY}')\n          ELSE\n              concat('https://api.helius.xyz', PATH, '?api-key={API_KEY}')\n      END,\n      {},\n      BODY,\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n- name: {{ schema -}}.rpc\n  signature:\n    - [NETWORK, STRING, The network 'devnet' or 'mainnet']\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Helius.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      CASE\n          WHEN NETWORK = 'devnet' THEN\n              'https://devnet.helius-rpc.com?api-key={API_KEY}'\n          ELSE\n              'https://rpc.helius.xyz?api-key={API_KEY}'\n      END,\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1937108, "supported_languages": null}, "macro.livequery_models.config_helius_apis_udfs": {"name": "config_helius_apis_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/apis_udfs.yaml.sql", "original_file_path": "macros/marketplace/helius/apis_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_helius_apis_udfs", "macro_sql": "{% macro config_helius_apis_udfs(schema_name = \"helius_apis\", utils_schema_name = \"helius_utils\") -%}\n{#\n    This macro is used to generate the Helius API endpoints\n #}\n\n- name: {{ schema_name -}}.token_metadata\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [BODY, OBJECT, The body of the API request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns metadata for a list of given token mint addresses. [Helius docs here](https://docs.helius.xyz/solana-apis/token-metadata-api).$$\n  sql: {{ helius_post_call(utils_schema_name, '/v0/token-metadata') | trim }}\n\n- name: {{ schema_name -}}.balances\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [ADDRESS, STRING, The address to retrieve balances for]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the native Solana balance (in lamports) and all token balances for a given address. [Helius docs here](https://docs.helius.xyz/solana-apis/balances-api).$$\n  sql: |\n    SELECT live.udf_api(\n      'GET',\n      CASE \n          WHEN NETWORK = 'devnet' THEN \n              concat('https://api-devnet.helius.xyz/v0/addresses/', ADDRESS, '/balances?api-key={API_KEY}')\n          ELSE \n              concat('https://api.helius.xyz/v0/addresses/', ADDRESS, '/balances?api-key={API_KEY}')\n      END,\n      {},\n      {},\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n- name: {{ schema_name -}}.parse_transactions\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [TRANSACTIONS, ARRAY, An array of transaction signatures]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns an array of enriched, human-readable transactions of the given transaction signatures. Up to 100 transactions per call. [Helius docs here](https://docs.helius.xyz/solana-apis/enhanced-transactions-api/parse-transaction-s).$$\n  sql: |\n    SELECT {{ utils_schema_name -}}.post(NETWORK, '/v0/transactions', {'transactions': TRANSACTIONS}) as response\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.helius_post_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1947665, "supported_languages": null}, "macro.livequery_models.config_cmc_udfs": {"name": "config_cmc_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/cmc/udfs.yaml.sql", "original_file_path": "macros/marketplace/cmc/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_cmc_udfs", "macro_sql": "{% macro config_cmc_udfs(schema_name = \"cmc\", utils_schema_name=\"cmc_utils\") -%}\n{#\n    This macro is used to generate the CoinmarketCap Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the CoinmarketCap API. [CoinmarketCap docs here](https://coinmarketcap.com/api/documentation/v1/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://pro-api.coinmarketcap.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-CMC_PRO_API_KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/CMC'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the CoinmarketCap API. [CoinmarketCap docs here](https://coinmarketcap.com/api/documentation/v1/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://pro-api.coinmarketcap.com', PATH),\n        {'X-CMC_PRO_API_KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/CMC'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.195369, "supported_languages": null}, "macro.livequery_models.config_espn_udfs": {"name": "config_espn_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/espn/udfs.yaml.sql", "original_file_path": "macros/marketplace/espn/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_espn_udfs", "macro_sql": "{% macro config_espn_udfs(schema_name = \"espn\", utils_schema_name=\"espn_utils\") -%}\n{#\n    This macro is used to generate the ESPN Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The full url including the path]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the ESPN API. [ESPN docs here](https://gist.github.com/akeaswaran/b48b02f1c94f873c6655e7129910fc3b#file-espn-api-docs-md).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(URL, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {},\n        {}\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The full url]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the ESPN API. [ESPN docs here](https://gist.github.com/akeaswaran/b48b02f1c94f873c6655e7129910fc3b#file-espn-api-docs-md).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {},\n        BODY\n    ) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.196066, "supported_languages": null}, "macro.livequery_models.config_opensea_udfs": {"name": "config_opensea_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/opensea/udfs.yaml.sql", "original_file_path": "macros/marketplace/opensea/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_opensea_udfs", "macro_sql": "{% macro config_opensea_udfs(schema_name = \"opensea\", utils_schema_name=\"opensea_utils\") -%}\n{#\n    This macro is used to generate the OpenSea Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the OpenSea API. [OpenSea docs here](https://docs.opensea.io/reference/api-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.opensea.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/OPENSEA'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the OpenSea API. [OpenSea docs here](https://docs.opensea.io/reference/api-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.opensea.io', PATH),\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/OPENSEA'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1966739, "supported_languages": null}, "macro.livequery_models.config_coingecko_udfs": {"name": "config_coingecko_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/coingecko/udfs.yaml.sql", "original_file_path": "macros/marketplace/coingecko/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_coingecko_udfs", "macro_sql": "{% macro config_coingecko_udfs(schema_name = \"coingecko\", utils_schema_name=\"coingecko_utils\") -%}\n{#\n    This macro is used to generate the Coingecko Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the CoinGecko API. [CoinGecko docs here](https://apiguide.coingecko.com/getting-started/introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://pro-api.coingecko.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'x-cg-pro-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/COINGECKO'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path after '/api' starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the CoinGecko API. [CoinGecko docs here](https://apiguide.coingecko.com/getting-started/introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://pro-api.coingecko.com', PATH),\n        {'x-cg-pro-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/COINGECKO'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1972823, "supported_languages": null}, "macro.livequery_models.config_deepnftvalue_udfs": {"name": "config_deepnftvalue_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/deepnftvalue/udfs.yaml.sql", "original_file_path": "macros/marketplace/deepnftvalue/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_deepnftvalue_udfs", "macro_sql": "{% macro config_deepnftvalue_udfs(schema_name = \"deepnftvalue\", utils_schema_name=\"deepnftvalue_utils\") -%}\n{#\n    This macro is used to generate the DeepNftValue Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the DeepNftValue API. [DeepNftValue docs here](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.deepnftvalue.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Token {API_KEY}'},\n        {},\n        '_FSC_SYS/DEEPNFTVALUE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the DeepNftValue API. [DeepNftValue docs here](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.deepnftvalue.com', PATH),\n        {'Authorization': 'Token {API_KEY}'},\n        BODY,\n        '_FSC_SYS/DEEPNFTVALUE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1979108, "supported_languages": null}, "macro.livequery_models.config_github_utils_udfs": {"name": "config_github_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/github/utils_udfs.yaml.sql", "original_file_path": "macros/marketplace/github/utils_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_github_utils_udfs", "macro_sql": "{% macro config_github_utils_udfs(schema_name = \"github_utils\", utils_schema_name = \"github_utils\") -%}\n{#\n    This macro is used to generate the Github API Calls\n #}\n- name: {{ schema_name -}}.octocat\n  signature:\n    - []\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Verify token [Authenticating to the REST API](https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api?apiVersion=2022-11-28).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        'https://api.github.com/octocat',\n        {'Authorization': 'Bearer {TOKEN}',\n        'X-GitHub-Api-Version': '2022-11-28'},\n        {},\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n        \n    ) as response\n\n- name: {{ schema_name -}}.headers\n  signature: []\n  return_type:\n    - \"TEXT\"\n  options: |\n    NOT NULL\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT '{\"Authorization\": \"Bearer {TOKEN}\",\n            \"X-GitHub-Api-Version\": \"2022-11-28\",\n            \"Accept\": \"application/vnd.github+json\"}'\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [route, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        CONCAT_WS('/', 'https://api.github.com',  route || '?') || utils.udf_urlencode(query),\n        PARSE_JSON({{ schema_name -}}.headers()),\n        {},\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n    )\n- name: {{ schema_name -}}.post\n  signature:\n    - [route, \"TEXT\"]\n    - [data, \"OBJECT\"]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT_WS('/', 'https://api.github.com', route),\n        PARSE_JSON({{ schema_name -}}.headers()),\n        data,\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n    )\n- name: {{ schema_name -}}.put\n  signature:\n    - [route, \"TEXT\"]\n    - [data, \"OBJECT\"]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'PUT',\n        CONCAT_WS('/', 'https://api.github.com', route),\n        PARSE_JSON({{ schema_name -}}.headers()),\n        data,\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.1995778, "supported_languages": null}, "macro.livequery_models.config_github_actions_udfs": {"name": "config_github_actions_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/github/actions_udfs.yaml.sql", "original_file_path": "macros/marketplace/github/actions_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_github_actions_udfs", "macro_sql": "{% macro config_github_actions_udfs(schema_name = \"github_actions\", utils_schema_name = \"github_utils\") -%}\n{#\n    This macro is used to generate the Github API Calls\n #}\n- name: {{ schema_name -}}.workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.GET(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows'),\n        query\n    ):data::OBJECT\n- name: {{ schema_name -}}.workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.workflows(owner, repo, {})\n\n- name: {{ schema_name -}}.runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.GET(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/runs'),\n        query\n    ):data::OBJECT\n- name: {{ schema_name -}}.runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.runs(owner, repo, {})\n\n- name: {{ schema_name -}}.workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.GET(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'runs'),\n        query\n    ):data::OBJECT\n- name: {{ schema_name -}}.workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.workflow_runs(owner, repo, workflow_id, {})\n\n- name: {{ schema_name -}}.workflow_dispatches\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n    - [body, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.POST(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'dispatches'),\n        COALESCE(body, {'ref': 'main'})::OBJECT\n    )::OBJECT\n\n- name: {{ schema_name -}}.workflow_dispatches\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.workflow_dispatches(owner, repo, workflow_id, NULL)\n\n- name: {{ schema_name -}}.workflow_enable\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Enables a workflow. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/reference/actions#enable-a-workflow).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.PUT(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'enable'),\n        {}\n    )::OBJECT\n- name: {{ schema_name -}}.workflow_disable\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Disables a workflow. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/reference/actions#disable-a-workflow).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.PUT(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'disable'),\n        {}\n    )::OBJECT\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2044253, "supported_languages": null}, "macro.livequery_models.config_github_actions_udtfs": {"name": "config_github_actions_udtfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/github/actions_udtfs.yml.sql", "original_file_path": "macros/marketplace/github/actions_udtfs.yml.sql", "unique_id": "macro.livequery_models.config_github_actions_udtfs", "macro_sql": "{% macro config_github_actions_udtfs(schema_name = \"github_actions\", utils_schema_name = \"github_utils\") -%}\n{#\n    This macro is used to generate the Github API Calls\n #}\n- name: {{ schema_name -}}.tf_workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"TABLE(id INTEGER, badge_url STRING, created_at TIMESTAMP, html_url STRING, name STRING, node_id STRING, path STRING, state STRING, updated_at TIMESTAMP, url STRING)\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    WITH workflows AS\n    (\n    SELECT\n        github_actions.workflows(OWNER, REPO, QUERY) AS response\n    )\n    SELECT\n        value:id::INTEGER AS id\n        ,value:badge_url::STRING AS badge_url\n        ,value:created_at::TIMESTAMP AS created_at\n        ,value:html_url::STRING AS html_url\n        ,value:name::STRING AS name\n        ,value:node_id::STRING AS node_id\n        ,value:path::STRING AS path\n        ,value:state::STRING AS state\n        ,value:updated_at::TIMESTAMP AS updated_at\n        ,value:url::STRING AS url\n    FROM workflows, LATERAL FLATTEN( input=> response:workflows)\n- name: {{ schema_name -}}.tf_workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"TABLE(id INTEGER, badge_url STRING, created_at TIMESTAMP, html_url STRING, name STRING, node_id STRING, path STRING, state STRING, updated_at TIMESTAMP, url STRING)\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    SELECT *\n    FROM TABLE({{ schema_name -}}.tf_workflows(owner, repo, {}))\n\n- name: {{ schema_name -}}.tf_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n        COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n\n  sql: |\n    WITH response AS\n    (\n    SELECT\n        github_actions.runs(OWNER, REPO, QUERY) AS response\n    )\n    SELECT\n      value:id::NUMBER AS id\n      ,value:name::STRING AS name\n      ,value:node_id::STRING AS node_id\n      ,value:check_suite_id::NUMBER AS check_suite_id\n      ,value:check_suite_node_id::STRING AS check_suite_node_id\n      ,value:head_branch::STRING AS head_branch\n      ,value:head_sha::STRING AS head_sha\n      ,value:run_number::NUMBER AS run_number\n      ,value:event::STRING AS event\n      ,value:display_title::STRING AS display_title\n      ,value:status::STRING AS status\n      ,value:conclusion::STRING AS conclusion\n      ,value:workflow_id::NUMBER AS workflow_id\n      ,value:url::STRING AS url\n      ,value:html_url::STRING AS html_url\n      ,value:pull_requests::STRING AS pull_requests\n      ,value:created_at::TIMESTAMP AS created_at\n      ,value:updated_at::TIMESTAMP AS updated_at\n      ,value:actor::OBJECT AS actor\n      ,value:run_attempt::STRING AS run_attempt\n      ,value:run_started_at::TIMESTAMP AS run_started_at\n      ,value:triggering_actor::OBJECT AS triggering_actor\n      ,value:jobs_url::STRING AS jobs_url\n      ,value:logs_url::STRING AS logs_url\n      ,value:check_suite_url::STRING AS check_suite_url\n      ,value:artifacts_url::STRING AS artifacts_url\n      ,value:cancel_url::STRING AS cancel_url\n      ,value:rerun_url::STRING AS rerun_url\n      ,value:workflow_url::STRING AS workflow_url\n      ,value:head_commit::OBJECT AS head_commit\n      ,value:repository::OBJECT AS repository\n      ,value:head_repository::OBJECT AS head_repository\n    FROM response, LATERAL FLATTEN( input=> response:workflow_runs)\n- name: {{ schema_name -}}.tf_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n      COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT *\n    FROM TABLE({{ schema_name -}}.tf_runs(owner, repo, {}))\n\n- name: {{ schema_name -}}.tf_workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflkow_id, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n      COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    WITH response AS\n    (\n    SELECT\n        github_actions.workflow_runs(OWNER, REPO, WORKFLKOW_ID, QUERY) AS response\n    )\n    SELECT\n      value:id::NUMBER AS id\n      ,value:name::STRING AS name\n      ,value:node_id::STRING AS node_id\n      ,value:check_suite_id::NUMBER AS check_suite_id\n      ,value:check_suite_node_id::STRING AS check_suite_node_id\n      ,value:head_branch::STRING AS head_branch\n      ,value:head_sha::STRING AS head_sha\n      ,value:run_number::NUMBER AS run_number\n      ,value:event::STRING AS event\n      ,value:display_title::STRING AS display_title\n      ,value:status::STRING AS status\n      ,value:conclusion::STRING AS conclusion\n      ,value:workflow_id::NUMBER AS workflow_id\n      ,value:url::STRING AS url\n      ,value:html_url::STRING AS html_url\n      ,value:pull_requests::STRING AS pull_requests\n      ,value:created_at::TIMESTAMP AS created_at\n      ,value:updated_at::TIMESTAMP AS updated_at\n      ,value:actor::OBJECT AS actor\n      ,value:run_attempt::STRING AS run_attempt\n      ,value:run_started_at::TIMESTAMP AS run_started_at\n      ,value:triggering_actor::OBJECT AS triggering_actor\n      ,value:jobs_url::STRING AS jobs_url\n      ,value:logs_url::STRING AS logs_url\n      ,value:check_suite_url::STRING AS check_suite_url\n      ,value:artifacts_url::STRING AS artifacts_url\n      ,value:cancel_url::STRING AS cancel_url\n      ,value:rerun_url::STRING AS rerun_url\n      ,value:workflow_url::STRING AS workflow_url\n      ,value:head_commit::OBJECT AS head_commit\n      ,value:repository::OBJECT AS repository\n      ,value:head_repository::OBJECT AS head_repository\n    FROM response, LATERAL FLATTEN( input=> response:workflow_runs)\n- name: {{ schema_name -}}.tf_workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflkow_id, \"TEXT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n        COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT *\n    FROM TABLE({{ schema_name -}}.tf_workflow_runs(owner, repo, WORKFLKOW_ID, {}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2088811, "supported_languages": null}, "macro.livequery_models.config_dappradar_udfs": {"name": "config_dappradar_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/dappradar/udfs.yaml.sql", "original_file_path": "macros/marketplace/dappradar/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_dappradar_udfs", "macro_sql": "{% macro config_dappradar_udfs(schema_name = \"dappradar\", utils_schema_name=\"dappradar_utils\") -%}\n{#\n    This macro is used to generate the DappRadar Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the DappRadar API. [DappRadar docs here](https://api-docs.dappradar.com/#section/Introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.dappradar.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-BLOBR-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/DAPPRADAR'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the DappRadar API. [DappRadar docs here](https://api-docs.dappradar.com/#section/Introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.dappradar.com', PATH),\n        {'X-BLOBR-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/DAPPRADAR'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2095032, "supported_languages": null}, "macro.livequery_models.config_chainbase_utils_udfs": {"name": "config_chainbase_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/chainbase/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/chainbase/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_chainbase_utils_udfs", "macro_sql": "{% macro config_chainbase_utils_udfs(schema_name = \"chainbase_utils\", utils_schema_name=\"chainbase_utils\") -%}\n{#\n    This macro is used to generate the alchemy base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Chainbase API. [Chainbase Docs](https://docs.chainbase.com/reference/supported-chains)$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://api.chainbase.online', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'x-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/CHAINBASE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Chainbase API. [Chainbase Docs](https://docs.chainbase.com/reference/supported-chains)$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.chainbase.online', PATH),\n        {'x-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/CHAINBASE'\n    ) as response\n\n- name: {{ schema_name -}}.rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, ARRAY, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Chainbase. [Chainbase Docs](https://docs.chainbase.com/reference/supported-chains)$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      concat('https://api.chainbase.online'),\n      {'x-api-key': '{API_KEY}'},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/CHAINBASE') as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.210326, "supported_languages": null}, "macro.livequery_models.config_dune_udfs": {"name": "config_dune_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/dune/udfs.yaml.sql", "original_file_path": "macros/marketplace/dune/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_dune_udfs", "macro_sql": "{% macro config_dune_udfs(schema_name = \"dune\", utils_schema_name=\"dune_utils\") -%}\n{#\n    This macro is used to generate the Dune Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Dune API. [Dune docs here](https://dune.com/docs/api/api-reference/authentication/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.dune.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'x-dune-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/DUNE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Dune API. [Dune docs here](https://dune.com/docs/api/api-reference/authentication/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.dune.com', PATH),\n        {'x-dune-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/DUNE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.210925, "supported_languages": null}, "macro.livequery_models.config_alchemy_nfts_udfs": {"name": "config_alchemy_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_nfts_udfs", "macro_sql": "{% macro config_alchemy_nfts_udfs(schema_name = \"alchemy_nfts\", utils_schema_name = \"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy nft endpoints\n #}\n\n- name: {{ schema_name -}}.get_nfts\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all NFTs currently owned by a given address. [Alchemy docs here](https://docs.alchemy.com/reference/getnfts).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTs') | trim }}\n\n- name: {{ schema_name -}}.get_owners_for_token\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get the owner(s) for a token. [Alchemy docs here](https://docs.alchemy.com/reference/getownersfortoken).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getOwnersForToken') | trim }}\n\n- name: {{ schema_name -}}.get_owners_for_collection\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all owners for a given NFT contract. [Alchemy docs here](https://docs.alchemy.com/reference/getownersforcollection).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getOwnersForCollection') | trim }}\n\n- name: {{ schema_name -}}.is_holder_of_collection\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Checks whether a wallet holds a NFT in a given collection. [Alchemy docs here](https://docs.alchemy.com/reference/isholderofcollection).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'isHolderOfCollection') | trim }}\n\n- name: {{ schema_name -}}.get_contracts_for_owner\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all NFT contracts held by an owner address. [Alchemy docs here](https://docs.alchemy.com/reference/getcontractsforowner).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getContractsForOwner') | trim }}\n\n- name: {{ schema_name -}}.get_nft_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets the metadata associated with a given NFT. [Alchemy docs here](https://docs.alchemy.com/reference/getnftmetadata).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTMetadata') | trim }}\n\n- name: {{ schema_name -}}.get_nft_metadata_batch\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [BODY, OBJECT, JSON Body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets the metadata associated with up to 100 given NFT contracts. [Alchemy docs here](https://docs.alchemy.com/reference/getnftmetadatabatch).$$\n  sql: {{ alchemy_nft_post_api_call(utils_schema_name, 'getNFTMetadataBatch') | trim }}\n\n- name: {{ schema_name -}}.get_contract_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Queries NFT high-level collection/contract level information. [Alchemy docs here](https://docs.alchemy.com/reference/getcontractmetadata).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getContractMetadata') | trim }}\n\n- name: {{ schema_name -}}.get_contract_metadata_batch\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [BODY, OBJECT, JSON Body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets the metadata associated with the given list of contract addresses. [Alchemy docs here](https://docs.alchemy.com/reference/getcontractmetadatabatch).$$\n  sql: {{ alchemy_nft_post_api_call(utils_schema_name, 'getContractMetadataBatch') | trim }}\n\n- name: {{ schema_name -}}.invalidate_contract\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Marks all cached tokens for the particular contract as stale. So the next time the endpoint is queried it fetches live data instead of fetching from cache. [Alchemy docs here](https://docs.alchemy.com/reference/invalidatecontract).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'invalidateContract') | trim }}\n\n- name: {{ schema_name -}}.reingest_contract\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Triggers metadata refresh for an entire NFT collection and refreshes stale metadata after a collection reveal/collection changes. [Alchemy docs here](https://docs.alchemy.com/reference/reingestcontract).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'reingestContract') | trim }}\n\n- name: {{ schema_name -}}.search_contract_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts. [Alchemy docs here](https://docs.alchemy.com/reference/searchcontractmetadata).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'searchContractMetadata') | trim }}\n\n- name: {{ schema_name -}}.get_nfts_for_collection\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all NFTs for a given NFT contract. [Alchemy docs here](https://docs.alchemy.com/reference/getnftsforcollection).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTsForCollection') | trim }}\n\n- name: {{ schema_name -}}.get_spam_contracts\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns a list of all spam contracts marked by Alchemy. [Alchemy docs here](https://docs.alchemy.com/reference/getspamcontracts).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getSpamContracts') | trim }}\n\n- name: {{ schema_name -}}.is_spam_contract\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns whether a contract is marked as spam or not by Alchemy. [Alchemy docs here](https://docs.alchemy.com/reference/isspamcontract).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'isSpamContract') | trim }}\n\n- name: {{ schema_name -}}.is_airdrop\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns whether a token is marked as an airdrop or not. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. [Alchemy docs here](https://docs.alchemy.com/reference/isairdrop).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'isAirdrop') | trim }}\n\n- name: {{ schema_name -}}.report_spam\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Report a particular address to our APIs if you think it is spam. [Alchemy docs here](https://docs.alchemy.com/reference/reportspam).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'reportSpam') | trim }}\n\n- name: {{ schema_name -}}.get_floor_price\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the floor prices of a NFT collection by marketplace. [Alchemy docs here](https://docs.alchemy.com/reference/getfloorprice).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getFloorPrice') | trim }}\n\n- name: {{ schema_name -}}.get_nft_sales\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets NFT sales that have happened through on-chain marketplaces. [Alchemy docs here](https://docs.alchemy.com/reference/getnftsales).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTSales') | trim }}\n\n- name: {{ schema_name -}}.compute_rarity\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Computes the rarity of each attribute of an NFT. [Alchemy docs here](https://docs.alchemy.com/reference/computerarity).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'computeRarity') | trim }}\n\n- name: {{ schema_name -}}.summarize_nft_attributes\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Generate a summary of attribute prevalence for an NFT collection. [Alchemy docs here](https://docs.alchemy.com/reference/summarizenftattributes).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'summarizeNFTAttributes') | trim }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.alchemy_nft_get_api_call", "macro.livequery_models.alchemy_nft_post_api_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2251403, "supported_languages": null}, "macro.livequery_models.config_alchemy_tokens_udfs": {"name": "config_alchemy_tokens_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/token_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/token_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_tokens_udfs", "macro_sql": "{% macro config_alchemy_tokens_udfs(schema_name = \"alchemy_tokens\", utils_schema_name = \"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy token endpoints\n #}\n\n- name: {{ schema_name -}}.get_token_allowance\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the amount which the spender is allowed to withdraw from the owner. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-gettokenallowance).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getTokenAllowance\") | trim}}\n\n- name: {{ schema_name -}}.get_token_balances\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns ERC20 token balances for all tokens the given address has ever transacted in with. Optionally accepts a list of contracts. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-gettokenbalances).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getTokenBalances\") | trim}}\n\n- name: {{ schema_name -}}.get_token_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns metadata (name, symbol, decimals, logo) for a given token contract address. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-gettokenmetadata).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getTokenMetadata\") | trim}}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.alchemy_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.22626, "supported_languages": null}, "macro.livequery_models.alchemy_nft_get_api_call": {"name": "alchemy_nft_get_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_nft_get_api_call", "macro_sql": "{% macro alchemy_nft_get_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.nfts_get(NETWORK, '/{{api_path}}', QUERY_ARGS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2266695, "supported_languages": null}, "macro.livequery_models.alchemy_nft_post_api_call": {"name": "alchemy_nft_post_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_nft_post_api_call", "macro_sql": "{% macro alchemy_nft_post_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.nfts_post(NETWORK, '/{{api_path}}', BODY) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2268946, "supported_languages": null}, "macro.livequery_models.alchemy_rpc_call": {"name": "alchemy_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_rpc_call", "macro_sql": "{% macro alchemy_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.rpc(NETWORK, '{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2270977, "supported_languages": null}, "macro.livequery_models.config_alchemy_transfers_udfs": {"name": "config_alchemy_transfers_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/transfers_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/transfers_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_transfers_udfs", "macro_sql": "{% macro config_alchemy_transfers_udfs(schema_name = \"alchemy_transfers\", utils_schema_name = \"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy transfers endpoints\n #}\n\n- name: {{ schema_name -}}.get_asset_transfers\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$The Transfers API allows you to easily fetch historical transactions for any address across Ethereum and supported L2s including Polygon, Arbitrum, and Optimism. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-getassettransfers).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getAssetTransfers\") | trim}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.alchemy_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2276225, "supported_languages": null}, "macro.livequery_models.config_alchemy_utils_udfs": {"name": "config_alchemy_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_utils_udfs", "macro_sql": "{% macro config_alchemy_utils_udfs(schema_name = \"alchemy_utils\", utils_schema_name=\"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy base endpoints\n #}\n\n- name: {{ schema -}}.nfts_get\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Alchemy NFT API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        concat(\n            'https://', NETWORK,'.g.alchemy.com/nft/v2/{',NETWORK,'}', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        '_FSC_SYS/ALCHEMY'\n    ) as response\n\n- name: {{ schema -}}.nfts_post\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Alchemy NFT API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://', NETWORK,'.g.alchemy.com/nft/v2/{',NETWORK,'}', PATH),\n        {},\n        BODY,\n        '_FSC_SYS/ALCHEMY'\n    ) as response\n\n- name: {{ schema -}}.rpc\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, ARRAY, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Alchemy.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      concat('https://', NETWORK,'.g.alchemy.com/v2/{',NETWORK,'}'),\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/ALCHEMY') as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2284305, "supported_languages": null}, "macro.livequery_models.config_topshot_udfs": {"name": "config_topshot_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/topshot/topshot.graphql.sql", "original_file_path": "macros/marketplace/topshot/topshot.graphql.sql", "unique_id": "macro.livequery_models.config_topshot_udfs", "macro_sql": "{% macro config_topshot_udfs(schema_name = \"topshot\", utils_schema_name = \"topshot_utils\") -%}\n{#\n    This macro is used to generate the Topshot calls\n #}\n\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Run a graphql query on TopShot.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://public-api.nbatopshot.com/graphql',\n        {'User-Agent': 'Flipside_Flow_metadata/0.1','Accept-Encoding': 'gzip', 'Content-Type': 'application/json', 'Accept': 'application/json','Connection': 'keep-alive'},\n        QUERY,\n        '_FSC_SYS/TOPSHOT'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.228853, "supported_languages": null}, "macro.livequery_models.config_binance_udfs": {"name": "config_binance_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/binance/udfs.yaml.sql", "original_file_path": "macros/marketplace/binance/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_binance_udfs", "macro_sql": "{% macro config_binance_udfs(schema_name = \"binance\", utils_schema_name=\"binance_utils\") -%}\n{#\n    This macro is used to generate the Binance Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The full url including the path]\n    - [QUERY_ARGS, ARRAY, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Binance API. [Binance docs here](https://binance-docs.github.io/apidocs/spot/en/#api-key-setup).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(URL, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-MBX-APIKEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/BINANCE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The full url]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Binance API. [Binance docs here](https://binance-docs.github.io/apidocs/spot/en/#api-key-setup).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {'X-MBX-APIKEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/BINANCE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.229441, "supported_languages": null}, "macro.livequery_models.config_zettablock_udfs": {"name": "config_zettablock_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/zettablock/udfs.yaml.sql", "original_file_path": "macros/marketplace/zettablock/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_zettablock_udfs", "macro_sql": "{% macro config_zettablock_udfs(schema_name = \"zettablock\", utils_schema_name=\"zettablock_utils\") -%}\n{#\n    This macro is used to generate the Zettablock Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Zettablock API. [Zettablock docs here](https://docs.zettablock.com/reference/api-intro).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.zettablock.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/ZETTABLOCK'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Zettablock API. [Zettablock docs here](https://docs.zettablock.com/reference/api-intro).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.zettablock.com', PATH),\n        {'Authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/ZETTABLOCK'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2300622, "supported_languages": null}, "macro.livequery_models.config_solscan_udfs": {"name": "config_solscan_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/solscan/udfs.yaml.sql", "original_file_path": "macros/marketplace/solscan/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_solscan_udfs", "macro_sql": "{% macro config_solscan_udfs(schema_name = \"solscan\", utils_schema_name=\"solscan_utils\") -%}\n{#\n    This macro is used to generate the Solscan Base endpoints\n #}\n\n- name: {{ schema_name -}}.pro_api_get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Private Solscan API. [Solscan docs here](https://pro-api.solscan.io/pro-api-docs/v1.0).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://pro-api.solscan.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'token': '{API_KEY}'},\n        {},\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.pro_api_post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Private Solscan API. [Solscan docs here](https://pro-api.solscan.io/pro-api-docs/v1.0).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://pro-api.solscan.io', PATH),\n        {'token': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.public_api_get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Public Solscan API. [Solscan docs here](https://public-api.solscan.io/docs/#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://public-api.solscan.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'token': '{API_KEY}'},\n        {},\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.public_api_post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Public Solscan API. [Solscan docs here](https://public-api.solscan.io/docs/#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://public-api.solscan.io', PATH),\n        {'token': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2311468, "supported_languages": null}, "macro.livequery_models.config_covalent_udfs": {"name": "config_covalent_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/covalent/udfs.yaml.sql", "original_file_path": "macros/marketplace/covalent/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_covalent_udfs", "macro_sql": "{% macro config_covalent_udfs(schema_name = \"covalent\", utils_schema_name=\"covalent_utils\") -%}\n{#\n    This macro is used to generate the Covalent Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Covalent API. [Covalent docs here](https://www.covalenthq.com/docs/unified-api/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.covalenthq.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/COVALENT'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Covalent API. [Covalent docs here](https://www.covalenthq.com/docs/unified-api/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.covalenthq.com', PATH),\n        {'Authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/COVALENT'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.231761, "supported_languages": null}, "macro.livequery_models.config_stakingrewards_udfs": {"name": "config_stakingrewards_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/stakingrewards/udfs.yaml.sql", "original_file_path": "macros/marketplace/stakingrewards/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_stakingrewards_udfs", "macro_sql": "{% macro config_stakingrewards_udfs(schema_name = \"stakingrewards\", utils_schema_name=\"stakingrewards_utils\") -%}\n{#\n    This macro is used to generate the StakingRewards Base endpoints\n #}\n\n- name: {{ schema_name -}}.query\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Graphql Query to the StakingRewards API. [StakingRewards docs here](https://api-docs.stakingrewards.com/api-docs/get-started/quick-start-guide).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://api.stakingrewards.com/public/query',\n        {'X-API-KEY': '{API_KEY}'},\n        QUERY,\n        '_FSC_SYS/STAKINGREWARDS'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.232175, "supported_languages": null}, "macro.livequery_models.config_nftscan_udfs": {"name": "config_nftscan_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/nftscan/udfs.yaml.sql", "original_file_path": "macros/marketplace/nftscan/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_nftscan_udfs", "macro_sql": "{% macro config_nftscan_udfs(schema_name = \"nftscan\", utils_schema_name=\"nftscan_utils\") -%}\n{#\n    This macro is used to generate the NFTScan Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The full url including the path]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the NFTScan API. [NFTScan docs here](https://docs.nftscan.com/guides/Overview/1).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(URL, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/NFTSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The full url]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the NFTScan API. [NFTScan docs here](https://docs.nftscan.com/guides/Overview/1).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/NFTSCAN'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2327673, "supported_languages": null}, "macro.livequery_models.config_playgrounds_udfs": {"name": "config_playgrounds_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/playgrounds/udfs.yaml.sql", "original_file_path": "macros/marketplace/playgrounds/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_playgrounds_udfs", "macro_sql": "{% macro config_playgrounds_udfs(schema_name = \"playgrounds\", utils_schema_name = \"playgrounds_utils\") -%}\n{#\n    This macro is used to generate the Playgrounds calls\n #}\n\n- name: {{ schema_name -}}.query_subgraph\n  signature:\n    - [SUBGRAPH_ID, STRING, The ID of the Subgraph]\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Query a subgraph via the Playgrounds Proxy [Playgrounds docs here](https://docs.playgrounds.network/api/subgraph-proxy/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.playgrounds.network/v1/proxy/subgraphs/id/', SUBGRAPH_ID),\n        {'Playgrounds-Api-Key': '{API_KEY}', 'Content-Type': 'application/json'},\n        QUERY,\n        '_FSC_SYS/PLAYGROUNDS'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2331944, "supported_languages": null}, "macro.livequery_models.config_blockpour_utils_udfs": {"name": "config_blockpour_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/blockpour/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/blockpour/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_blockpour_utils_udfs", "macro_sql": "{% macro config_blockpour_utils_udfs(schema_name = \"blockpour_utils\", utils_schema_name=\"blockpour_utils\") -%}\n{#\n    This macro is used to generate the Blockpour base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Blockpour API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://services.blockpour.com/api', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/BLOCKPOUR'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the BlockPour API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://services.blockpour.com/api', PATH),\n        {'api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/BLOCKPOUR'\n    ) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.233789, "supported_languages": null}, "macro.livequery_models.config_dapplooker_udfs": {"name": "config_dapplooker_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/dapplooker/udfs.yaml.sql", "original_file_path": "macros/marketplace/dapplooker/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_dapplooker_udfs", "macro_sql": "{% macro config_dapplooker_udfs(schema_name = \"dapplooker\", utils_schema_name = \"dapplooker_utils\") -%}\n{#\n    This macro is used to generate the DappLooker endpoints\n #}\n\n- name: {{ schema_name -}}.get_chart\n  signature:\n    - [CHART_ID, STRING, The UUID of the chart]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the chart data. [DappLooker docs here](https://github.com/dapplooker/dapplooker-sdk).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.dapplooker.com/chart/', CHART_ID, '?api_key={API_KEY}&output_format=json'),\n        {},\n        {},\n        '_FSC_SYS/DAPPLOOKER'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2343102, "supported_languages": null}, "macro.livequery_models.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.238852, "supported_languages": null}, "macro.livequery_models.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2390919, "supported_languages": null}, "macro.livequery_models.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for p in params -%}\n        {%- set name = p.0 -%}\n        {%- set data_type = p.1 -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {%- endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2397566, "supported_languages": null}, "macro.livequery_models.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.compile_signature", "macro.livequery_models.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2405179, "supported_languages": null}, "macro.livequery_models.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] if config [\"return_type\"] is string else config [\"return_type\"][0] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.create_sql_function", "macro.livequery_models.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2418764, "supported_languages": null}, "macro.livequery_models.crud_udfs": {"name": "crud_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_udfs", "macro_sql": "{% macro crud_udfs(config_func, schema, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given schema\n\n    config_func: function that returns a list of udf configs\n    drop_: whether to drop or create the udfs\n #}\n    {% set udfs = fromyaml(config_func())%}\n    {%- for udf in udfs -%}\n        {% if udf[\"name\"].split(\".\") | first == schema %}\n            CREATE SCHEMA IF NOT EXISTS {{ schema }};\n            {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.242546, "supported_languages": null}, "macro.livequery_models.crud_udfs_by_chain": {"name": "crud_udfs_by_chain", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_udfs_by_chain", "macro_sql": "{% macro crud_udfs_by_chain(config_func, blockchain, network, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given blockchain and network\n\n    config_func: function that returns a list of udf configs\n    blockchain: blockchain name\n    network: network name\n    drop_: whether to drop or create the udfs\n #}\n  {% set schema = blockchain if not network else blockchain ~ \"_\" ~ network %}\n    CREATE SCHEMA IF NOT EXISTS {{ schema }};\n    {%-  set configs = fromyaml(config_func(blockchain, network)) if network else fromyaml(config_func(schema, blockchain)) -%}\n    {%- for udf in configs -%}\n        {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2432923, "supported_languages": null}, "macro.livequery_models.crud_udfs_by_marketplace": {"name": "crud_udfs_by_marketplace", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_udfs_by_marketplace", "macro_sql": "{% macro crud_udfs_by_marketplace(config_func, schema, utility_schema, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given blockchain and network\n\n    config_func: function that returns a list of udf configs\n    schema: schema name\n    utility_schema: utility schema name\n #}\n    CREATE SCHEMA IF NOT EXISTS {{ schema }};\n    {%- set configs = fromyaml(config_func(schema, utility_schema)) if utility_schema else fromyaml(config_func(schema, schema)) -%}\n    {%- for udf in configs -%}\n        {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2439241, "supported_languages": null}, "macro.livequery_models.crud_marketplace_udfs": {"name": "crud_marketplace_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_marketplace_udfs", "macro_sql": "{% macro crud_marketplace_udfs(config_func, schemaName, base_api_schema_name, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given schema and api\n\n    config_func: function that returns a list of udf configs\n    schemaName: the target schema to build the udfs\n    base_api_schema_name: the schema that contains base api functions\n    drop_: whether to drop or create the udfs\n #}\n  {%-  set udfs = fromyaml(config_func(schemaName, base_api_schema_name)) -%}\n  {%- for udf in udfs -%}\n    {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n  {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2444026, "supported_languages": null}, "macro.livequery_models.ephemeral_deploy_core": {"name": "ephemeral_deploy_core", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.ephemeral_deploy_core", "macro_sql": "{% macro ephemeral_deploy_core(config) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {{- crud_udfs(config, this.schema, var(\"DROP_UDFS_AND_SPS\")) -}}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ apply_grants_by_schema(this.schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.crud_udfs", "macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2455444, "supported_languages": null}, "macro.livequery_models.ephemeral_deploy": {"name": "ephemeral_deploy", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.ephemeral_deploy", "macro_sql": "{% macro ephemeral_deploy(configs) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {%- set blockchain = this.schema -%}\n    {%- set network = this.identifier -%}\n    {% set schema = blockchain ~ \"_\" ~ network %}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {% for config in configs %}\n                {{- crud_udfs_by_chain(config, blockchain, network, var(\"DROP_UDFS_AND_SPS\")) -}}\n            {%- endfor -%}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ apply_grants_by_schema(schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.crud_udfs_by_chain", "macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2469516, "supported_languages": null}, "macro.livequery_models.ephemeral_deploy_marketplace": {"name": "ephemeral_deploy_marketplace", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.ephemeral_deploy_marketplace", "macro_sql": "{% macro ephemeral_deploy_marketplace(configs) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {%- set schema = this.schema -%}\n    {%- set utility_schema = this.identifier -%}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {% for config in configs %}\n                {{- crud_udfs_by_marketplace(config, schema, utility_schema, var(\"DROP_UDFS_AND_SPS\")) -}}\n            {%- endfor -%}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop marketplace udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy marketplace udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ apply_grants_by_schema(schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}", "depends_on": {"macros": ["macro.livequery_models.crud_udfs_by_marketplace", "macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2482767, "supported_languages": null}, "macro.livequery_models.create_udf_introspect": {"name": "create_udf_introspect", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/streamline_udfs.sql", "original_file_path": "macros/livequery/streamline_udfs.sql", "unique_id": "macro.livequery_models.create_udf_introspect", "macro_sql": "{% macro create_udf_introspect(\n        drop_ = False\n    ) %}\n    {% set name_ = 'silver.udf_introspect' %}\n    {% set signature = [('json', 'variant')] %}\n    {% set return_type = 'text' %}\n    {% set sql_ = construct_api_route(\"introspect\") %}\n    {% if not drop_ %}\n        {{ create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            api_integration = var(\"API_INTEGRATION\")\n        ) }}\n    {% else %}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.construct_api_route", "macro.livequery_models.create_sql_function", "macro.livequery_models.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2495017, "supported_languages": null}, "macro.livequery_models.sql_live_rpc_call": {"name": "sql_live_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/utils.sql", "original_file_path": "macros/livequery/utils.sql", "unique_id": "macro.livequery_models.sql_live_rpc_call", "macro_sql": "{% macro sql_live_rpc_call(method, params, blockchain, network) %}\n{#\n    Helper macro to call a JSON RPC method on a live node.\n\n    Parameters:\n        method (string): The JSON RPC method to call.\n        params (string): The JSON RPC parameters to pass to the method.\n        blockchain (string): The blockchain to call the method on.\n        network (string): The network to call the method on.\n    Returns:\n        string: The SQL to call the method.\n #}\n    WITH result as (\n        SELECT\n            live.udf_api(\n                '{endpoint}'\n                ,utils.udf_json_rpc_call({{ method }}, {{ params }})\n                ,concat_ws('/', 'integration', _utils.udf_provider(), {{ blockchain }}, {{ network }})\n            )::VARIANT:data AS data\n    )\n    SELECT\n        COALESCE(data:result, {'error':data:error})\n    FROM result\n{% endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2500234, "supported_languages": null}, "macro.livequery_models.create_aws_ethereum_api": {"name": "create_aws_ethereum_api", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/api_integrations.sql", "original_file_path": "macros/livequery/api_integrations.sql", "unique_id": "macro.livequery_models.create_aws_ethereum_api", "macro_sql": "{% macro create_aws_ethereum_api() %}\n    {% if target.name == \"prod\" %}\n        {% set sql %}\n        CREATE api integration IF NOT EXISTS aws_ethereum_api api_provider = aws_api_gateway api_aws_role_arn = 'arn:aws:iam::661245089684:role/snowflake-api-ethereum' api_allowed_prefixes = (\n            'https://e03pt6v501.execute-api.us-east-1.amazonaws.com/prod/',\n            'https://mryeusnrob.execute-api.us-east-1.amazonaws.com/dev/'\n        ) enabled = TRUE;\n{% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2505784, "supported_languages": null}, "macro.livequery_models.config_evm_rpc_primitives": {"name": "config_evm_rpc_primitives", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_primitives.yaml.sql", "original_file_path": "macros/evm/evm_primitives.yaml.sql", "unique_id": "macro.livequery_models.config_evm_rpc_primitives", "macro_sql": "{%- macro config_evm_rpc_primitives(blockchain, network) -%}\n{#-\n    Generates a set of UDFs that call the Ethereum JSON RPC API\n\n    - rpc: Executes an RPC call on the {{ blockchain }} blockchain\n    - eth_call: Executes a new message call immediately without creating a transaction on the block chain\n    - eth_getLogs: Returns an array of all logs matching filter with given address\n    - eth_getBalance: Returns the balance of the account of given address\n\n -#}\n{% set schema = blockchain ~ \"_\" ~ network -%}\n\n- name: {{ schema -}}.udf_rpc\n  signature:\n    - [method, STRING, RPC method to call]\n    - [parameters, VARIANT, Parameters to pass to the RPC method]\n  return_type: [VARIANT, The return value of the RPC method]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Executes an RPC call on the {{ blockchain }} blockchain.$$\n  sql: |\n    SELECT live.udf_rpc('{{ blockchain }}', '{{ network }}', method, parameters)\n\n- name: {{ schema -}}.udf_rpc_eth_call\n  signature:\n    - [transaction, OBJECT, The transaction object]\n    - [block_or_tag, STRING, The block number or tag to execute the call on]\n  return_type: [VARIANT, The return value of the executed contract code]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Executes a new message call immediately without creating a transaction on the block chain.$$\n  sql: |\n    SELECT {{ schema -}}.udf_rpc('eth_call', [transaction, block_or_tag])\n\n- name: {{ schema -}}.udf_rpc_eth_get_logs\n  signature:\n    - [filter, OBJECT, The filter object]\n  return_type: [VARIANT, An array of all logs matching filter with given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns an array of all logs matching filter with given address.$$\n  sql: |\n    SELECT {{ schema -}}.udf_rpc('eth_getLogs', [filter])\n\n- name: {{ schema -}}.udf_rpc_eth_get_balance\n  signature:\n    - [address, STRING, The address to get the balance of]\n    - [block_or_tag, STRING, The block number or tag to execute the call on]\n  return_type: [VARIANT, The balance of the account of given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the balance of the account of given address.$$\n  sql: |\n    SELECT {{ schema -}}.udf_rpc('eth_getBalance', [address, block_or_tag])\n\n- name: {{ schema -}}.udf_get_token_balance\n  signature:\n    - [wallet_address, STRING, The address to get the balance of]\n    - [token_address, STRING, The token to get the balance of]\n  return_type: [STRING, The balance of the account of given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the balance of the wallet of given token address at the latest block.$$\n  sql: |\n    SELECT utils.udf_hex_to_int({{ schema -}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))),'latest')::string)\n\n- name: {{ schema -}}.udf_get_token_balance\n  signature:\n    - [wallet_address, STRING, The address to get the balance of]\n    - [token_address, STRING, The token to get the balance of]\n    - [block_number, INTEGER, The block number to retrieve the balance at]\n  return_type: [STRING, The balance of the account of given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the balance of the wallet of given token address at the given block.$$\n  sql: |\n    SELECT utils.udf_hex_to_int({{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING)\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.2532828, "supported_languages": null}, "macro.livequery_models.evm_latest_native_balance_string": {"name": "evm_latest_native_balance_string", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_native_balance_string", "macro_sql": "{% macro evm_latest_native_balance_string(schema, blockchain, network) %}\nwith base as (select lower(wallet) AS wallet_address)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet_address,'latest')::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4463403, "supported_languages": null}, "macro.livequery_models.evm_latest_native_balance_array": {"name": "evm_latest_native_balance_array", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_native_balance_array", "macro_sql": "{% macro evm_latest_native_balance_array(schema, blockchain, network) %}\nWITH address_inputs AS (\n    SELECT wallets AS wallet_array\n),\nflat_addresses AS (\n    SELECT lower(value::string) AS wallet_address\n    FROM address_inputs a,\n    LATERAL FLATTEN(input => a.wallet_array)\n),\nnode_call AS (\n    SELECT wallet_address,\n    {{schema}}.udf_rpc_eth_get_balance(wallet_address,'latest')::string AS hex_balance\n    FROM flat_addresses\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int(hex_balance) AS raw_balance,\n    (raw_balance / POW(10,18))::FLOAT AS balance\nFROM node_call\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4467797, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_ss": {"name": "evm_latest_token_balance_ss", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_ss", "macro_sql": "{% macro evm_latest_token_balance_ss(schema, blockchain, network) %}\nWITH inputs AS (\n     SELECT\n        lower(token) AS token_address,\n        lower(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n),\nnode_call AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM node_call\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.44719, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_sa": {"name": "evm_latest_token_balance_sa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_sa", "macro_sql": "{% macro evm_latest_token_balance_sa(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT tokens, wallet\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS token_address,\n        lower(wallet::string) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN {{ ref('_evm__contracts_map') }} \n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4476264, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_as": {"name": "evm_latest_token_balance_as", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_as", "macro_sql": "{% macro evm_latest_token_balance_as(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT token, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS wallet_address,\n        lower(token::string) AS token_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => wallets)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN {{ ref('_evm__contracts_map') }} \n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4480362, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_aa": {"name": "evm_latest_token_balance_aa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_aa", "macro_sql": "{% macro evm_latest_token_balance_aa(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT tokens, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(tokens.VALUE::STRING) AS token_address,\n        lower(wallets.VALUE::STRING) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM\n        inputs,\n        LATERAL FLATTEN(input => tokens) tokens,\n        LATERAL FLATTEN(input => wallets) wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN {{ ref('_evm__contracts_map') }} \n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$') \n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4484742, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_ssi": {"name": "evm_historical_token_balance_ssi", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_ssi", "macro_sql": "{% macro evm_historical_token_balance_ssi(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data,\n        block_number\n), final AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4489017, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_ssa": {"name": "evm_historical_token_balance_ssa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_ssa", "macro_sql": "{% macro evm_historical_token_balance_ssa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4493308, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_asi": {"name": "evm_historical_token_balance_asi", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_asi", "macro_sql": "{% macro evm_historical_token_balance_asi(schema, blockchain, network) %}\nWITH wallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet, '0x', ''), 64, 0)\n        ) AS data\n    FROM wallets\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4499176, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_asa": {"name": "evm_historical_token_balance_asa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_asa", "macro_sql": "{% macro evm_historical_token_balance_asa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet, '0x', ''), 64, '0')\n        ) AS data\n    FROM wallets\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.450372, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_sai": {"name": "evm_historical_token_balance_sai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_sai", "macro_sql": "{% macro evm_historical_token_balance_sai(schema, blockchain, network) %}\nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4508212, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_saa": {"name": "evm_historical_token_balance_saa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_saa", "macro_sql": "{% macro evm_historical_token_balance_saa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4512718, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_aai": {"name": "evm_historical_token_balance_aai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_aai", "macro_sql": "{% macro evm_historical_token_balance_aai(schema, blockchain, network) %}\nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens,\n        wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4517307, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_aaa": {"name": "evm_historical_token_balance_aaa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_aaa", "macro_sql": "{% macro evm_historical_token_balance_aaa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        wallets,\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.452196, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_si": {"name": "evm_historical_native_balance_si", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_si", "macro_sql": "{% macro evm_historical_native_balance_si(schema, blockchain, network) %}\nwith base as (select lower(wallet) AS wallet_address, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))) as hex_block)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet_address,hex_block)::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base \nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4526064, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_sa": {"name": "evm_historical_native_balance_sa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_sa", "macro_sql": "{% macro evm_historical_native_balance_sa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM blocks\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.453016, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_ai": {"name": "evm_historical_native_balance_ai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_ai", "macro_sql": "{% macro evm_historical_native_balance_ai(schema, blockchain, network) %}\nWITH wallet_inputs AS (\n    SELECT wallets\n),\nflat_wallets AS (\n    SELECT lower(value::string) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM flat_wallets\n)\nSELECT\n    case \n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n    and is_integer(block_number)\n    then 'Success' \n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4534233, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_aa": {"name": "evm_historical_native_balance_aa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_aa", "macro_sql": "{% macro evm_historical_native_balance_aa(schema, blockchain, network) %}\n    WITH inputs AS (\n        SELECT wallets, block_numbers\n    ),\n    flat_wallets AS (\n        SELECT lower(wallet.value::STRING) AS wallet, block.value::INTEGER AS block_number\n        FROM inputs,\n        LATERAL FLATTEN(input => wallets) wallet,\n        LATERAL FLATTEN(input => block_numbers) block\n    ),\n    final AS (\n        SELECT\n            wallet AS wallet_address,\n            block_number,\n            utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n        FROM flat_wallets\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$') \n        and is_integer(block_number)\n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        wallet_address,\n        symbol,\n        block_number,\n        raw_balance,\n        (raw_balance::int / pow(10,18))::float as balance\n    FROM final\n    LEFT JOIN {{ ref('_evm__native_symbol_map') }}\n    on '{{blockchain}}' = blockchain\n    and '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4538631, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_s": {"name": "evm_latest_contract_events_s", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_s", "macro_sql": "{% macro evm_latest_contract_events_s(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4542406, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_si": {"name": "evm_latest_contract_events_si", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_si", "macro_sql": "{% macro evm_latest_contract_events_si(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        and is_integer(lookback)\n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4546342, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_a": {"name": "evm_latest_contract_events_a", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_a", "macro_sql": "{% macro evm_latest_contract_events_a(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM (\n            SELECT value::STRING AS address\n            FROM LATERAL FLATTEN(input => addresses)\n        ) inputs, chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.455018, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_ai": {"name": "evm_latest_contract_events_ai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_ai", "macro_sql": "{% macro evm_latest_contract_events_ai(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM (\n            SELECT value::STRING AS address\n            FROM LATERAL FLATTEN(input => addresses)\n        ) inputs, chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        and is_integer(lookback)\n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4554033, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_s": {"name": "evm_latest_contract_events_decoded_s", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_s", "macro_sql": "{% macro evm_latest_contract_events_decoded_s(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4560623, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_si": {"name": "evm_latest_contract_events_decoded_si", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_si", "macro_sql": "{% macro evm_latest_contract_events_decoded_si(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4567142, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_a": {"name": "evm_latest_contract_events_decoded_a", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_a", "macro_sql": "{% macro evm_latest_contract_events_decoded_a(schema, blockchain, network) %}\nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4573543, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_ai": {"name": "evm_latest_contract_events_decoded_ai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_ai", "macro_sql": "{% macro evm_latest_contract_events_decoded_ai(schema, blockchain, network) %}\nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4580195, "supported_languages": null}, "macro.livequery_models.evm_contract_events": {"name": "evm_contract_events", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_contract_events", "macro_sql": "{% macro evm_contract_events(schema, blockchain, network) %}\n WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 200, 'XXXXXXXXXX'))) AS from_block_hex,\n            utils.udf_hex_to_int(chainhead_hex) - 200 as min_block_no\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case \n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$') \n        then 'Success' \n        else 'Error - Invalid Input' \n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n    UNION ALL\n    SELECT\n        'Success' as status, \n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        topics as event_topics,\n        data as event_data\n    from {{ ref('_eth__logs') }}\n    where contract_address = (select contract_address from node_call)\n    and block_number >= min_block  \n    and block_number <= (select min_block_no from chainhead)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4585772, "supported_languages": null}, "macro.livequery_models.evm_contract_events_decoded": {"name": "evm_contract_events_decoded", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_contract_events_decoded", "macro_sql": "{% macro evm_contract_events_decoded(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 400, 'XXXXXXXXXX'))) AS from_block_hex,\n        utils.udf_hex_to_int(chainhead_hex) - 400 as min_block_no\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case \n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(min_block) then 'Success' \n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input' \n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\nunion all\nselect \n    'Success' as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    event_name,\n    contract_address,\n    topics as event_topics,\n    data as event_data,\n    decoded_log as decoded_data\nfrom {{ ref('_eth__decoded_logs') }}\n    where contract_address = (select contract_address from inputs)\n    and block_number >= min_block\n    and block_number <= (select min_block_no from chainhead)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.459362, "supported_languages": null}, "macro.livequery_models.config_evm_high_level_abstractions": {"name": "config_evm_high_level_abstractions", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm.yaml.sql", "original_file_path": "macros/evm/evm.yaml.sql", "unique_id": "macro.livequery_models.config_evm_high_level_abstractions", "macro_sql": "{% macro config_evm_high_level_abstractions(blockchain, network) -%}\n{#\n    This macro is used to generate the high level abstractions for an EVM\n    blockchain.\n #}\n{% set schema = blockchain ~ \"_\" ~ network %}\n- name: {{ schema -}}.tf_latest_native_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the latest block]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n    - |\n        The table has the following columns:\n        * `blockchain` - The blockchain\n        * `network` - The network\n        * `wallet_address` - The wallet address\n        * `symbol` - The symbol of the native asset\n        * `raw_balance` - The unadjusted native asset balance\n        * `balance` - The adjusted native asset balance\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balance at the latest block for a given address.$$\n  sql: |\n    {{ evm_latest_native_balance_string(schema,  blockchain, network) | indent(4) -}}\n  \n- name: {{ schema -}}.tf_latest_native_balance\n  signature:\n    - [wallets, ARRAY, An array of addresses string to get the balance of at the latest block]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances at the latest block for given addresses.$$\n  sql: |\n    {{ evm_latest_native_balance_array(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the latest block]\n    - [token, STRING, The address of the token to get the balance of] \n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balance at the latest block for a given address and token address. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_ss(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the latest block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of] \n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances at the latest block for a given address and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_sa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallets, ARRAY, An array of addresses string to get the balance of at the latest block]\n    - [token, STRING, The address of the token to get the balance of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances at the latest block for multiple addresses and a single token address. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_as(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallets, ARRAY, An array of addresses string to get the balance of at the latest block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of] \n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances at the latest block for multiple addresses and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_aa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [token, STRING, The address of the token to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balance for a given address and token address at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_ssi(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [token, STRING, The address of the token to get the balance of]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given address and token address at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_ssa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallets, ARRAY, The addresses to get the balance of at the input block]\n    - [token, STRING, The address of the token to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for multiple addresses and a given token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_asi(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given address and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_sai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given address and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_saa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_aai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_aaa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balance for a given address at a specific block.$$\n  sql: |\n    {{ evm_historical_native_balance_si(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances for a given address at multiple specific blocks.$$\n  sql: |\n    {{ evm_historical_native_balance_sa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances for multiple addresses at a specific block.$$\n  sql: |\n    {{ evm_historical_native_balance_ai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances for multiple addresses at multiple specific blocks.$$\n  sql: |\n    {{ evm_historical_native_balance_aa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [address, STRING, The address of the contract to get the events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by a contract in the last 100 blocks.$$\n  sql: |\n    {{ evm_latest_contract_events_s(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [address, STRING, The address of the contract to get the events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by a contract within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n  sql: |\n    {{ evm_latest_contract_events_si(schema,  blockchain, network) | indent(4) -}}\n  \n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by multiple contracts in the last 100 blocks.$$\n  sql: |\n    {{ evm_latest_contract_events_a(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by multiple contracts within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n  sql: |\n    {{ evm_latest_contract_events_ai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [address, STRING, The address of the contract to get the decoded events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$RReturns the latest decoded events emitted by a contract in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n  sql: |\n    {{ evm_latest_contract_events_decoded_s(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the decoded events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest decoded events emitted by multiple contracts in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n  sql: |\n    {{ evm_latest_contract_events_decoded_a(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [address, STRING, The address of the contract to get the decoded events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest decoded events emitted by a contract within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.*$$\n  sql: |\n    {{ evm_latest_contract_events_decoded_si(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the decoded events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest decoded events emitted by multiple contracts within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.* $$\n  sql: |\n    {{ evm_latest_contract_events_decoded_ai(schema,  blockchain, network) | indent(4) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.evm_latest_native_balance_string", "macro.livequery_models.evm_latest_native_balance_array", "macro.livequery_models.evm_latest_token_balance_ss", "macro.livequery_models.evm_latest_token_balance_sa", "macro.livequery_models.evm_latest_token_balance_as", "macro.livequery_models.evm_latest_token_balance_aa", "macro.livequery_models.evm_historical_token_balance_ssi", "macro.livequery_models.evm_historical_token_balance_ssa", "macro.livequery_models.evm_historical_token_balance_asi", "macro.livequery_models.evm_historical_token_balance_sai", "macro.livequery_models.evm_historical_token_balance_saa", "macro.livequery_models.evm_historical_token_balance_aai", "macro.livequery_models.evm_historical_token_balance_aaa", "macro.livequery_models.evm_historical_native_balance_si", "macro.livequery_models.evm_historical_native_balance_sa", "macro.livequery_models.evm_historical_native_balance_ai", "macro.livequery_models.evm_historical_native_balance_aa", "macro.livequery_models.evm_latest_contract_events_s", "macro.livequery_models.evm_latest_contract_events_si", "macro.livequery_models.evm_latest_contract_events_a", "macro.livequery_models.evm_latest_contract_events_ai", "macro.livequery_models.evm_latest_contract_events_decoded_s", "macro.livequery_models.evm_latest_contract_events_decoded_a", "macro.livequery_models.evm_latest_contract_events_decoded_si", "macro.livequery_models.evm_latest_contract_events_decoded_ai"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.491575, "supported_languages": null}, "macro.livequery_models.config_eth_high_level_abstractions": {"name": "config_eth_high_level_abstractions", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm.yaml.sql", "original_file_path": "macros/evm/evm.yaml.sql", "unique_id": "macro.livequery_models.config_eth_high_level_abstractions", "macro_sql": "{% macro config_eth_high_level_abstractions(blockchain, network) -%}\n{#\n    This macro is used to generate high level abstractions for Ethereum mainnet only.\n#}\n{% set schema = blockchain ~ \"_\" ~ network %}\n- name: {{ schema -}}.tf_all_contract_events\n  signature:\n    - [address, STRING, The address of the contracts to get the events of]\n    - [min_block, INTEGER, The minimum block number to get the events from]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the events emitted by a contract from a specific block to the latest block.$$\n  sql: |\n    {{ evm_contract_events(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_all_contract_events_decoded\n  signature:\n    - [address, STRING, The address of the contracts to get the events of]\n    - [min_block, INTEGER, The minimum block number to get the events from]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the decoded events emitted by a contract from a specific block to the latest block. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$  \n  sql: |\n    {{ evm_contract_events_decoded(schema,  blockchain, network) | indent(4) -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.livequery_models.evm_contract_events", "macro.livequery_models.evm_contract_events_decoded"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.492268, "supported_languages": null}, "macro.livequery_models.base_test_udf": {"name": "base_test_udf", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tests/udfs.sql", "original_file_path": "macros/tests/udfs.sql", "unique_id": "macro.livequery_models.base_test_udf", "macro_sql": "{% macro base_test_udf(model, udf, args, assertions) %}\n{#\n  Generates a test for a UDF.\n #}\n{% if execute %}\n    {%- set context -%}\n      SET LIVEQUERY_CONTEXT = '{\"userId\":\"{{ var(\"STUDIO_TEST_USER_ID\") }}\"}';\n    {%- endset -%}\n  {%- do run_query(context) -%}\n{%- endif -%}\n{%- set call -%}\n{{ target.database }}.{{ udf }}({{ args }})\n{%- endset -%}\n,\ntest AS\n(\n    SELECT\n        '{{ udf }}' AS test_name\n        ,[{{ args }}] as parameters\n        ,{{ call }} AS result\n)\n  {% for assertion in assertions %}\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $${{ assertion }}$$ AS assertion,\n    $${{ context ~ \"\\n\" }}SELECT {{ call ~ \"\\n\" }};$$ AS sql\n    FROM test\n    WHERE NOT {{ assertion }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif -%}\n  {%- endfor -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4937878, "supported_languages": null}, "macro.livequery_models.test_test_udf": {"name": "test_test_udf", "resource_type": "macro", "package_name": "livequery_models", "path": "tests/generic/test_udf.sql", "original_file_path": "tests/generic/test_udf.sql", "unique_id": "macro.livequery_models.test_test_udf", "macro_sql": "{% test test_udf(model, column_name, args, assertions) %}\n    {#\n        This is a generic test for UDFs.\n        The udfs are deployed using ephemeral models, so we need to\n        use the ephemeral model name to get the udf name.\n     #}\n    {%- set schema = model | replace(\"__dbt__cte__\", \"\") -%}\n    {%- set schema = schema.split(\"__\") | first -%}\n    {%- set udf = schema ~ \".\" ~ column_name -%}\n\n    {{ base_test_udf(model, udf, args, assertions) }}\n{% endtest %}", "depends_on": {"macros": ["macro.livequery_models.base_test_udf"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4945908, "supported_languages": null}, "macro.dbt_snowflake_query_tags.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.set_query_tag", "macro_sql": "{% macro set_query_tag(extra = {}) -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')(extra=extra)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4959323, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag(extra = {}) -%}\n    {# Get session level query tag #}\n    {% set original_query_tag = get_current_query_tag() %}\n    {% set original_query_tag_parsed = {} %}\n\n    {% if original_query_tag %}\n        {% if fromjson(original_query_tag) is mapping %}\n            {% set original_query_tag_parsed = fromjson(original_query_tag) %}\n        {% endif %}\n    {% endif %}\n\n    {# The env_vars_to_query_tag_list should contain an environment variables list to construct query tag dict #}\n    {% set env_var_query_tags = {} %}\n    {% if var('env_vars_to_query_tag_list', '') %} {# Get a list of env vars from env_vars_to_query_tag_list variable to add additional query tags #}\n        {% for k in var('env_vars_to_query_tag_list') %}\n            {% set v = env_var(k, '') %}\n            {% do env_var_query_tags.update({k.lower(): v}) if v %}\n        {% endfor %}\n    {% endif %}\n\n    {# Start with any model-configured dict #}\n    {% set query_tag = config.get('query_tag', default={}) %}\n\n    {% if query_tag is not mapping %}\n    {% do log(\"dbt-snowflake-query-tags warning: the query_tag config value of '{}' is not a mapping type, so is being ignored. If you'd like to add additional query tag information, use a mapping type instead, or remove it to avoid this message.\".format(query_tag), True) %}\n    {% set query_tag = {} %} {# If the user has set the query tag config as a non mapping type, start fresh #}\n    {% endif %}\n\n    {% do query_tag.update(original_query_tag_parsed) %}\n    {% do query_tag.update(env_var_query_tags) %}\n    {% do query_tag.update(extra) %}\n\n    {%- do query_tag.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n    ) -%}\n\n    {% if thread_id %}\n        {%- do query_tag.update(\n            thread_id=thread_id\n        ) -%}\n    {% endif %}\n\n\n    {# We have to bring is_incremental through here because its not available in the comment context #}\n    {% if model.resource_type == 'model' %}\n        {%- do query_tag.update(\n            is_incremental=is_incremental()\n        ) -%}\n    {% endif %}\n\n    {% set query_tag_json = tojson(query_tag) %}\n    {{ log(\"Setting query_tag to '\" ~ query_tag_json ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(query_tag_json)) %}\n    {{ return(original_query_tag)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.is_incremental", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4986246, "supported_languages": null}, "macro.dbt_snowflake_query_tags.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.498912, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__unset_query_tag": {"name": "default__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__unset_query_tag", "macro_sql": "{% macro default__unset_query_tag(original_query_tag) -%}\n    {% if original_query_tag %}\n    {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n    {{ log(\"No original query_tag, unsetting parameter.\") }}\n    {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.4994695, "supported_languages": null}, "macro.dbt_snowflake_query_tags.get_query_comment": {"name": "get_query_comment", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_comment.sql", "original_file_path": "macros/query_comment.sql", "unique_id": "macro.dbt_snowflake_query_tags.get_query_comment", "macro_sql": "{% macro get_query_comment(node, extra = {}) %}\n    {%- set comment_dict = extra -%}\n    {%- do comment_dict.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n        dbt_version=dbt_version,\n        project_name=project_name,\n        target_name=target.name,\n        target_database=target.database,\n        target_schema=target.schema,\n        invocation_id=invocation_id,\n        run_started_at=run_started_at.astimezone(modules.pytz.utc).isoformat(),\n        full_refresh=flags.FULL_REFRESH,\n        which=flags.WHICH,\n    ) -%}\n\n    {%- if node is not none -%}\n        {%- do comment_dict.update(\n            node_name=node.name,\n            node_alias=node.alias,\n            node_package_name=node.package_name,\n            node_original_file_path=node.original_file_path,\n            node_database=node.database,\n            node_schema=node.schema,\n            node_id=node.unique_id,\n            node_resource_type=node.resource_type,\n            node_meta=node.config.meta,\n            node_tags=node.tags,\n        ) -%}\n\n        {%- if flags.INVOCATION_COMMAND -%}\n            {%- do comment_dict.update(\n                invocation_command=flags.INVOCATION_COMMAND\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.resource_type != ('seed') -%} {# Otherwise this throws an error saying 'Seeds cannot depend on other nodes.' #}\n            {%- if node.refs is defined -%}\n                {% set refs = [] %}\n                {% for ref in node.refs %}\n                    {%- if dbt_version >= '1.5.0' -%}\n                        {%- do refs.append(ref.name) -%}\n                    {%- else -%}\n                        {%- do refs.append(ref[0]) -%}\n                    {%- endif -%}\n                {% endfor %}\n                {%- do comment_dict.update(\n                    node_refs=refs | unique | list\n                ) -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if node.resource_type == 'model' -%}\n            {%- do comment_dict.update(\n                materialized=node.config.materialized,\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.raw_code is not none and local_md5 -%}\n            {%- do comment_dict.update({\n                \"raw_code_hash\": local_md5(node.raw_code)\n            }) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_PROJECT_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_project_id=env_var('DBT_CLOUD_PROJECT_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_JOB_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_job_id=env_var('DBT_CLOUD_JOB_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_id=env_var('DBT_CLOUD_RUN_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON_CATEGORY', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason_category=env_var('DBT_CLOUD_RUN_REASON_CATEGORY')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason=env_var('DBT_CLOUD_RUN_REASON')\n        ) -%}\n    {%- endif -%}\n\n    {{ return(tojson(comment_dict)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5051875, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5055995, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5058086, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5128407, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5132437, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.513463, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.513858, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5140636, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5144286, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5146432, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5149803, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5151572, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5192788, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5205245, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5236366, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5241296, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.525796, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.526787, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5270684, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5273325, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.527792, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_table": {"name": "sqlserver__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5300257, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"name": "sqlserver__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5313082, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__dropif": {"name": "sqlserver__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5318878, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5354822, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5369666, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5392232, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5429332, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5438147, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.546056, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5472832, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5483186, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5504358, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5571234, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5582538, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5598028, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5603044, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5606124, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.560874, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5632546, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.563721, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5639534, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5653439, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5656607, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.566099, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5662222, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5663419, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5665226, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.566663, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.566786, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.567399, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5677319, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5680463, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.568472, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.568641, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.568801, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.568957, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5693548, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.569764, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5704386, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.570582, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5707011, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5708191, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5710588, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.571178, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5712953, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5714126, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5727494, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5731714, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5741124, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5744765, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5746417, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5814564, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5822816, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5829837, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5848584, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5864732, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5875742, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5882237, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5891104, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.590178, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.591461, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5930033, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5933685, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5951924, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5971386, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5977604, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.5990362, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.599683, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6003022, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.600642, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6025965, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6055045, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.606364, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6084256, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.610097, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6110663, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6123269, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6136358, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6149068, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6161103, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6173997, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.618522, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6193774, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6204863, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6216154, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6227868, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6238818, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.624738, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.626725, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6272883, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.628387, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6295328, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6318521, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6330237, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6340828, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6351018, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.636798, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6374052, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.639387, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6399388, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6408498, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6412735, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.642838, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6437585, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6443195, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.645999, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6473956, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.649038, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6499436, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6532686, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6549635, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.656724, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.658096, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6587858, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.660196, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.66084, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.662331, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6628034, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6635191, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6691046, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.669931, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6721227, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6776612, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6788547, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6796896, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6804304, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6814208, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6828735, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.684309, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.685862, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6868553, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6876192, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6887286, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6891005, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6898208, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6913009, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6928804, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6935577, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6942027, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6949363, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6953726, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.695871, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.696379, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.697053, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6984565, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.6995904, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7006845, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7114058, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.714668, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7181673, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7190678, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7193732, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7197073, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7200098, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7203138, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.720652, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.72097, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7214003, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7216227, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7218251, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.722147, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7225106, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7230105, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7235205, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7240453, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7245264, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7247448, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7249587, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7252297, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7255971, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7263582, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.726676, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7268925, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7271008, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7273219, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.727611, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7294118, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.729825, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7302194, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7309418, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7315364, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7339423, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7343903, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7350183, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7354705, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7361023, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7366648, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.736936, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.737293, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7379801, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7382808, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.738597, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7388983, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7392063, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7395198, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7401195, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.740399, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7406452, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7410214, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7416286, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7419512, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7422323, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7429092, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7433584, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.743594, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.743805, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7443216, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7446554, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7449224, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.745639, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7458746, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7460852, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7462952, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7465196, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7478483, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7481527, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7483854, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7486494, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7489989, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7492733, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7496412, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7500825, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7503045, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7505333, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7507024, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7513828, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7516253, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7520673, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7524571, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7527313, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7529967, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7537932, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7540002, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7542975, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7546158, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.756826, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7576985, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7589483, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.759918, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7608075, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7611456, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.761693, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.762847, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7634645, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7637463, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1753463693.7645245, "supported_languages": null}}, "docs": {"doc.aleo_models.finalize_msg": {"name": "finalize_msg", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/finalize_msg.md", "original_file_path": "models/descriptions/finalize_msg.md", "unique_id": "doc.aleo_models.finalize_msg", "block_contents": "The finalize message data associated with the transaction."}, "doc.aleo_models.inserted_timestamp": {"name": "inserted_timestamp", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/inserted_timestamp.md", "original_file_path": "models/descriptions/inserted_timestamp.md", "unique_id": "doc.aleo_models.inserted_timestamp", "block_contents": "The utc timestamp at which the row was inserted into the table."}, "doc.aleo_models.pk": {"name": "pk", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/pk.md", "original_file_path": "models/descriptions/pk.md", "unique_id": "doc.aleo_models.pk", "block_contents": "The unique identifier for each row in the table."}, "doc.aleo_models.network_id": {"name": "network_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/network_id.md", "original_file_path": "models/descriptions/network_id.md", "unique_id": "doc.aleo_models.network_id", "block_contents": "The network id corresponding to this block."}, "doc.aleo_models.program_id": {"name": "program_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/program_id.md", "original_file_path": "models/descriptions/program_id.md", "unique_id": "doc.aleo_models.program_id", "block_contents": "The identifier of the program associated with this transition."}, "doc.aleo_models.fee_transition_program": {"name": "fee_transition_program", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_transition_program.md", "original_file_path": "models/descriptions/fee_transition_program.md", "unique_id": "doc.aleo_models.fee_transition_program", "block_contents": "The program associated with the fee transition."}, "doc.aleo_models.puzzle_solutions": {"name": "puzzle_solutions", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/puzzle_solutions.md", "original_file_path": "models/descriptions/puzzle_solutions.md", "unique_id": "doc.aleo_models.puzzle_solutions", "block_contents": "Puzzle solutions for a given proving round."}, "doc.aleo_models.block_id": {"name": "block_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/block_id.md", "original_file_path": "models/descriptions/block_id.md", "unique_id": "doc.aleo_models.block_id", "block_contents": "The block height the block was recorded at."}, "doc.aleo_models.owner_msg": {"name": "owner_msg", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/owner_msg.md", "original_file_path": "models/descriptions/owner_msg.md", "unique_id": "doc.aleo_models.owner_msg", "block_contents": "The owner message data associated with the transaction."}, "doc.aleo_models.author": {"name": "author", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/author.md", "original_file_path": "models/descriptions/author.md", "unique_id": "doc.aleo_models.author", "block_contents": "The author of the block round, transition, or batch type object."}, "doc.aleo_models.deployment_msg": {"name": "deployment_msg", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/deployment_msg.md", "original_file_path": "models/descriptions/deployment_msg.md", "unique_id": "doc.aleo_models.deployment_msg", "block_contents": "The deployment message data associated with the transaction."}, "doc.aleo_models.mappings": {"name": "mappings", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/mappings.md", "original_file_path": "models/descriptions/mappings.md", "unique_id": "doc.aleo_models.mappings", "block_contents": "Additional mappings or metadata associated with the program."}, "doc.aleo_models.fee_proof": {"name": "fee_proof", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_proof.md", "original_file_path": "models/descriptions/fee_proof.md", "unique_id": "doc.aleo_models.fee_proof", "block_contents": "The proof associated with the fee transaction."}, "doc.aleo_models.tx_type": {"name": "tx_type", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/tx_type.md", "original_file_path": "models/descriptions/tx_type.md", "unique_id": "doc.aleo_models.tx_type", "block_contents": "The type of the transaction (e.g., 'execute', 'deploy', 'fee'.)"}, "doc.aleo_models.tx_index": {"name": "tx_index", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/tx_index.md", "original_file_path": "models/descriptions/tx_index.md", "unique_id": "doc.aleo_models.tx_index", "block_contents": "The index of the transaction within the block"}, "doc.aleo_models.tx_succeeded": {"name": "tx_succeeded", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/tx_succeeded.md", "original_file_path": "models/descriptions/tx_succeeded.md", "unique_id": "doc.aleo_models.tx_succeeded", "block_contents": "The boolean status of the transaction. If the transaction was successful, this value will be `true`. If the transaction was unsuccessful, this value will be `false`."}, "doc.aleo_models.verifying_keys": {"name": "verifying_keys", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/verifying_keys.md", "original_file_path": "models/descriptions/verifying_keys.md", "unique_id": "doc.aleo_models.verifying_keys", "block_contents": "The verifying keys associated with the program, used for cryptographic verification."}, "doc.aleo_models.fee_transition_function": {"name": "fee_transition_function", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_transition_function.md", "original_file_path": "models/descriptions/fee_transition_function.md", "unique_id": "doc.aleo_models.fee_transition_function", "block_contents": "The function that is used to calculate the fee for a transition."}, "doc.aleo_models.fee_msg": {"name": "fee_msg", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_msg.md", "original_file_path": "models/descriptions/fee_msg.md", "unique_id": "doc.aleo_models.fee_msg", "block_contents": "The fee message data associated with the transaction."}, "doc.aleo_models.fee": {"name": "fee", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee.md", "original_file_path": "models/descriptions/fee.md", "unique_id": "doc.aleo_models.fee", "block_contents": "The native-unit fee value from the transaction."}, "doc.aleo_models.address": {"name": "address", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/address.md", "original_file_path": "models/descriptions/address.md", "unique_id": "doc.aleo_models.address", "block_contents": "The unique address referring to an entity on the blockchain."}, "doc.aleo_models.block_reward": {"name": "block_reward", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/block_reward.md", "original_file_path": "models/descriptions/block_reward.md", "unique_id": "doc.aleo_models.block_reward", "block_contents": "The total coinbase reward issued to the network for each block."}, "doc.aleo_models.tx_transition_count": {"name": "tx_transition_count", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/tx_transition_count.md", "original_file_path": "models/descriptions/tx_transition_count.md", "unique_id": "doc.aleo_models.tx_transition_count", "block_contents": "The number of transitions in the transaction."}, "doc.aleo_models.cumulative_proof_target": {"name": "cumulative_proof_target", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/cumulative_proof_target.md", "original_file_path": "models/descriptions/cumulative_proof_target.md", "unique_id": "doc.aleo_models.cumulative_proof_target", "block_contents": "The cumulative proof target for this block"}, "doc.aleo_models.rejected_msg": {"name": "rejected_msg", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/rejected_msg.md", "original_file_path": "models/descriptions/rejected_msg.md", "unique_id": "doc.aleo_models.rejected_msg", "block_contents": "The rejected message data associated with the transaction."}, "doc.aleo_models.previous_hash": {"name": "previous_hash", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/previous_hash.md", "original_file_path": "models/descriptions/previous_hash.md", "unique_id": "doc.aleo_models.previous_hash", "block_contents": "The hash of the previous block"}, "doc.aleo_models.fee_global_state_root": {"name": "fee_global_state_root", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_global_state_root.md", "original_file_path": "models/descriptions/fee_global_state_root.md", "unique_id": "doc.aleo_models.fee_global_state_root", "block_contents": "The global state root for the fee transaction."}, "doc.aleo_models.block_hash": {"name": "block_hash", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/block_hash.md", "original_file_path": "models/descriptions/block_hash.md", "unique_id": "doc.aleo_models.block_hash", "block_contents": "The hash of the block"}, "doc.aleo_models.fee_raw": {"name": "fee_raw", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_raw.md", "original_file_path": "models/descriptions/fee_raw.md", "unique_id": "doc.aleo_models.fee_raw", "block_contents": "The raw fee value from the transaction."}, "doc.aleo_models.transfer_type": {"name": "transfer_type", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/transfer_type.md", "original_file_path": "models/descriptions/transfer_type.md", "unique_id": "doc.aleo_models.transfer_type", "block_contents": "The type of transfer, namely public or private."}, "doc.aleo_models.block_timestamp": {"name": "block_timestamp", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "unique_id": "doc.aleo_models.block_timestamp", "block_contents": "The timestamp at which the block began."}, "doc.aleo_models.cumulative_weight": {"name": "cumulative_weight", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/cumulative_weight.md", "original_file_path": "models/descriptions/cumulative_weight.md", "unique_id": "doc.aleo_models.cumulative_weight", "block_contents": "The cumulative weight for this block"}, "doc.aleo_models.tx_data": {"name": "tx_data", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/tx_data.md", "original_file_path": "models/descriptions/tx_data.md", "unique_id": "doc.aleo_models.tx_data", "block_contents": "The main transaction data, which varies based on the transaction type."}, "doc.aleo_models.deployment_block_id": {"name": "deployment_block_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/deployment_block_id.md", "original_file_path": "models/descriptions/deployment_block_id.md", "unique_id": "doc.aleo_models.deployment_block_id", "block_contents": "The ID of the block in which this program was deployed."}, "doc.aleo_models.transition_function": {"name": "transition_function", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/transition_function.md", "original_file_path": "models/descriptions/transition_function.md", "unique_id": "doc.aleo_models.transition_function", "block_contents": "The function executed in this transition."}, "doc.aleo_models.succeeded": {"name": "succeeded", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/succeeded.md", "original_file_path": "models/descriptions/succeeded.md", "unique_id": "doc.aleo_models.succeeded", "block_contents": "A boolean value indicating if the event succeeded."}, "doc.aleo_models.deployment_block_timestamp": {"name": "deployment_block_timestamp", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/deployment_block_timestamp.md", "original_file_path": "models/descriptions/deployment_block_timestamp.md", "unique_id": "doc.aleo_models.deployment_block_timestamp", "block_contents": "The timestamp of the block in which this program was deployed."}, "doc.aleo_models.transactions": {"name": "transactions", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/transactions.md", "original_file_path": "models/descriptions/transactions.md", "unique_id": "doc.aleo_models.transactions", "block_contents": "Transactions for a given block."}, "doc.aleo_models.transition_inputs": {"name": "transition_inputs", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/transition_inputs.md", "original_file_path": "models/descriptions/transition_inputs.md", "unique_id": "doc.aleo_models.transition_inputs", "block_contents": "The input parameters or data for this transition."}, "doc.aleo_models.transition_outputs": {"name": "transition_outputs", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/transition_outputs.md", "original_file_path": "models/descriptions/transition_outputs.md", "unique_id": "doc.aleo_models.transition_outputs", "block_contents": "The output results or data from this transition."}, "doc.aleo_models.coinbase_target": {"name": "coinbase_target", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/coinbase_target.md", "original_file_path": "models/descriptions/coinbase_target.md", "unique_id": "doc.aleo_models.coinbase_target", "block_contents": "The coinbase target for this block"}, "doc.aleo_models.fee_transition_inputs": {"name": "fee_transition_inputs", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_transition_inputs.md", "original_file_path": "models/descriptions/fee_transition_inputs.md", "unique_id": "doc.aleo_models.fee_transition_inputs", "block_contents": "The inputs for the fee transition."}, "doc.aleo_models.program": {"name": "program", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/program.md", "original_file_path": "models/descriptions/program.md", "unique_id": "doc.aleo_models.program", "block_contents": "The full program code as a string."}, "doc.aleo_models.fee_payer": {"name": "fee_payer", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_payer.md", "original_file_path": "models/descriptions/fee_payer.md", "unique_id": "doc.aleo_models.fee_payer", "block_contents": "The account that paid the fee for the transaction."}, "doc.aleo_models.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/__overview__.md", "original_file_path": "models/descriptions/__overview__.md", "unique_id": "doc.aleo_models.__overview__", "block_contents": "# Welcome to the Flipside Crypto aleo Models Documentation\n\n## **What does this documentation cover?**\nThe documentation included here details the design of Aleo tables and views available via [Flipside Crypto.](https://flipsidecrypto.xyz/) For more information on how these models are built, please see [the github repository.](https://github.com/flipsideCrypto/aleo-models/)\n\n## **How do I use these docs?**\nThe easiest way to navigate this documentation is to use the Quick Links below. These links will take you to the documentation for each table, which contains a description, a list of the columns, and other helpful information.\n\nIf you are experienced with dbt docs, feel free to use the sidebar to navigate the documentation, as well as explore the relationships between tables and the logic building them.\n\nThere is more information on how to use dbt docs in the last section of this document.\n\n## **Quick Links to Table Documentation**\n\n**Click on the links below to jump to the documentation for each schema.**\n\n### Core Tables (`aleo`.`CORE`.`<table_name>`)\n\n**Dimension Tables:**\n- [core.dim_labels](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.core__dim_labels)\n- [core.dim_programs](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.core__dim_programs)\n- [core.dim_token_registrations](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.core__dim_token_registrations)\n\n**Fact Tables:**\n- [core.fact_block_round_batches](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.core__fact_block_round_batches)\n- [core.fact_block_solutions](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.core__fact_block_solutions)\n- [core.fact_blocks](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.core__fact_blocks)\n- [core.fact_transactions](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.core__fact_transactions)\n- [core.fact_transitions](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.core__fact_transitions)\n- [core.fact_transfers](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.core__fact_transfers)\n\n### DeFi Tables (`aleo`.`DEFI`.`<table_name>`)\n\n**Fact Tables:**\n- [defi.fact_swaps](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.defi__fact_swaps)\n- [defi.fact_liquidity_actions](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.defi__fact_liquidity_actions)\n\n### Price Tables (`aleo`.`PRICE`.`<table_name>`)\n\n**Dimension Tables:**\n- [price.dim_asset_metadata](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.price__dim_asset_metadata)\n\n**Fact Tables:**\n- [price.fact_prices_ohlc_hourly](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.price__fact_prices_ohlc_hourly)\n\n**Convenience Tables:**\n- [price.ez_asset_metadata](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.price__ez_asset_metadata)\n- [price.ez_prices_hourly](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.price__ez_prices_hourly)\n\n### Stats Tables (`aleo`.`STATS`.`<table_name>`)\n\n- [stats.ez_core_metrics_hourly](https://flipsidecrypto.github.io/aleo-models/#!/model/model.aleo_models.stats__ez_core_metrics_hourly)\n\n## **Data Model Overview**\n\nThese Aleo models are built a few different ways, but the core fact tables are built using three layers of sql models: **bronze, silver, and gold (or core).**\n\n- Bronze: Data is loaded in from the source as a view\n- Silver: All necessary parsing, filtering, de-duping, and other transformations are done here\n- Gold (or core): Final views and tables that are available publicly\n\nThe dimension tables are sourced from a variety of on-chain and off-chain sources.\n\nConvenience views (denoted ez_) are a combination of different fact and dimension tables. These views are built to make it easier to query the data.\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/aleo-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}, "doc.aleo_models.tx_id": {"name": "tx_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "unique_id": "doc.aleo_models.tx_id", "block_contents": "The unique identifier for the transaction."}, "doc.aleo_models.proving_round": {"name": "proving_round", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/proving_round.md", "original_file_path": "models/descriptions/proving_round.md", "unique_id": "doc.aleo_models.proving_round", "block_contents": "The round in which crpytographic proofs were provided for a given block."}, "doc.aleo_models.execution_msg": {"name": "execution_msg", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/execution_msg.md", "original_file_path": "models/descriptions/execution_msg.md", "unique_id": "doc.aleo_models.execution_msg", "block_contents": "The execution message data associated with the transaction."}, "doc.aleo_models.tx_count": {"name": "tx_count", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/tx_count.md", "original_file_path": "models/descriptions/tx_count.md", "unique_id": "doc.aleo_models.tx_count", "block_contents": "The number of transactions in a given block."}, "doc.aleo_models.puzzle_reward": {"name": "puzzle_reward", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/puzzle_reward.md", "original_file_path": "models/descriptions/puzzle_reward.md", "unique_id": "doc.aleo_models.puzzle_reward", "block_contents": "The total coinbase reward issued to the network for each block."}, "doc.aleo_models.transition_id": {"name": "transition_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/transition_id.md", "original_file_path": "models/descriptions/transition_id.md", "unique_id": "doc.aleo_models.transition_id", "block_contents": "The unique identifier for this specific transition within the transaction."}, "doc.aleo_models.solution_id": {"name": "solution_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/solution_id.md", "original_file_path": "models/descriptions/solution_id.md", "unique_id": "doc.aleo_models.solution_id", "block_contents": "A unique identifier for the prover solution."}, "doc.aleo_models.prover_rounds": {"name": "prover_rounds", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prover_rounds.md", "original_file_path": "models/descriptions/prover_rounds.md", "unique_id": "doc.aleo_models.prover_rounds", "block_contents": "Blocks during which provers compete to generate cryptographic proofs and solve puzzles in order to earn rewards."}, "doc.aleo_models.edition": {"name": "edition", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/edition.md", "original_file_path": "models/descriptions/edition.md", "unique_id": "doc.aleo_models.edition", "block_contents": "The edition number of the program."}, "doc.aleo_models.round": {"name": "round", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/round.md", "original_file_path": "models/descriptions/round.md", "unique_id": "doc.aleo_models.round", "block_contents": "Prover round data associated with the transaction."}, "doc.aleo_models.tx_transitions": {"name": "tx_transitions", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/tx_transitions.md", "original_file_path": "models/descriptions/tx_transitions.md", "unique_id": "doc.aleo_models.tx_transitions", "block_contents": "The transitions data for the transaction."}, "doc.aleo_models.batch_id": {"name": "batch_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/batch_id.md", "original_file_path": "models/descriptions/batch_id.md", "unique_id": "doc.aleo_models.batch_id", "block_contents": "Batch ID associated with the transaction."}, "doc.aleo_models.fee_transition_outputs": {"name": "fee_transition_outputs", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_transition_outputs.md", "original_file_path": "models/descriptions/fee_transition_outputs.md", "unique_id": "doc.aleo_models.fee_transition_outputs", "block_contents": "The outputs of the fee transition."}, "doc.aleo_models.prices_dim_asset_metadata_table_doc": {"name": "prices_dim_asset_metadata_table_doc", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_dim_asset_metadata_table_doc", "block_contents": "A comprehensive dimensional table holding asset metadata and other relevant details pertaining to each id, from multiple providers. This data set includes raw, non-transformed data coming directly from the provider APIs and rows are not intended to be unique. As a result, there may be data quality issues persisting in the APIs that flow through to this dimensional model. If you are interested in using a curated data set instead, please utilize ez_asset_metadata."}, "doc.aleo_models.prices_ez_asset_metadata_table_doc": {"name": "prices_ez_asset_metadata_table_doc", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_ez_asset_metadata_table_doc", "block_contents": "A convenience table holding prioritized asset metadata and other relevant details pertaining to each token_address and native asset. This data set is highly curated and contains metadata for one unique asset per blockchain."}, "doc.aleo_models.prices_fact_prices_ohlc_hourly_table_doc": {"name": "prices_fact_prices_ohlc_hourly_table_doc", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_fact_prices_ohlc_hourly_table_doc", "block_contents": "A comprehensive fact table holding id and provider specific open, high, low, close hourly prices, from multiple providers. This data set includes raw, non-transformed data coming directly from the provider APIs and rows are not intended to be unique. As a result, there may be data quality issues persisting in the APIs that flow through to this fact based model. If you are interested in using a curated data set instead, please utilize ez_prices_hourly."}, "doc.aleo_models.prices_ez_prices_hourly_table_doc": {"name": "prices_ez_prices_hourly_table_doc", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_ez_prices_hourly_table_doc", "block_contents": "A convenience table for determining token prices by address and blockchain, and native asset prices by symbol and blockchain. This data set is highly curated and contains metadata for one price per hour per unique asset and blockchain."}, "doc.aleo_models.prices_provider": {"name": "prices_provider", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_provider", "block_contents": "The provider or source of the data."}, "doc.aleo_models.prices_asset_id": {"name": "prices_asset_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_asset_id", "block_contents": "The unique identifier representing the asset."}, "doc.aleo_models.prices_name": {"name": "prices_name", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_name", "block_contents": "The name of asset."}, "doc.aleo_models.prices_symbol": {"name": "prices_symbol", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_symbol", "block_contents": "The symbol of asset."}, "doc.aleo_models.prices_token_address": {"name": "prices_token_address", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_token_address", "block_contents": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset."}, "doc.aleo_models.prices_token_address_evm": {"name": "prices_token_address_evm", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_token_address_evm", "block_contents": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset. The case (upper / lower) may or may not be specified within the `dim_asset_metadata` table, as this column is raw and not transformed, coming directly from the provider APIs. However, in the `ez_` views, it will be lowercase by default for all EVMs."}, "doc.aleo_models.prices_blockchain": {"name": "prices_blockchain", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_blockchain", "block_contents": "The Blockchain, Network, or Platform for this asset."}, "doc.aleo_models.prices_blockchain_id": {"name": "prices_blockchain_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_blockchain_id", "block_contents": "The unique identifier of the Blockchain, Network, or Platform for this asset."}, "doc.aleo_models.prices_decimals": {"name": "prices_decimals", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_decimals", "block_contents": "The number of decimals for the asset. May be NULL."}, "doc.aleo_models.prices_is_native": {"name": "prices_is_native", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_is_native", "block_contents": "A flag indicating assets native to the respective blockchain."}, "doc.aleo_models.prices_is_deprecated": {"name": "prices_is_deprecated", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_is_deprecated", "block_contents": "A flag indicating if the asset is deprecated or no longer supported by the provider."}, "doc.aleo_models.prices_id_deprecation": {"name": "prices_id_deprecation", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_id_deprecation", "block_contents": "Deprecating soon! Please use the `asset_id` column instead."}, "doc.aleo_models.prices_decimals_deprecation": {"name": "prices_decimals_deprecation", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_decimals_deprecation", "block_contents": "Deprecating soon! Please use the decimals column in `ez_asset_metadata` or join in `dim_contracts` instead."}, "doc.aleo_models.prices_hour": {"name": "prices_hour", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_hour", "block_contents": "Hour that the price was recorded at."}, "doc.aleo_models.prices_price": {"name": "prices_price", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_price", "block_contents": "Closing price of the recorded hour in USD."}, "doc.aleo_models.prices_is_imputed": {"name": "prices_is_imputed", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_is_imputed", "block_contents": "A flag indicating if the price was imputed, or derived, from the last arriving record. This is generally used for tokens with low-liquidity or inconsistent reporting."}, "doc.aleo_models.prices_open": {"name": "prices_open", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_open", "block_contents": "Opening price of the recorded hour in USD."}, "doc.aleo_models.prices_high": {"name": "prices_high", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_high", "block_contents": "Highest price of the recorded hour in USD"}, "doc.aleo_models.prices_low": {"name": "prices_low", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_low", "block_contents": "Lowest price of the recorded hour in USD"}, "doc.aleo_models.prices_close": {"name": "prices_close", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/prices.md", "original_file_path": "models/descriptions/prices.md", "unique_id": "doc.aleo_models.prices_close", "block_contents": "Closing price of the recorded hour in USD"}, "doc.aleo_models.fee_transition_id": {"name": "fee_transition_id", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/fee_transition_id.md", "original_file_path": "models/descriptions/fee_transition_id.md", "unique_id": "doc.aleo_models.fee_transition_id", "block_contents": "The ID of the fee transition."}, "doc.aleo_models.modified_timestamp": {"name": "modified_timestamp", "resource_type": "doc", "package_name": "aleo_models", "path": "descriptions/modified_timestamp.md", "original_file_path": "models/descriptions/modified_timestamp.md", "unique_id": "doc.aleo_models.modified_timestamp", "block_contents": "The utc timestamp at which the row was last modified."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.livequery_models.__livequery_models__": {"name": "__livequery_models__", "resource_type": "doc", "package_name": "livequery_models", "path": "doc_descriptions/general/__overview__.md", "original_file_path": "models/doc_descriptions/general/__overview__.md", "unique_id": "doc.livequery_models.__livequery_models__", "block_contents": "# Welcome to the Flipside Crypto LiveQuery Models Documentation!\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the LiveQuery functions available via [Flipside Crypto](https://flipsidecrypto.xyz/). For more information on how these functions are built, please see [the github repository.](https://github.com/FlipsideCrypto/livequery-models)\n\n### **Overview of Available Functions**\n\n#### **UTILS Functions**\n\n- `livequery.utils.hex_to_int`: Use this UDF to transform any hex string to integer\n    ```\n    ex: Curve Swaps\n\n    SELECT\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        livequery.utils.hex_to_int(segmented_data [1] :: STRING) :: INTEGER AS tokens_sold\n    FROM\n        optimism.core.fact_event_logs\n    WHERE\n        topics [0] :: STRING IN (\n            '0x8b3e96f2b889fa771c53c981b40daf005f63f637f1869f707052d15a3dd97140',\n            '0xd013ca23e77a65003c2c659c5442c00c805371b7fc1ebd4c206c41d1536bd90b'\n        )\n    ```\n- `livequery.utils.hex_encode_function` (coming soon)(Function VARCHAR): Use this UDF to hex encode any string\n    ```\n    ex: Decimals Function Signature\n\n    SELECT\n        `decimals` AS function_name,\n        livequery.utils.hex_encode_function(`decimals()`) :: STRING AS text_sig,\n        LEFT(text_sig,10) AS function_sig,\n        '0x313ce567' AS expected_sig\n    ```\n- `livequery.utils.evm_decode_logs` (coming soon)\n- `livequery.utils.udf_register_secret`\n\n#### **LIVE Functions & Examples**\n\n- `livequery.live.udf_api`(Method STRING, URL STRING, Headers OBJECT, Data OBJECT): Use this UDF to make a GET or POST request on any API\n    ```\n    ex: Defillama GET request -> working with the output (JSON flatten)\n\n    WITH chain_base AS (\n        SELECT\n            livequery.live.udf_api(\n                'GET','https://api.llama.fi/chains',{},{}\n            ) AS read\n    )\n\n    SELECT\n        VALUE:chainId::STRING AS chain_id,\n        VALUE:name::STRING AS chain,\n        VALUE:tokenSymbol::STRING AS token_symbol\n    FROM chain_base,\n        LATERAL FLATTEN (input=> read:data)\n\n    ex: Solana Token Metadata\n\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            'https://public-api.solscan.io/token/meta?tokenAddress=SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR',\n            { },\n            { }\n        );\n\n    ex: Running with multiple token addresses at the same time\n\n    WITH solana_addresses AS (\n        SELECT\n            'SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR' AS address\n        UNION\n        SELECT\n            '4KbzSz2VF1LCvEaw8viq1335VgWzNjMd8rwQMsCkKHip'\n    )\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            concat(\n                'https://public-api.solscan.io/token/meta?tokenAddress=',\n                address\n            ),\n            { },\n            { }\n        )\n    FROM\n        solana_addresses;\n\n    ex: Hit Quicknode (see instructions below for how to register an API Key with Flipside securely)\n\n    SELECT\n        livequery.live.udf_api(\n            'POST',\n            concat(\n                'http://sample-endpoint-name.network.quiknode.pro/',\n                '{my_key}'\n            ),\n            {},\n            { 'method' :'eth_blockNumber',\n              'params' :[],\n                'id' :1,\n                'jsonrpc' :'2.0' },\n            'quicknode'\n        );\n    ```\n\n##### **Registering and Using LiveQuery Credentials to Query Quicknode**\nWith LiveQuery you can safely store encrypted credentials, such as an API key, with Flipside, and query blockchain nodes directly via our SQL interface. Here\u2019s how:\n1. Sign up for a free [Quicknode API Account](https://www.quicknode.com/core-api)\n2. Navigate to ***Endpoints*** on the left hand side then click the ***Get Started*** tab and ***Copy*** the HTTP Provider Endpoint. Do not adjust the Setup or Security parameters.\n3. Visit [Ephit](https://science.flipsidecrypto.xyz/ephit) to obtain an Ephemeral query that will securely link your API Endpoint to Flipside's backend. This will allow you to refer to the URL securely in our application without referencing it or exposing keys directly.\n4. Fill out the form and click ***Submit this Credential***\n5. Paste the provided query into [Flipside](https://flipside.new) and query your node directly in the app with your submitted Credential (`{my_key}`).\n\n##### **API Endpoints available for use with LiveQuery:**\nPlease visit the Flipside discord or open a ticket for questions, concerns or more information.\n\n- Snapshot: [https://hub.snapshot.org/graphql](https://docs.snapshot.org/graphql-api)\n- Defillama: [https://api.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://yields.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://stablecoins.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://bridges.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://coins.llama.fi/](https://defillama.com/docs/api)\n- zkSync: [https://api.zksync.io/api/v0.2/](https://docs.zksync.io/apiv02-docs/)\n- DeepNFT Value: [https://api.deepnftvalue.com/v1](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api)\n- Zapper: [https://api.zapper.fi/v2/](https://api.zapper.fi/api/static/index.html#/Apps/AppsController_getApps)\n- Helius: [https://api.helius.xyz](https://docs.helius.xyz/introduction/why-helius)\n- Stargaze Name Service: [https://rest.stargaze-apis.com](https://github.com/public-awesome/names/blob/main/API.md)\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/external-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {"integration_tests": {"name": "integration_tests", "description": "Selector for integration tests", "definition": {"union": [{"method": "fqn", "value": "livequery_models.deploy.core.*"}]}}}, "disabled": {"model.livequery_models.secrets": [{"database": "ALEO", "schema": "secrets", "name": "secrets", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/secrets.sql", "original_file_path": "models/deploy/core/secrets.sql", "unique_id": "model.livequery_models.secrets", "fqn": ["livequery_models", "deploy", "core", "secrets"], "alias": "", "checksum": {"name": "sha256", "checksum": "ec1f117cc419f648463c64fca28b91e20fff87fa5b6f982ab8d75e74a3d1b052"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "copy_grants": true}, "tags": ["core"], "description": "", "columns": {"udf_register_secret": {"name": "udf_register_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_get_secret": {"name": "udf_get_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_get_secrets": {"name": "udf_get_secrets", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_create_secret": {"name": "udf_create_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "udf_delete_secret": {"name": "udf_delete_secret", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/secrets.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "core", "enabled": "{{ true if env_var(\"ENABLE_SNOWFLAKE_SECRETS\", \"\") else false }}", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1753463698.9635658, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('live') }}\n{% set config = config_core_secrets %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}], "test.livequery_models.test_alchemy_nfts__report_spam_status_200.d062a6f454": [{"database": "ALEO", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__report_spam_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__report_spam_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__report_spam_status_200.d062a6f454", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__report_spam_status_200"], "alias": "report_spam_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"enabled": false}, "created_at": 1753463699.5923307, "relation_name": "ALEO.test_alchemy_nfts.report_spam_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "report_spam", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": null, "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "report_spam", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}], "test.livequery_models.test_blockpour_utils__get_status_200.438dcb4c49": [{"database": "ALEO", "schema": "test_blockpour_utils", "name": "test_blockpour_utils__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_blockpour_utils__get_status_200.sql", "original_file_path": "models/deploy/marketplace/blockpour/blockpour_utils__.yml", "unique_id": "test.livequery_models.test_blockpour_utils__get_status_200.438dcb4c49", "fqn": ["livequery_models", "deploy", "marketplace", "blockpour", "test_blockpour_utils__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.678381, "relation_name": "ALEO.test_blockpour_utils.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "blockpour_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.blockpour_utils__", "attached_node": "model.livequery_models.blockpour_utils__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', {\n  'blockNumber': 17767007\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('blockpour_utils__')) }}"}, "namespace": null}}], "test.livequery_models.test_blockpour_utils__post_status_200.8586093b49": [{"database": "ALEO", "schema": "test_blockpour_utils", "name": "test_blockpour_utils__post_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_blockpour_utils__post_status_200.sql", "original_file_path": "models/deploy/marketplace/blockpour/blockpour_utils__.yml", "unique_id": "test.livequery_models.test_blockpour_utils__post_status_200.8586093b49", "fqn": ["livequery_models", "deploy", "marketplace", "blockpour", "test_blockpour_utils__post_status_200"], "alias": "post_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1753463699.684227, "relation_name": "ALEO.test_blockpour_utils.post_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "blockpour_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "post", "file_key_name": "models.blockpour_utils__", "attached_node": "model.livequery_models.blockpour_utils__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/model/run', {\n  'slug': 'price.quote',\n  'version': '1.0',\n  'chainId': 1,\n  'blockNumber': 17767016,\n  'input': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "post", "model": "{{ get_where_subquery(ref('blockpour_utils__')) }}"}, "namespace": null}}]}, "parent_map": {"model.aleo_models.core__fact_block_round_batches": ["model.aleo_models.silver__block_round_batches"], "model.aleo_models.core__fact_block_solutions": ["model.aleo_models.silver__block_solutions"], "model.aleo_models.core__fact_transitions": ["model.aleo_models.silver__transitions"], "model.aleo_models.core__fact_blocks": ["model.aleo_models.silver__blocks"], "model.aleo_models.core__fact_transfers": ["model.aleo_models.silver__native_transfers", "model.aleo_models.silver__nonnative_transfers"], "model.aleo_models.core__dim_labels": ["model.aleo_models.silver__labels"], "model.aleo_models.core__fact_transactions": ["model.aleo_models.silver__transactions", "model.aleo_models.silver__transitions_fee"], "model.aleo_models.core__dim_programs": ["model.aleo_models.silver__custom_programs", "model.aleo_models.silver__programs"], "model.aleo_models.core__dim_token_registrations": ["model.aleo_models.silver__token_registrations"], "model.aleo_models.defi__fact_swaps": ["model.aleo_models.silver__swaps_arcane"], "model.aleo_models.defi__fact_liquidity_pool_actions": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "model.aleo_models.stats__ez_core_metrics_hourly": ["model.aleo_models.core__fact_blocks", "model.aleo_models.core__fact_transactions", "model.aleo_models.price__ez_prices_hourly", "model.aleo_models.silver_stats__core_metrics_block_hourly", "model.aleo_models.silver_stats__core_metrics_hourly"], "model.aleo_models.test_core__programs_recent": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__dim_programs"], "model.aleo_models.test_core__blocks_recent": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_blocks"], "model.aleo_models.test_core__transfers_full": ["model.aleo_models.core__fact_transfers"], "model.aleo_models.test_core__transfers_recent": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_transfers"], "model.aleo_models.test_core__block_solutions_full": ["model.aleo_models.core__fact_block_solutions"], "model.aleo_models.test_core__block_solutions_recent": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_block_solutions"], "model.aleo_models.test_defi__swaps_recent": ["model.aleo_models._max_block_by_date", "model.aleo_models.defi__fact_swaps"], "model.aleo_models.test_defi__liquidity_actions_recent": ["model.aleo_models._max_block_by_date", "model.aleo_models.defi__fact_liquidity_pool_actions"], "model.aleo_models.test_core__transitions_full": ["model.aleo_models.core__fact_transitions"], "model.aleo_models.test_core__transitions_recent": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_transitions"], "model.aleo_models.test_core__block_round_batches_recent": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_block_round_batches"], "model.aleo_models.test_core__block_round_batches_full": ["model.aleo_models.core__fact_block_round_batches"], "model.aleo_models.test_core__transactions_recent": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_transactions"], "model.aleo_models.price__fact_prices_ohlc_hourly": ["model.aleo_models.silver__complete_provider_prices"], "model.aleo_models.price__ez_asset_metadata": ["model.aleo_models.silver__complete_native_asset_metadata", "model.aleo_models.silver__complete_token_asset_metadata"], "model.aleo_models.price__dim_asset_metadata": ["model.aleo_models.silver__complete_provider_asset_metadata"], "model.aleo_models.price__ez_prices_hourly": ["model.aleo_models.silver__complete_native_prices", "model.aleo_models.silver__complete_token_prices"], "model.aleo_models.github_actions__tasks": ["source.aleo_models.github_actions.workflows"], "model.aleo_models.github_actions__task_history": ["model.aleo_models.github_actions__tasks"], "model.aleo_models.github_actions__task_schedule": ["model.aleo_models.github_actions__tasks"], "model.aleo_models.github_actions__task_performance": ["model.aleo_models.github_actions__task_history", "model.aleo_models.github_actions__task_schedule"], "model.aleo_models.github_actions__current_task_status": ["model.aleo_models.github_actions__task_performance"], "model.aleo_models.streamline__blocks": ["model.aleo_models.streamline__chainhead", "source.aleo_models.crosschain_silver.number_sequence"], "model.aleo_models.streamline__chainhead": [], "model.aleo_models._max_block_by_date": ["model.aleo_models.silver__blocks"], "model.aleo_models.streamline__blocks_realtime": ["model.aleo_models.streamline__blocks", "model.aleo_models.streamline__blocks_complete"], "model.aleo_models.streamline__blocks_complete": ["model.aleo_models.bronze__blocks", "model.aleo_models.bronze__blocks_FR"], "model.aleo_models.silver__transactions": ["model.aleo_models.silver__blocks"], "model.aleo_models.silver__transitions": ["model.aleo_models.silver__transactions"], "model.aleo_models.silver__labels": ["source.aleo_models.crosschain.dim_labels"], "model.aleo_models.silver__transitions_fee": ["model.aleo_models.silver__transactions"], "model.aleo_models.silver__nonnative_transfers": ["model.aleo_models.silver__transitions"], "model.aleo_models.silver__native_transfers": ["model.aleo_models.silver__transitions"], "model.aleo_models.silver__block_round_batches": ["model.aleo_models.silver__blocks"], "model.aleo_models.silver__block_solutions": ["model.aleo_models.silver__blocks"], "model.aleo_models.silver__blocks": ["model.aleo_models.bronze__blocks", "model.aleo_models.bronze__blocks_FR"], "model.aleo_models.silver__programs": ["model.aleo_models.silver__transactions"], "model.aleo_models.silver_observability__blocks_completeness": ["model.aleo_models.core__fact_blocks", "source.aleo_models.crosschain_silver.number_sequence"], "model.aleo_models.silver_observability__transitions_completeness": ["model.aleo_models.core__fact_blocks", "model.aleo_models.silver__transactions", "model.aleo_models.silver__transitions"], "model.aleo_models.silver_observability__transactions_completeness": ["model.aleo_models.core__fact_blocks", "model.aleo_models.silver__blocks", "model.aleo_models.silver__transactions"], "model.aleo_models.silver__custom_programs": [], "model.aleo_models.silver__liquidity_pool_actions_arcane": ["model.aleo_models.core__fact_transitions", "model.aleo_models.silver__token_registrations"], "model.aleo_models.silver__swaps_arcane": ["model.aleo_models.core__fact_transitions", "model.aleo_models.silver__token_registrations"], "model.aleo_models.silver__token_registrations": ["model.aleo_models.core__fact_transitions"], "model.aleo_models.silver_stats__core_metrics_block_hourly": ["model.aleo_models.core__fact_blocks"], "model.aleo_models.silver_stats__core_metrics_hourly": ["model.aleo_models.core__fact_transactions"], "model.aleo_models.silver__complete_provider_prices": ["model.aleo_models.bronze__complete_provider_asset_metadata", "model.aleo_models.bronze__complete_provider_prices"], "model.aleo_models.silver__complete_native_asset_metadata": ["model.aleo_models.bronze__complete_native_asset_metadata"], "model.aleo_models.silver__complete_token_prices": ["model.aleo_models.bronze__complete_token_prices"], "model.aleo_models.silver__complete_native_prices": ["model.aleo_models.bronze__complete_native_prices"], "model.aleo_models.silver__complete_token_asset_metadata": ["model.aleo_models.bronze__complete_token_asset_metadata"], "model.aleo_models.silver__complete_provider_asset_metadata": ["model.aleo_models.bronze__complete_provider_asset_metadata"], "model.aleo_models.bronze__blocks_FR": ["source.aleo_models.bronze_streamline.blocks"], "model.aleo_models.bronze__blocks": ["source.aleo_models.bronze_streamline.blocks"], "model.aleo_models.bronze__complete_native_asset_metadata": ["source.aleo_models.crosschain_silver.complete_native_asset_metadata"], "model.aleo_models.bronze__complete_provider_prices": ["source.aleo_models.crosschain_silver.complete_provider_prices"], "model.aleo_models.bronze__complete_provider_asset_metadata": ["source.aleo_models.crosschain_silver.complete_provider_asset_metadata"], "model.aleo_models.bronze__complete_token_prices": ["source.aleo_models.crosschain_silver.complete_token_prices"], "model.aleo_models.bronze__complete_token_asset_metadata": ["source.aleo_models.crosschain_silver.complete_token_asset_metadata"], "model.aleo_models.bronze__complete_native_prices": ["source.aleo_models.crosschain_silver.complete_native_prices"], "seed.aleo_models.github_actions__workflows": [], "operation.aleo_models.aleo_models-on-run-start-0": [], "operation.aleo_models.aleo_models-on-run-start-1": [], "operation.aleo_models.aleo_models-on-run-end-0": [], "model.fsc_utils._datashare___create_udfs": [], "model.fsc_utils._datashare___create_gold": [], "model.livequery_models.live__allow_list": ["model.livequery_models.live"], "model.livequery_models._live": [], "model.livequery_models.live": ["model.livequery_models._live", "model.livequery_models._utils", "model.livequery_models.utils"], "model.livequery_models.utils": ["model.livequery_models._utils"], "model.livequery_models._utils": [], "model.livequery_models.bitquery__": ["model.livequery_models.live"], "model.livequery_models.quicknode_polygon_tokens__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_utils__quicknode_utils": ["model.livequery_models.live"], "model.livequery_models.quicknode_polygon_nfts__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_solana_nfts__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.fred__": ["model.livequery_models.live"], "model.livequery_models.strangelove__": ["model.livequery_models.live"], "model.livequery_models.footprint_utils__footprint_utils": ["model.livequery_models.live"], "model.livequery_models.snapshot__": ["model.livequery_models.live"], "model.livequery_models.credmark_utils__": ["model.livequery_models.live"], "model.livequery_models.zapper__": ["model.livequery_models.live"], "model.livequery_models.allday__": ["model.livequery_models.live"], "model.livequery_models.transpose__": ["model.livequery_models.live"], "model.livequery_models.subquery__": ["model.livequery_models.live"], "model.livequery_models.defillama__": ["model.livequery_models.live"], "model.livequery_models.reservoir__": ["model.livequery_models.live"], "model.livequery_models.apilayer__": ["model.livequery_models.live"], "model.livequery_models.helius_apis__helius_utils": ["model.livequery_models.helius_utils__helius_utils", "model.livequery_models.live"], "model.livequery_models.helius_das__helius_utils": ["model.livequery_models.helius_utils__helius_utils", "model.livequery_models.live"], "model.livequery_models.helius_utils__helius_utils": ["model.livequery_models.live"], "model.livequery_models.cmc__": ["model.livequery_models.live"], "model.livequery_models.espn__": ["model.livequery_models.live"], "model.livequery_models.opensea__": ["model.livequery_models.live"], "model.livequery_models.coingecko__": ["model.livequery_models.live"], "model.livequery_models.deepnftvalue__": ["model.livequery_models.live"], "model.livequery_models.github_utils__github_utils": ["model.livequery_models.live"], "model.livequery_models.github_actions__github_utils": ["model.livequery_models.github_utils__github_utils", "model.livequery_models.live"], "model.livequery_models.dappradar__": ["model.livequery_models.live"], "model.livequery_models.chainbase_utils__": ["model.livequery_models.live"], "model.livequery_models.alchemy_transfers__alchemy_utils": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"], "model.livequery_models.alchemy_tokens__alchemy_utils": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"], "model.livequery_models.alchemy_utils__alchemy_utils": ["model.livequery_models.live"], "model.livequery_models.alchemy_nfts__alchemy_utils": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"], "model.livequery_models.topshot__": ["model.livequery_models.live"], "model.livequery_models.zettablock__": ["model.livequery_models.live"], "model.livequery_models.solscan__": ["model.livequery_models.live"], "model.livequery_models.covalent__": ["model.livequery_models.live"], "model.livequery_models.stakingrewards__": ["model.livequery_models.live"], "model.livequery_models.nftscan__": ["model.livequery_models.live"], "model.livequery_models.playgrounds__": ["model.livequery_models.live"], "model.livequery_models.blockpour_utils__": ["model.livequery_models.live"], "model.livequery_models.dapplooker__": ["model.livequery_models.live"], "model.livequery_models.bsc__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.fantom__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.arbitrum_nova__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.celo__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.arbitrum_one__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.harmony__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon_zkevm__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon_zkevm__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.base__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.optimism__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.avalanche_c__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.ethereum__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.gnosis__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.harmony__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.avalanche_c__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.arbitrum_one__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.optimism__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.ethereum__sepolia": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.ethereum__mainnet": ["model.livequery_models._eth__decoded_logs", "model.livequery_models._eth__logs", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.base__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.bsc__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models._eth__decoded_logs": ["source.livequery_models.ethereum_core.ez_decoded_event_logs"], "model.livequery_models._evm__native_symbol_map": [], "model.livequery_models._eth__logs": ["source.livequery_models.ethereum_core.fact_event_logs"], "model.livequery_models._evm__abi_map": ["source.livequery_models.crosschain.dim_evm_event_abis"], "model.livequery_models._evm__contracts_map": ["source.livequery_models.crosschain.dim_contracts"], "analysis.livequery_models.test_functions_py": [], "analysis.livequery_models.test_crud_udfs_in_schema": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map"], "analysis.livequery_models.test_create_or_drop_function_from_config": [], "analysis.livequery_models.generate_test_udf_skeleton": [], "analysis.livequery_models.test_functions": [], "seed.livequery_models.live__verified_api_endpoints": [], "operation.livequery_models.livequery_models-on-run-start-0": [], "operation.livequery_models.livequery_models-on-run-end-0": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER.9d55d56330": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_NETWORK.b3fe8ae22a": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NETWORK__STRING__VARCHAR.d57c531d17": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_TX_COUNT.dd649c1087": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_HASH.303c5cdb2c": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_PREVIOUS_HASH.a5b9336c67": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_ROUND.e005d3250f": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_ROUND.6a7ae2c6cd": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_ROUND__NUMBER__FLOAT.713c92704e": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_COINBASE_TARGET.17ff1fa530": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_COINBASE_TARGET.59fb9ba542": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_COINBASE_TARGET__NUMBER__FLOAT.b3386b7291": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_PROOF_TARGET.5082e2821b": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_PROOF_TARGET.94ec4ffc5d": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_PROOF_TARGET__NUMBER__FLOAT.e049f0f54d": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_WEIGHT.54ded95d23": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_WEIGHT.d5cc5607fc": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_WEIGHT__NUMBER__FLOAT.7998cba785": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_REWARD.8a7df7ccb4": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_BLOCK_REWARD.bb713926f5": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_REWARD__NUMBER__FLOAT.7b3f7c5222": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PUZZLE_REWARD.9abdd6d4bc": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_PUZZLE_REWARD.7e6616d5f4": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PUZZLE_REWARD__NUMBER__FLOAT.deaa8237fa": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_FACT_BLOCKS_ID.9f3cfdc8fc": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_FACT_BLOCKS_ID.e04af95ef1": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.unique_core__fact_blocks_FACT_BLOCKS_ID.ae21b89ade": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_INSERTED_TIMESTAMP.2409df43de": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_INSERTED_TIMESTAMP.2bc7f6716c": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_MODIFIED_TIMESTAMP.a134d35ed2": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.not_null_core__fact_blocks_MODIFIED_TIMESTAMP.ba893bde8a": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_utils_unique_combination_of_columns_core__fact_blocks_NETWORK__BLOCK_ID.54f426e528": ["model.aleo_models.core__fact_blocks"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TX_ID_CREATED.5d8f125e21": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_ID_CREATED.0f1db2f3a5": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_TIMESTAMP_CREATED.65bb29727d": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_ID.28ae55e881": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.not_null_core__dim_token_registrations_TOKEN_ID.3af44258e3": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.unique_core__dim_token_registrations_TOKEN_ID.022fc34b0d": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_NAME.c1a4850472": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL.c71d617563": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_DECIMALS.bd77ccf50f": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_MAX_SUPPLY.e1d9fb49f3": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_REQUIRED.4aad5b0f85": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_PARTY.03ebb47f35": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_NAME_ENCODED.4ec37ad556": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL_ENCODED.ce6a79e6f0": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.unique_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.805acb60e8": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.not_null_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.66976bee8c": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.not_null_core__dim_token_registrations_INSERTED_TIMESTAMP.d01fb16229": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.not_null_core__dim_token_registrations_MODIFIED_TIMESTAMP.c241d92ffe": ["model.aleo_models.core__dim_token_registrations"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_ID.22feac23a3": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_TIMESTAMP.934763eab7": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_solutions_BLOCK_TIMESTAMP__day__1.e8ab764679": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_PUZZLE_REWARD.558b82bad3": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_ADDRESS.de9211d159": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_COUNTER.1f899ec7a6": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_EPOCH_HASH.ca095229c0": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_SOLUTION_ID.8323de7856": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_TARGET.2d39d2be4f": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD_RAW.e8b02b6278": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD.fc3dbe3aca": ["model.aleo_models.core__fact_block_solutions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transfers_BLOCK_TIMESTAMP__day__1.b9bb12d3c2": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_IS_NATIVE.11f4a568d6": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TOKEN_ADDRESS.87260f30a0": ["model.aleo_models.core__fact_transfers"], "test.aleo_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": ["model.aleo_models.core__dim_labels"], "test.aleo_models.not_null_core__dim_labels_CREATOR.0c77d5749c": ["model.aleo_models.core__dim_labels"], "test.aleo_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": ["model.aleo_models.core__dim_labels"], "test.aleo_models.not_null_core__dim_labels_ADDRESS_NAME.0de78829a4": ["model.aleo_models.core__dim_labels"], "test.aleo_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": ["model.aleo_models.core__dim_labels"], "test.aleo_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": ["model.aleo_models.core__dim_labels"], "test.aleo_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc": ["model.aleo_models.core__dim_labels"], "test.aleo_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225": ["model.aleo_models.core__dim_labels"], "test.aleo_models.unique_core__dim_labels_DIM_LABELS_ID.af1f2177a6": ["model.aleo_models.core__dim_labels"], "test.aleo_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16": ["model.aleo_models.core__dim_labels"], "test.aleo_models.not_null_core__dim_labels_MODIFIED_TIMESTAMP.02c7121cbb": ["model.aleo_models.core__dim_labels"], "test.aleo_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__ADDRESS.59b513fc33": ["model.aleo_models.core__dim_labels"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_INDEX.a65a072fb0": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_tx_succeeded.5b133acfaf": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_TYPE.b04b8ae75c": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_EXECUTION_MSG.d8744ee919": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_DEPLOYMENT_MSG.13dd6ba041": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_OWNER_MSG.48cf57eabb": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FINALIZE_MSG.47c5e66540": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_REJECTED_MSG.210e239eb5": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TRANSITION_COUNT.6539e193ba": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_RAW.2a9f593582": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_PAYER.2d86608e80": ["model.aleo_models.core__fact_transactions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_ID.4fe2c20e20": ["model.aleo_models.core__dim_programs"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_TIMESTAMP.5bfe8d93a4": ["model.aleo_models.core__dim_programs"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM_ID.d7959096fa": ["model.aleo_models.core__dim_programs"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_EDITION.2709d9ec21": ["model.aleo_models.core__dim_programs"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM.70cc7c152e": ["model.aleo_models.core__dim_programs"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_VERIFYING_KEYS.17d8e54386": ["model.aleo_models.core__dim_programs"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_ID.4dc5d2b080": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_TIMESTAMP.5d5ee056a0": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transitions_BLOCK_TIMESTAMP__day__1.8de7cb7750": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TX_ID.ed3d7d2fc4": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INDEX.bed4108c73": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TRANSITION_ID.88d41f74b0": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_PROGRAM_ID.fff8434ef2": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_FUNCTION.304c84273d": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INPUTS.0097435c46": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_OUTPUTS.473e6ec1d0": ["model.aleo_models.core__fact_transitions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_ID.0a9ca47434": ["model.aleo_models.core__fact_block_round_batches"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_TIMESTAMP.40e237b77b": ["model.aleo_models.core__fact_block_round_batches"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_round_batches_BLOCK_TIMESTAMP__day__1.e07b524c9d": ["model.aleo_models.core__fact_block_round_batches"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_ROUND.792262cac5": ["model.aleo_models.core__fact_block_round_batches"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BATCH_ID.0ee6fc7975": ["model.aleo_models.core__fact_block_round_batches"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_AUTHOR.c78428dd2c": ["model.aleo_models.core__fact_block_round_batches"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_COMMITTEE_ID.e43b6d6933": ["model.aleo_models.core__fact_block_round_batches"], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_TRANSMISSION_IDS.73a1a1b8d4": ["model.aleo_models.core__fact_block_round_batches"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.d3d9a20445": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.bc87b8d16e": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_ID.20580d4f45": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_ID.a63b3fcc13": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TX_ID.7452491d2a": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TX_ID.96aca3a8ff": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_SUCCEEDED.7fc7637654": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.accepted_values_defi__fact_liquidity_pool_actions_SUCCEEDED__True__False.2845e63de8": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_SUCCEEDED.debfae0b10": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_ROOT_ACTION.6b8451c1d4": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_ROOT_ACTION.0ee8f28262": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.ed334466e8": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.cb97f5de7e": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.f4f97ba237": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.2fbeaace44": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_ID.20b62065f7": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_ID.79eaeab93d": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.f12d3712c8": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.3f10a13478": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.577fe366a9": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.0cfbe2f5f3": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.871c5bd4d6": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.363b26c8b1": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_ID.ce9f959adf": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_ID.a4379c4ba5": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.fc64ae06cf": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.bd3c630c8c": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.8dacf5d1d0": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.00a3c4c0da": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.3e1ee01fe5": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.2d8079e808": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.cca0bcbfac": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.a45c6618da": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.unique_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.5554831fc3": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.14dea1b963": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_INSERTED_TIMESTAMP.724ca84c98": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_MODIFIED_TIMESTAMP.665736575b": ["model.aleo_models.defi__fact_liquidity_pool_actions"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_TIMESTAMP.12d6b07914": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_ID.a78a351c3d": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_BLOCK_ID.e151cc187f": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TX_ID.67830b42e0": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_TX_ID.84d994da53": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SUCCEEDED.f0f33f4970": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.accepted_values_defi__fact_swaps_SUCCEEDED__True__False.d58188a7bb": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_SUCCEEDED.b960e174a2": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SWAPPER.9a749d86f0": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_SWAPPER.a8497d4cd6": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT_UNADJ.0d34c88cec": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT_UNADJ.5b2b90a289": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT.41696d7b42": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT.4363eb7533": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_SYMBOL.ca24fe91ae": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_FROM_SYMBOL.3d70a0a69b": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_ID.4527f01191": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_FROM_ID.9d9142108f": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT_UNADJ.81b2f0514e": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT_UNADJ.b963eea9e5": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT.daa015c5af": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT.6e0eb16794": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_SYMBOL.6221dd7cf9": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_TO_SYMBOL.3739e95840": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_ID.0f8c6c4f56": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_TO_ID.c78dd0d92f": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_ROOT_ACTION.52722e1aba": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_ROOT_ACTION.d78e8e179e": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_PLATFORM.1b397af8a1": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_PLATFORM.b6233329b7": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_FACT_SWAPS_ID.cdd2d36e98": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_INSERTED_TIMESTAMP.c931848598": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_defi__fact_swaps_MODIFIED_TIMESTAMP.d083b26328": ["model.aleo_models.defi__fact_swaps"], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.c43366f375": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.69de9bb1e9": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MIN.cb99895dd8": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MIN__NUMBER__FLOAT.1ea9989d27": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MAX.82e9a01fcf": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MAX__NUMBER__FLOAT.c0b6bda28a": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_COUNT.67c66eb706": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_COUNT__NUMBER__FLOAT.04a49945de": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT.8718680bf8": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.da21939902": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.b5e50f7ef6": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.1e160d8731": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED.1e76008c62": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.6291586797": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT.4a7dab96a7": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.cc092ab5ee": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE.56d6db6fc6": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE__DECIMAL__FLOAT__NUMBER.b9208111a7": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_stats__ez_core_metrics_hourly_INSERTED_TIMESTAMP__day__1.5cba713d8f": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.dbt_utils_unique_combination_of_columns_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.f4cde92642": ["model.aleo_models.stats__ez_core_metrics_hourly"], "test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_ID.1af206eea3": ["model.aleo_models.test_core__programs_recent"], "test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP.838d46a1a2": ["model.aleo_models.test_core__programs_recent"], "test.aleo_models.not_null_test_core__programs_recent_PROGRAM_ID.a5fad2813f": ["model.aleo_models.test_core__programs_recent"], "test.aleo_models.not_null_test_core__programs_recent_EDITION.33eec4e36a": ["model.aleo_models.test_core__programs_recent"], "test.aleo_models.not_null_test_core__programs_recent_PROGRAM.549ff4fe35": ["model.aleo_models.test_core__programs_recent"], "test.aleo_models.not_null_test_core__programs_recent_VERIFYING_KEYS.79b5e3b4fd": ["model.aleo_models.test_core__programs_recent"], "test.aleo_models.unique_test_core__blocks_recent_BLOCK_ID.c26b6eacc3": ["model.aleo_models.test_core__blocks_recent"], "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_ID.7aecad87b8": ["model.aleo_models.test_core__blocks_recent"], "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_TIMESTAMP.2225f971b2": ["model.aleo_models.test_core__blocks_recent"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__blocks_recent_BLOCK_TIMESTAMP__hour__3.cb089947b4": ["model.aleo_models.test_core__blocks_recent"], "test.aleo_models.fsc_utils_sequence_gaps_test_core__blocks_recent_BLOCK_ID.f87a178f75": ["model.aleo_models.test_core__blocks_recent"], "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_ID.f6ecee38b4": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_TIMESTAMP.ea43762e52": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_BLOCK_TIMESTAMP__timestamp_ntz.cc15fe2f72": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_recent_BLOCK_TIMESTAMP__hour__3.230c250397": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.not_null_test_core__transfers_recent_TX_ID.accb7c73e5": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.not_null_test_core__transfers_recent_TRANSITION_ID.cab60da5cc": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.not_null_test_core__transfers_recent_INDEX.7875007827": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.not_null_test_core__transfers_recent_TX_SUCCEEDED.4b6984e485": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.not_null_test_core__transfers_recent_TRANSFER_TYPE.07b266a36e": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_SENDER__VARCHAR.cb70ccc9bc": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_RECEIVER__VARCHAR.b5644d9fb7": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_AMOUNT__FLOAT.9b1e3d4bf7": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.not_null_test_core__transfers_recent_IS_NATIVE.3f4aa5f093": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_IS_NATIVE__BOOLEAN.4be4a86231": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_TOKEN_ADDRESS__VARCHAR.5ac2f67dd9": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_recent_TRANSITION_ID__TX_ID__BLOCK_ID.2cc09c6492": ["model.aleo_models.test_core__transfers_recent"], "test.aleo_models.not_null_test_core__transfers_full_BLOCK_ID.44a0160596": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_ID__NUMBER.db4a153014": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_BLOCK_TIMESTAMP.680028f04e": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_TIMESTAMP__timestamp_ntz.a2acec0665": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_full_BLOCK_TIMESTAMP__day__1.bed6c29261": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_TX_ID.aa9e490b50": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_ID__VARCHAR.a4a360729b": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_TX_SUCCEEDED.d8326e4ad1": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_SUCCEEDED__BOOLEAN.405c5b0551": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_TRANSITION_ID.e4ae0e9c5a": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSITION_ID__VARCHAR.dfe94d6066": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_TRANSFER_TYPE.c3b93be59e": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSFER_TYPE__VARCHAR.c590e4df83": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_SENDER.3d5cbf9a67": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_SENDER__VARCHAR.fbd57ffc9e": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_RECEIVER.2b9e95133e": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_RECEIVER__VARCHAR.ed72eb7f1c": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_AMOUNT.8a4b2f1b6d": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_AMOUNT__FLOAT.a4c0d1b1f0": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_IS_NATIVE.2bd3fa38a4": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_IS_NATIVE__BOOLEAN.457eaccf7b": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__transfers_full_TOKEN_ADDRESS.7a33e30844": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TOKEN_ADDRESS__VARCHAR.06afd1e0e1": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_full_TRANSITION_ID__TX_ID__BLOCK_ID.43cdacc3a1": ["model.aleo_models.test_core__transfers_full"], "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_ID.af65e503a3": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_ID__number.a9475a9a0f": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_TIMESTAMP.63c13702db": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_TIMESTAMP__timestamp_ntz.361450a37d": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_full_BLOCK_TIMESTAMP__day__1.bb2d43e68e": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD.091930da06": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD__number.d15dabbd7b": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_full_ADDRESS.3a1563be64": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_ADDRESS__varchar.02bfdb533b": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_full_COUNTER.93b37d2afb": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_COUNTER__varchar.d79fe043c3": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_full_EPOCH_HASH.daf662ca58": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_EPOCH_HASH__varchar.e6c6288780": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_full_SOLUTION_ID.8a323cbd55": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_SOLUTION_ID__varchar.056235cfd9": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_full_TARGET.9197ff119b": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_TARGET__number.16668ae8ed": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_full_REWARD_RAW.1093af5149": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD_RAW__number.78bfd5fac7": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_full_REWARD.ed62ea6e8e": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD__float.ff45328781": ["model.aleo_models.test_core__block_solutions_full"], "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_ID.276b7669d8": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_TIMESTAMP.8556c30ded": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_recent_BLOCK_TIMESTAMP__hour__3.1d34ec0913": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_PUZZLE_REWARD.3a26876298": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.not_null_test_core__block_solutions_recent_ADDRESS.5ac1c26e6d": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.not_null_test_core__block_solutions_recent_COUNTER.676606a4cc": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.not_null_test_core__block_solutions_recent_EPOCH_HASH.3ece27be86": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.not_null_test_core__block_solutions_recent_SOLUTION_ID.ed25c17e24": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.not_null_test_core__block_solutions_recent_TARGET.58ba4e2d92": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.not_null_test_core__block_solutions_recent_REWARD_RAW.92470140bb": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_solutions_recent_SOLUTION_ID__BLOCK_ID.e25c9f1601": ["model.aleo_models.test_core__block_solutions_recent"], "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_TIMESTAMP.aa9c91bac3": ["model.aleo_models.test_defi__swaps_recent"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_defi__swaps_recent_BLOCK_TIMESTAMP__day__3.97d3ae46b6": ["model.aleo_models.test_defi__swaps_recent"], "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_ID.0885e16138": ["model.aleo_models.test_defi__swaps_recent"], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__swaps_recent_TX_ID__SWAPPER__BLOCK_ID.5b52cfad7b": ["model.aleo_models.test_defi__swaps_recent"], "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_TIMESTAMP.433bfa00a0": ["model.aleo_models.test_defi__liquidity_actions_recent"], "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_ID.77677822d5": ["model.aleo_models.test_defi__liquidity_actions_recent"], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__liquidity_actions_recent_TX_ID__LIQUIDITY_POOL_PROTOCOL__LIQUIDITY_PROVIDER__TOKEN1_ID__TOKEN2_ID.385663127b": ["model.aleo_models.test_defi__liquidity_actions_recent"], "test.aleo_models.not_null_test_core__transitions_recent_BLOCK_TIMESTAMP.40a1e65ad9": ["model.aleo_models.test_core__transitions_recent"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_recent_BLOCK_TIMESTAMP__hour__3.94ee0b9ed0": ["model.aleo_models.test_core__transitions_recent"], "test.aleo_models.not_null_test_core__transitions_recent_TX_ID.0c1c4942f9": ["model.aleo_models.test_core__transitions_recent"], "test.aleo_models.not_null_test_core__transitions_recent_TRANSITION_ID.278a50751b": ["model.aleo_models.test_core__transitions_recent"], "test.aleo_models.not_null_test_core__transitions_recent_PROGRAM_ID.4fe73c31dc": ["model.aleo_models.test_core__transitions_recent"], "test.aleo_models.not_null_test_core__transitions_recent_INPUTS.5407911e94": ["model.aleo_models.test_core__transitions_recent"], "test.aleo_models.not_null_test_core__transitions_recent_OUTPUTS.236aa37a1e": ["model.aleo_models.test_core__transitions_recent"], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_recent_TRANSITION_ID__TX_ID__BLOCK_ID.5baa0beb34": ["model.aleo_models.test_core__transitions_recent"], "test.aleo_models.not_null_test_core__transitions_full_BLOCK_ID.cec6b5a3b5": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_ID__NUMBER.330953c31f": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.not_null_test_core__transitions_full_BLOCK_TIMESTAMP.08683331a8": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_TIMESTAMP__timestamp_ntz.34883a9ca8": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_full_BLOCK_TIMESTAMP__day__1.10b89bf39b": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.not_null_test_core__transitions_full_TX_ID.5e283fda3d": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TX_ID__VARCHAR.dcdaa15bc5": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INDEX__NUMBER.df84f98823": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.not_null_test_core__transitions_full_TRANSITION_ID.b3f5414d72": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TRANSITION_ID__VARCHAR.7414b60884": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.not_null_test_core__transitions_full_PROGRAM_ID.54aef3f41e": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_PROGRAM_ID__VARCHAR.a3fe55fdb8": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_FUNCTION__VARCHAR.ac1009a796": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.not_null_test_core__transitions_full_INPUTS.a310350a3f": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INPUTS__VARIANT.6022be75ee": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.not_null_test_core__transitions_full_OUTPUTS.7e84b2dd8b": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_OUTPUTS__VARIANT.f224c5c2f2": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_full_TRANSITION_ID__TX_ID__BLOCK_ID.14b5b60dfb": ["model.aleo_models.test_core__transitions_full"], "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_ID.62e487d703": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_ID__NUMBER.8aaa3c9247": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_TIMESTAMP.2d68e82f29": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.905525404b": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_full_BLOCK_TIMESTAMP__day__1.643c5f1859": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.not_null_test_core__block_round_batches_full_ROUND.040dc0178d": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_ROUND__VARCHAR.37a81c3d55": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.not_null_test_core__block_round_batches_full_BATCH_ID.3e510992b1": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BATCH_ID__VARCHAR.1fd6f06fa8": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.not_null_test_core__block_round_batches_full_AUTHOR.ad0397ca02": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_AUTHOR__VARCHAR.5259a818e2": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.not_null_test_core__block_round_batches_full_COMMITTEE_ID.dbc5a638b0": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_COMMITTEE_ID__VARCHAR.1d92ec8574": ["model.aleo_models.test_core__block_round_batches_full"], "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_ID.d971186ebb": ["model.aleo_models.test_core__block_round_batches_recent"], "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_TIMESTAMP.62dec4ef7e": ["model.aleo_models.test_core__block_round_batches_recent"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_recent_BLOCK_TIMESTAMP__hour__3.31f275ffcb": ["model.aleo_models.test_core__block_round_batches_recent"], "test.aleo_models.not_null_test_core__block_round_batches_recent_ROUND.04290e7152": ["model.aleo_models.test_core__block_round_batches_recent"], "test.aleo_models.not_null_test_core__block_round_batches_recent_BATCH_ID.561ce0099f": ["model.aleo_models.test_core__block_round_batches_recent"], "test.aleo_models.not_null_test_core__block_round_batches_recent_COMMITTEE_ID.7f6368c8f4": ["model.aleo_models.test_core__block_round_batches_recent"], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_round_batches_recent_BLOCK_ID__BATCH_ID__AUTHOR.d053219a63": ["model.aleo_models.test_core__block_round_batches_recent"], "test.aleo_models.not_null_test_core__transactions_recent_BLOCK_TIMESTAMP.b35a37cfc9": ["model.aleo_models.test_core__transactions_recent"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transactions_recent_BLOCK_TIMESTAMP__hour__3.106542823f": ["model.aleo_models.test_core__transactions_recent"], "test.aleo_models.not_null_test_core__transactions_recent_TX_ID.f41922a071": ["model.aleo_models.test_core__transactions_recent"], "test.aleo_models.unique_test_core__transactions_recent_TX_ID.e391599cd6": ["model.aleo_models.test_core__transactions_recent"], "test.aleo_models.not_null_test_core__transactions_recent_TX_SUCCEEDED.dbcb46771f": ["model.aleo_models.test_core__transactions_recent"], "test.aleo_models.not_null_test_core__transactions_recent_TX_TYPE.bf23c504c9": ["model.aleo_models.test_core__transactions_recent"], "test.aleo_models.not_null_test_core__transactions_recent_TRANSITION_COUNT.b4f4994e62": ["model.aleo_models.test_core__transactions_recent"], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transactions_recent_TX_ID__BLOCK_ID.ec9bf4e9e1": ["model.aleo_models.test_core__transactions_recent"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f": ["model.aleo_models.github_actions__current_task_status"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__2.c9f4d937df": ["model.aleo_models.github_actions__current_task_status"], "test.aleo_models.not_null_silver__block_round_batches_BLOCK_ID.d56ba7eaa6": ["model.aleo_models.silver__block_round_batches"], "test.aleo_models.not_null_silver__block_round_batches_BLOCK_TIMESTAMP.afe41027de": ["model.aleo_models.silver__block_round_batches"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_round_batches_BLOCK_TIMESTAMP__day__1.4ca9507b37": ["model.aleo_models.silver__block_round_batches"], "test.aleo_models.not_null_silver__block_round_batches_ROUND.8d90a0fbe4": ["model.aleo_models.silver__block_round_batches"], "test.aleo_models.not_null_silver__block_round_batches_BATCH_ID.f79193cd9f": ["model.aleo_models.silver__block_round_batches"], "test.aleo_models.not_null_silver__block_round_batches_AUTHOR.b517797091": ["model.aleo_models.silver__block_round_batches"], "test.aleo_models.not_null_silver__block_round_batches_COMMITTEE_ID.e9dcad2695": ["model.aleo_models.silver__block_round_batches"], "test.aleo_models.not_null_silver__block_round_batches_TRANSMISSION_IDS.2943ef7ef2": ["model.aleo_models.silver__block_round_batches"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_round_batches_BLOCK_ID__ROUND__BATCH_ID.cb50403c63": ["model.aleo_models.silver__block_round_batches"], "test.aleo_models.not_null_silver__transitions_fee_BLOCK_ID.448830d765": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.not_null_silver__transitions_fee_BLOCK_TIMESTAMP.da4eb0a3f0": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.not_null_silver__transitions_fee_TX_ID.ab5e58287c": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.not_null_silver__transitions_fee_SUCCEEDED.6c5db24350": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.not_null_silver__transitions_fee_TRANSITION_ID.ca32598656": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.unique_silver__transitions_fee_TRANSITION_ID.b254898411": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.not_null_silver__transitions_fee_PROGRAM_ID.83e290b7f9": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.not_null_silver__transitions_fee_FUNCTION.b91e848824": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.not_null_silver__transitions_fee_INPUTS.990589d691": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.not_null_silver__transitions_fee_OUTPUTS.f3d1314c3a": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transitions_fee_BLOCK_ID__TX_ID__TRANSITION_ID.4605a65647": ["model.aleo_models.silver__transitions_fee"], "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_ID.f46d1d4fda": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_ID__NUMBER__FLOAT.60d1f0dd26": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_TIMESTAMP.7304ed77b5": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nonnative_transfers_BLOCK_TIMESTAMP__day__1.9392199c66": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0a10fe399f": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__nonnative_transfers_TX_ID.1426f62e21": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_ID__STRING__VARCHAR.851fa74156": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__nonnative_transfers_TRANSITION_ID.a93330752b": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSITION_ID__STRING__VARCHAR.9d8b17f55a": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__nonnative_transfers_INDEX.9e1f26a6b5": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__nonnative_transfers_INDEX__NUMBER.89aab49a7e": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__nonnative_transfers_TX_SUCCEEDED.23e46f1519": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_SUCCEEDED__BOOLEAN.90878c6c53": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__nonnative_transfers_TRANSFER_TYPE.dedcc154e8": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSFER_TYPE__STRING__VARCHAR.e696b5a6e9": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__nonnative_transfers_SENDER.aeb92dc6a2": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_SENDER__STRING__VARCHAR.0ba22db44d": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__nonnative_transfers_RECEIVER.06a07e2030": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_RECEIVER__STRING__VARCHAR.f84d37e7f8": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__nonnative_transfers_AMOUNT.d7f1ebd098": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_AMOUNT__NUMBER__FLOAT.a8f76752f9": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__nonnative_transfers_TRANSITION_ID.e6bf2f36fc": ["model.aleo_models.silver__nonnative_transfers"], "test.aleo_models.not_null_silver__block_solutions_BLOCK_ID.a77b783b26": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.not_null_silver__block_solutions_BLOCK_TIMESTAMP.a8fbe6f8fe": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_solutions_BLOCK_TIMESTAMP__day__1.7ba6a86b55": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.not_null_silver__block_solutions_BLOCK_PUZZLE_REWARD.24faf4f201": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_BLOCK_PUZZLE_REWARD__NUMBER__FLOAT.434ba3d0af": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_BLOCK_PUZZLE_REWARD__0.43a041aab9": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.not_null_silver__block_solutions_ADDRESS.738847c2b0": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.not_null_silver__block_solutions_COUNTER.887b97bb42": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.not_null_silver__block_solutions_EPOCH_HASH.cf3f348af3": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.not_null_silver__block_solutions_SOLUTION_ID.f2ff10acd9": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.unique_silver__block_solutions_SOLUTION_ID.e1537a54e8": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.not_null_silver__block_solutions_TARGET.815fac748b": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_TARGET__NUMBER__BIGINT.f884206507": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_TARGET__0.b9c2ef6877": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.not_null_silver__block_solutions_REWARD_RAW.ae75e0236a": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_REWARD_RAW__0.995df7a67a": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_solutions_BLOCK_ID__SOLUTION_ID.5138ce7dc4": ["model.aleo_models.silver__block_solutions"], "test.aleo_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": ["model.aleo_models.silver__blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER.fd6ec57c3f": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.aleo_models.silver__blocks"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": ["model.aleo_models.silver__blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__blocks_NETWORK_ID.adae7960cd": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.aleo_models.silver__blocks"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__blocks_PREVIOUS_HASH.c56022c694": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__blocks_ROUND.0477c585db": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__blocks_COINBASE_TARGET.2e46eb161a": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__blocks_CUMULATIVE_PROOF_TARGET.dc585148d7": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__blocks_CUMULATIVE_WEIGHT.4737bf66a0": ["model.aleo_models.silver__blocks"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__blocks_NETWORK_ID__BLOCK_ID.38265c56e7": ["model.aleo_models.silver__blocks"], "test.aleo_models.fsc_utils_sequence_gaps_silver__blocks_BLOCK_ID.e07d1d836f": ["model.aleo_models.silver__blocks"], "test.aleo_models.not_null_silver__transitions_BLOCK_ID.bbe019b39d": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_BLOCK_TIMESTAMP.afd4cf24b8": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_TX_ID.b2db0c6105": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_INDEX.48df867820": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_TRANSITION_ID.7ee1f08ff1": ["model.aleo_models.silver__transitions"], "test.aleo_models.unique_silver__transitions_TRANSITION_ID.4afb2941b0": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_TYPE.a2cee98629": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_PROGRAM_ID.74bd45f9a1": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_FUNCTION.71fc03afe4": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_INPUTS.0bb14ba3c1": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_OUTPUTS.c2a5fb73fc": ["model.aleo_models.silver__transitions"], "test.aleo_models.unique_silver__transitions_TRANSITIONS_ID.0b130702dd": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__transitions_TRANSITIONS_ID.4a45c510c7": ["model.aleo_models.silver__transitions"], "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_ID.80c2c7e905": ["model.aleo_models.silver__programs"], "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_TIMESTAMP.5454b5bfed": ["model.aleo_models.silver__programs"], "test.aleo_models.not_null_silver__programs_PROGRAM_ID.fd89ca51af": ["model.aleo_models.silver__programs"], "test.aleo_models.unique_silver__programs_PROGRAM_ID.4d3f704ad9": ["model.aleo_models.silver__programs"], "test.aleo_models.not_null_silver__programs_EDITION.5c5a948f60": ["model.aleo_models.silver__programs"], "test.aleo_models.not_null_silver__programs_PROGRAM.1a50b41b8d": ["model.aleo_models.silver__programs"], "test.aleo_models.not_null_silver__programs_VERIFYING_KEYS.4ba2be9b2b": ["model.aleo_models.silver__programs"], "test.aleo_models.not_null_silver__programs_PROGRAMS_ID.e9988abeeb": ["model.aleo_models.silver__programs"], "test.aleo_models.unique_silver__programs_PROGRAMS_ID.243a1406df": ["model.aleo_models.silver__programs"], "test.aleo_models.not_null_silver__transactions_TX_TYPE.94f5edcf76": ["model.aleo_models.silver__transactions"], "test.aleo_models.accepted_values_silver__transactions_TX_TYPE__deploy__execute__fee.c161516da6": ["model.aleo_models.silver__transactions"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6": ["model.aleo_models.silver__transactions"], "test.aleo_models.not_null_silver__native_transfers_BLOCK_ID.5e3c7de616": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_ID__NUMBER__FLOAT.81e7861daa": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver__native_transfers_BLOCK_TIMESTAMP.63641531f9": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__native_transfers_BLOCK_TIMESTAMP__day__1.2d2bf40c31": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.eb086929f1": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver__native_transfers_TX_ID.01c9c62342": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_ID__STRING__VARCHAR.a7e979ed60": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver__native_transfers_TRANSITION_ID.54e8500287": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSITION_ID__STRING__VARCHAR.3b2b1dd0a1": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver__native_transfers_INDEX.61be8d9435": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__native_transfers_INDEX__NUMBER.eb69d10f39": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver__native_transfers_TX_SUCCEEDED.ea0c362e96": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_SUCCEEDED__BOOLEAN.d8f9dbf44f": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver__native_transfers_TRANSFER_TYPE.427310e38e": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSFER_TYPE__STRING__VARCHAR.004b2c9c66": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver__native_transfers_SENDER.179c4b18d1": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_SENDER__STRING__VARCHAR.935658c650": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver__native_transfers_RECEIVER.1eab825a30": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_RECEIVER__STRING__VARCHAR.1124d8fd7c": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver__native_transfers_AMOUNT.c135269c58": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_AMOUNT__NUMBER__FLOAT.0748011a17": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__native_transfers_TRANSITION_ID.6af961123b": ["model.aleo_models.silver__native_transfers"], "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__2.8e7ea4e843": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS.c9d4d14ef4": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2": ["model.aleo_models.silver_observability__transactions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK.909c537da8": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK__NUMBER.6e7bd83175": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK.a7e8d7d2cc": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK__NUMBER.eccd066a90": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP.d214840fc5": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.785fc84441": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP.507a662a3b": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__day__2.16c256a7fe": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.11b541324e": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_TESTED.d238ab65d5": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_TESTED__NUMBER.0f3ccee52b": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT.9471e82f7f": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.7431a832ce": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY.efb96ec4d2": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.4cb57045ba": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT.55427aec67": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT__NUMBER.cdb9dec65b": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS.ec94b823a4": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS__ARRAY.2808debeca": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_TIMESTAMP.76b586c86c": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.8a3c52ac2d": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transitions_completeness_TEST_TIMESTAMP.8cfd29e509": ["model.aleo_models.silver_observability__transitions_completeness"], "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__2.9d37175599": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284": ["model.aleo_models.silver_observability__blocks_completeness"], "test.aleo_models.unique_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.dad8a89fd5": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.49e98bc54d": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_timestamp.607d46e17d": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_id.9ee382d87d": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_tx_id.b2781f4c38": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_succeeded.9a1609d450": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_root_action.31631b8121": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_action.08a6fb9778": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_provider.553f1a352b": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount_unadj.425b449bb0": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount.6dc753684d": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_symbol.facc7331c3": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_id.c8c9ecae19": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount_unadj.ae1f0f61ad": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount.7bb30f88a5": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_symbol.95680fca93": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_id.63e913cec4": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_inserted_timestamp.b0fc383cba": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_modified_timestamp.76fa053692": ["model.aleo_models.silver__liquidity_pool_actions_arcane"], "test.aleo_models.unique_silver__swaps_arcane_swaps_arcane_id.0e66a90f51": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_swaps_arcane_id.382e933a4b": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_block_timestamp.7124d3ef74": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_block_id.ae07ea79bf": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_tx_id.da3758b4fc": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_succeeded.658ad63987": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_swapper.e30532ac6c": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_from_amount_unadj.262b7d15e0": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_from_amount.d952b8f13e": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_from_symbol.0985ad2c91": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_from_id.499cc5f26d": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_to_amount_unadj.4c5326450c": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_to_amount.de80560a28": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_to_symbol.116dc88626": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_to_id.5a15570738": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver__swaps_arcane_root_action.04d5488b0d": ["model.aleo_models.silver__swaps_arcane"], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.efdb4b7e98": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.5239671c2c": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT.866f191153": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.5a8e6e8880": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.5b82a449dd": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.c5d0b2cc33": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED.4fe1d21e07": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.5f9df371b1": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT.1e73e0a934": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.225f59bd1e": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TOTAL_FEES.558b8cb0c7": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TOTAL_FEES__DECIMAL__FLOAT__NUMBER.ada34dd6db": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_stats__core_metrics_hourly__INSERTED_TIMESTAMP__day__1.874a5937d5": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.0797e73b88": ["model.aleo_models.silver_stats__core_metrics_hourly"], "test.aleo_models.not_null_silver__complete_provider_asset_metadata_PROVIDER.b0c689d31b": ["model.aleo_models.silver__complete_provider_asset_metadata"], "test.aleo_models.not_null_silver__complete_provider_asset_metadata_ASSET_ID.b4b221e9f2": ["model.aleo_models.silver__complete_provider_asset_metadata"], "test.aleo_models.not_null_silver__complete_provider_asset_metadata_MODIFIED_TIMESTAMP.47fee02027": ["model.aleo_models.silver__complete_provider_asset_metadata"], "test.aleo_models.unique_silver__complete_provider_asset_metadata_COMPLETE_PROVIDER_ASSET_METADATA_ID.945e90b882": ["model.aleo_models.silver__complete_provider_asset_metadata"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_asset_metadata_ASSET_ID__TOKEN_ADDRESS__NAME__SYMBOL__PLATFORM__PLATFORM_ID__PROVIDER.e355e7b6b2": ["model.aleo_models.silver__complete_provider_asset_metadata"], "test.aleo_models.not_null_silver__complete_provider_prices_PROVIDER.982c1dc287": ["model.aleo_models.silver__complete_provider_prices"], "test.aleo_models.not_null_silver__complete_provider_prices_ASSET_ID.a10e7dad30": ["model.aleo_models.silver__complete_provider_prices"], "test.aleo_models.not_null_silver__complete_provider_prices_RECORDED_HOUR.73c3cfdf0d": ["model.aleo_models.silver__complete_provider_prices"], "test.aleo_models.not_null_silver__complete_provider_prices_MODIFIED_TIMESTAMP.b205ba003b": ["model.aleo_models.silver__complete_provider_prices"], "test.aleo_models.unique_silver__complete_provider_prices_COMPLETE_PROVIDER_PRICES_ID.52bf8dd406": ["model.aleo_models.silver__complete_provider_prices"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_prices_ASSET_ID__RECORDED_HOUR__PROVIDER.6e3c3ab2b1": ["model.aleo_models.silver__complete_provider_prices"], "test.aleo_models.not_null_silver__complete_native_prices_HOUR.84672fd317": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.not_null_silver__complete_native_prices_SYMBOL.640aa16109": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.not_null_silver__complete_native_prices_BLOCKCHAIN.3557f90197": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.not_null_silver__complete_native_prices_PROVIDER.391be2433a": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.not_null_silver__complete_native_prices_PRICE.5d22b3dfe0": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.not_null_silver__complete_native_prices_IS_IMPUTED.9b41704925": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.not_null_silver__complete_native_prices__INSERTED_TIMESTAMP.030d747f3c": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.not_null_silver__complete_native_prices_MODIFIED_TIMESTAMP.595acedfe2": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.unique_silver__complete_native_prices_COMPLETE_NATIVE_PRICES_ID.6e5981548b": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_prices_HOUR__SYMBOL.9742f3d916": ["model.aleo_models.silver__complete_native_prices"], "test.aleo_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852": ["model.aleo_models.silver__complete_token_asset_metadata"], "test.aleo_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67": ["model.aleo_models.silver__complete_token_asset_metadata"], "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91": ["model.aleo_models.silver__complete_token_asset_metadata"], "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322": ["model.aleo_models.silver__complete_token_asset_metadata"], "test.aleo_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480": ["model.aleo_models.silver__complete_token_asset_metadata"], "test.aleo_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588": ["model.aleo_models.silver__complete_token_asset_metadata"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_asset_metadata_TOKEN_ADDRESS__BLOCKCHAIN.d3d6b2a62b": ["model.aleo_models.silver__complete_token_asset_metadata"], "test.aleo_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_prices_HOUR__TOKEN_ADDRESS__BLOCKCHAIN.dde8fc55cf": ["model.aleo_models.silver__complete_token_prices"], "test.aleo_models.not_null_silver__complete_native_asset_metadata_PROVIDER.2f310e1236": ["model.aleo_models.silver__complete_native_asset_metadata"], "test.aleo_models.not_null_silver__complete_native_asset_metadata_SYMBOL.ff109ff1ee": ["model.aleo_models.silver__complete_native_asset_metadata"], "test.aleo_models.not_null_silver__complete_native_asset_metadata_BLOCKCHAIN.fea8f73c16": ["model.aleo_models.silver__complete_native_asset_metadata"], "test.aleo_models.not_null_silver__complete_native_asset_metadata_MODIFIED_TIMESTAMP.c6bcef6cb9": ["model.aleo_models.silver__complete_native_asset_metadata"], "test.aleo_models.unique_silver__complete_native_asset_metadata_COMPLETE_NATIVE_ASSET_METADATA_ID.d98ec00bc9": ["model.aleo_models.silver__complete_native_asset_metadata"], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_asset_metadata_SYMBOL.6c5f561373": ["model.aleo_models.silver__complete_native_asset_metadata"], "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb": ["model.livequery_models.live"], "test.livequery_models.test_secrets__udf_register_secret.85444b4425": [], "test.livequery_models.test_secrets__udf_get_secret.1762e1eb69": [], "test.livequery_models.test_secrets__udf_get_secrets.898812e6e2": [], "test.livequery_models.test_secrets__udf_create_secret.d42bc02506": [], "test.livequery_models.test_secrets__udf_delete_secret.9f28745276": [], "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4": ["model.livequery_models.utils"], "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2": ["model.livequery_models.utils"], "test.livequery_models.test___utils_udf_introspect.79bd27a18b": ["model.livequery_models._utils"], "test.livequery_models.test_bitquery__graphql_status_200.11917beb18": ["model.livequery_models.bitquery__"], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_fred__get_series_status_200.51822e30ca": ["model.livequery_models.fred__"], "test.livequery_models.test_strangelove__get_status_200.0a58865924": ["model.livequery_models.strangelove__"], "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb": ["model.livequery_models.footprint_utils__footprint_utils"], "test.livequery_models.test_snapshot__query_status_200.35a2cffb40": ["model.livequery_models.snapshot__"], "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e": ["model.livequery_models.credmark_utils__"], "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1": ["model.livequery_models.allday__"], "test.livequery_models.test_transpose__get_status_200.8721d94682": ["model.livequery_models.transpose__"], "test.livequery_models.test_subquery__graphql_status_200.02580cea10": ["model.livequery_models.subquery__"], "test.livequery_models.test_defillama__get_status_200.90864f8f89": ["model.livequery_models.defillama__"], "test.livequery_models.test_reservoir__get_status_200.cb905ea233": ["model.livequery_models.reservoir__"], "test.livequery_models.test_apilayer__get_status_200.fa02bd0f30": ["model.livequery_models.apilayer__"], "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0": ["model.livequery_models.helius_apis__helius_utils"], "test.livequery_models.test_helius_apis__balances_status_200.d668884644": ["model.livequery_models.helius_apis__helius_utils"], "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da": ["model.livequery_models.helius_apis__helius_utils"], "test.livequery_models.test_cmc__get_status_200.bc3231cada": ["model.livequery_models.cmc__"], "test.livequery_models.test_espn__get_status_200.b4f84cc829": ["model.livequery_models.espn__"], "test.livequery_models.test_opensea__get_status_200.5de63cfbb1": ["model.livequery_models.opensea__"], "test.livequery_models.test_coingecko__get_status_200.047f15c956": ["model.livequery_models.coingecko__"], "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb": ["model.livequery_models.deepnftvalue__"], "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94": ["model.livequery_models.github_actions__github_utils"], "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb": ["model.livequery_models.github_actions__github_utils"], "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553": ["model.livequery_models.github_actions__github_utils"], "test.livequery_models.test_github_utils__octocat_status_200.3573395088": ["model.livequery_models.github_utils__github_utils"], "test.livequery_models.test_dappradar__get_status_200.86e3502ff3": ["model.livequery_models.dappradar__"], "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652": ["model.livequery_models.chainbase_utils__"], "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4": ["model.livequery_models.alchemy_transfers__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24": ["model.livequery_models.alchemy_tokens__alchemy_utils"], "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb": ["model.livequery_models.alchemy_tokens__alchemy_utils"], "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76": ["model.livequery_models.alchemy_tokens__alchemy_utils"], "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220": ["model.livequery_models.topshot__"], "test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6": ["model.livequery_models.solscan__"], "test.livequery_models.test_covalent__get_status_200.bb43bb7f69": ["model.livequery_models.covalent__"], "test.livequery_models.test_stakingrewards__query_status_200.144a35304b": ["model.livequery_models.stakingrewards__"], "test.livequery_models.test_nftscan__get_status_200.33868e0f0d": ["model.livequery_models.nftscan__"], "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707": ["model.livequery_models.playgrounds__"], "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee": ["model.livequery_models.playgrounds__"], "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822": ["model.livequery_models.dapplooker__"], "source.aleo_models.crosschain.dim_labels": [], "source.aleo_models.crosschain_silver.number_sequence": [], "source.aleo_models.crosschain_silver.labels_combined": [], "source.aleo_models.crosschain_silver.complete_token_asset_metadata": [], "source.aleo_models.crosschain_silver.complete_token_prices": [], "source.aleo_models.crosschain_silver.complete_provider_asset_metadata": [], "source.aleo_models.crosschain_silver.complete_provider_prices": [], "source.aleo_models.crosschain_silver.complete_native_asset_metadata": [], "source.aleo_models.crosschain_silver.complete_native_prices": [], "source.aleo_models.bronze_streamline.blocks": [], "source.aleo_models.bronze_streamline.transactions": [], "source.aleo_models.github_actions.workflows": [], "source.livequery_models.crosschain.dim_date_hours": [], "source.livequery_models.crosschain.dim_contracts": [], "source.livequery_models.crosschain.dim_evm_event_abis": [], "source.livequery_models.ethereum_core.fact_event_logs": [], "source.livequery_models.ethereum_core.ez_decoded_event_logs": []}, "child_map": {"model.aleo_models.core__fact_block_round_batches": ["model.aleo_models.test_core__block_round_batches_full", "model.aleo_models.test_core__block_round_batches_recent", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_AUTHOR.c78428dd2c", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BATCH_ID.0ee6fc7975", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_ID.0a9ca47434", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_TIMESTAMP.40e237b77b", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_COMMITTEE_ID.e43b6d6933", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_ROUND.792262cac5", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_TRANSMISSION_IDS.73a1a1b8d4", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_round_batches_BLOCK_TIMESTAMP__day__1.e07b524c9d"], "model.aleo_models.core__fact_block_solutions": ["model.aleo_models.test_core__block_solutions_full", "model.aleo_models.test_core__block_solutions_recent", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_ADDRESS.de9211d159", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_ID.22feac23a3", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_PUZZLE_REWARD.558b82bad3", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_TIMESTAMP.934763eab7", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_COUNTER.1f899ec7a6", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_EPOCH_HASH.ca095229c0", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD.fc3dbe3aca", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD_RAW.e8b02b6278", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_SOLUTION_ID.8323de7856", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_TARGET.2d39d2be4f", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_solutions_BLOCK_TIMESTAMP__day__1.e8ab764679"], "model.aleo_models.core__fact_transitions": ["model.aleo_models.silver__liquidity_pool_actions_arcane", "model.aleo_models.silver__swaps_arcane", "model.aleo_models.silver__token_registrations", "model.aleo_models.test_core__transitions_full", "model.aleo_models.test_core__transitions_recent", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_ID.4dc5d2b080", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_TIMESTAMP.5d5ee056a0", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_FUNCTION.304c84273d", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INDEX.bed4108c73", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INPUTS.0097435c46", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_OUTPUTS.473e6ec1d0", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_PROGRAM_ID.fff8434ef2", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TRANSITION_ID.88d41f74b0", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TX_ID.ed3d7d2fc4", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transitions_BLOCK_TIMESTAMP__day__1.8de7cb7750"], "model.aleo_models.core__fact_blocks": ["model.aleo_models.silver_observability__blocks_completeness", "model.aleo_models.silver_observability__transactions_completeness", "model.aleo_models.silver_observability__transitions_completeness", "model.aleo_models.silver_stats__core_metrics_block_hourly", "model.aleo_models.stats__ez_core_metrics_hourly", "model.aleo_models.test_core__blocks_recent", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_REWARD.8a7df7ccb4", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_COINBASE_TARGET.17ff1fa530", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_PROOF_TARGET.5082e2821b", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_WEIGHT.54ded95d23", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_FACT_BLOCKS_ID.9f3cfdc8fc", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_INSERTED_TIMESTAMP.2409df43de", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_MODIFIED_TIMESTAMP.a134d35ed2", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_HASH.303c5cdb2c", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PUZZLE_REWARD.9abdd6d4bc", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_ROUND.e005d3250f", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER.9d55d56330", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_REWARD__NUMBER__FLOAT.7b3f7c5222", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_COINBASE_TARGET__NUMBER__FLOAT.b3386b7291", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_PROOF_TARGET__NUMBER__FLOAT.e049f0f54d", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_WEIGHT__NUMBER__FLOAT.7998cba785", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NETWORK__STRING__VARCHAR.d57c531d17", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PUZZLE_REWARD__NUMBER__FLOAT.deaa8237fa", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_ROUND__NUMBER__FLOAT.713c92704e", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808", "test.aleo_models.dbt_utils_unique_combination_of_columns_core__fact_blocks_NETWORK__BLOCK_ID.54f426e528", "test.aleo_models.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb", "test.aleo_models.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93", "test.aleo_models.not_null_core__fact_blocks_BLOCK_REWARD.bb713926f5", "test.aleo_models.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34", "test.aleo_models.not_null_core__fact_blocks_COINBASE_TARGET.59fb9ba542", "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_PROOF_TARGET.94ec4ffc5d", "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_WEIGHT.d5cc5607fc", "test.aleo_models.not_null_core__fact_blocks_FACT_BLOCKS_ID.e04af95ef1", "test.aleo_models.not_null_core__fact_blocks_INSERTED_TIMESTAMP.2bc7f6716c", "test.aleo_models.not_null_core__fact_blocks_MODIFIED_TIMESTAMP.ba893bde8a", "test.aleo_models.not_null_core__fact_blocks_NETWORK.b3fe8ae22a", "test.aleo_models.not_null_core__fact_blocks_PREVIOUS_HASH.a5b9336c67", "test.aleo_models.not_null_core__fact_blocks_PUZZLE_REWARD.7e6616d5f4", "test.aleo_models.not_null_core__fact_blocks_ROUND.6a7ae2c6cd", "test.aleo_models.not_null_core__fact_blocks_TX_COUNT.dd649c1087", "test.aleo_models.unique_core__fact_blocks_FACT_BLOCKS_ID.ae21b89ade"], "model.aleo_models.core__fact_transfers": ["model.aleo_models.test_core__transfers_full", "model.aleo_models.test_core__transfers_recent", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_IS_NATIVE.11f4a568d6", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TOKEN_ADDRESS.87260f30a0", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transfers_BLOCK_TIMESTAMP__day__1.b9bb12d3c2"], "model.aleo_models.core__dim_labels": ["test.aleo_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__ADDRESS.59b513fc33", "test.aleo_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "test.aleo_models.not_null_core__dim_labels_ADDRESS_NAME.0de78829a4", "test.aleo_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "test.aleo_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "test.aleo_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225", "test.aleo_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16", "test.aleo_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "test.aleo_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "test.aleo_models.not_null_core__dim_labels_MODIFIED_TIMESTAMP.02c7121cbb", "test.aleo_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc", "test.aleo_models.unique_core__dim_labels_DIM_LABELS_ID.af1f2177a6"], "model.aleo_models.core__fact_transactions": ["model.aleo_models.silver_stats__core_metrics_hourly", "model.aleo_models.stats__ez_core_metrics_hourly", "model.aleo_models.test_core__transactions_recent", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_DEPLOYMENT_MSG.13dd6ba041", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_EXECUTION_MSG.d8744ee919", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_PAYER.2d86608e80", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_RAW.2a9f593582", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FINALIZE_MSG.47c5e66540", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_INDEX.a65a072fb0", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_OWNER_MSG.48cf57eabb", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_REJECTED_MSG.210e239eb5", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TRANSITION_COUNT.6539e193ba", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_TYPE.b04b8ae75c", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_tx_succeeded.5b133acfaf", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832"], "model.aleo_models.core__dim_programs": ["model.aleo_models.test_core__programs_recent", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_ID.4fe2c20e20", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_TIMESTAMP.5bfe8d93a4", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_EDITION.2709d9ec21", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM.70cc7c152e", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM_ID.d7959096fa", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_VERIFYING_KEYS.17d8e54386"], "model.aleo_models.core__dim_token_registrations": ["test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_ID_CREATED.0f1db2f3a5", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_TIMESTAMP_CREATED.65bb29727d", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_DECIMALS.bd77ccf50f", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_PARTY.03ebb47f35", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_REQUIRED.4aad5b0f85", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_MAX_SUPPLY.e1d9fb49f3", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_NAME_ENCODED.4ec37ad556", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL.c71d617563", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL_ENCODED.ce6a79e6f0", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_ID.28ae55e881", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_NAME.c1a4850472", "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TX_ID_CREATED.5d8f125e21", "test.aleo_models.not_null_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.66976bee8c", "test.aleo_models.not_null_core__dim_token_registrations_INSERTED_TIMESTAMP.d01fb16229", "test.aleo_models.not_null_core__dim_token_registrations_MODIFIED_TIMESTAMP.c241d92ffe", "test.aleo_models.not_null_core__dim_token_registrations_TOKEN_ID.3af44258e3", "test.aleo_models.unique_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.805acb60e8", "test.aleo_models.unique_core__dim_token_registrations_TOKEN_ID.022fc34b0d"], "model.aleo_models.defi__fact_swaps": ["model.aleo_models.test_defi__swaps_recent", "test.aleo_models.accepted_values_defi__fact_swaps_SUCCEEDED__True__False.d58188a7bb", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_ID.a78a351c3d", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_TIMESTAMP.12d6b07914", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT.41696d7b42", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT_UNADJ.0d34c88cec", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_ID.4527f01191", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_SYMBOL.ca24fe91ae", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_PLATFORM.1b397af8a1", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_ROOT_ACTION.52722e1aba", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SUCCEEDED.f0f33f4970", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SWAPPER.9a749d86f0", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT.daa015c5af", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT_UNADJ.81b2f0514e", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_ID.0f8c6c4f56", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_SYMBOL.6221dd7cf9", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TX_ID.67830b42e0", "test.aleo_models.not_null_defi__fact_swaps_BLOCK_ID.e151cc187f", "test.aleo_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65", "test.aleo_models.not_null_defi__fact_swaps_FACT_SWAPS_ID.cdd2d36e98", "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT.4363eb7533", "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT_UNADJ.5b2b90a289", "test.aleo_models.not_null_defi__fact_swaps_FROM_ID.9d9142108f", "test.aleo_models.not_null_defi__fact_swaps_FROM_SYMBOL.3d70a0a69b", "test.aleo_models.not_null_defi__fact_swaps_INSERTED_TIMESTAMP.c931848598", "test.aleo_models.not_null_defi__fact_swaps_MODIFIED_TIMESTAMP.d083b26328", "test.aleo_models.not_null_defi__fact_swaps_PLATFORM.b6233329b7", "test.aleo_models.not_null_defi__fact_swaps_ROOT_ACTION.d78e8e179e", "test.aleo_models.not_null_defi__fact_swaps_SUCCEEDED.b960e174a2", "test.aleo_models.not_null_defi__fact_swaps_SWAPPER.a8497d4cd6", "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT.6e0eb16794", "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT_UNADJ.b963eea9e5", "test.aleo_models.not_null_defi__fact_swaps_TO_ID.c78dd0d92f", "test.aleo_models.not_null_defi__fact_swaps_TO_SYMBOL.3739e95840", "test.aleo_models.not_null_defi__fact_swaps_TX_ID.84d994da53", "test.aleo_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647"], "model.aleo_models.defi__fact_liquidity_pool_actions": ["model.aleo_models.test_defi__liquidity_actions_recent", "test.aleo_models.accepted_values_defi__fact_liquidity_pool_actions_SUCCEEDED__True__False.2845e63de8", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_ID.20580d4f45", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.d3d9a20445", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.ed334466e8", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.cca0bcbfac", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.f4f97ba237", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_ROOT_ACTION.6b8451c1d4", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_SUCCEEDED.7fc7637654", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.871c5bd4d6", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.577fe366a9", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_ID.20b62065f7", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.f12d3712c8", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.3e1ee01fe5", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.8dacf5d1d0", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_ID.ce9f959adf", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.fc64ae06cf", "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TX_ID.7452491d2a", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_ID.a63b3fcc13", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.bc87b8d16e", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.14dea1b963", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_INSERTED_TIMESTAMP.724ca84c98", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.cb97f5de7e", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.a45c6618da", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.2fbeaace44", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_MODIFIED_TIMESTAMP.665736575b", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_ROOT_ACTION.0ee8f28262", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_SUCCEEDED.debfae0b10", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.363b26c8b1", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.0cfbe2f5f3", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_ID.79eaeab93d", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.3f10a13478", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.2d8079e808", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.00a3c4c0da", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_ID.a4379c4ba5", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.bd3c630c8c", "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TX_ID.96aca3a8ff", "test.aleo_models.unique_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.5554831fc3"], "model.aleo_models.stats__ez_core_metrics_hourly": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_COUNT__NUMBER__FLOAT.04a49945de", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MAX__NUMBER__FLOAT.c0b6bda28a", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MIN__NUMBER__FLOAT.1ea9989d27", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.69de9bb1e9", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE__DECIMAL__FLOAT__NUMBER.b9208111a7", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.6291586797", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.1e160d8731", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.da21939902", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.cc092ab5ee", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_stats__ez_core_metrics_hourly_INSERTED_TIMESTAMP__day__1.5cba713d8f", "test.aleo_models.dbt_utils_unique_combination_of_columns_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.f4cde92642", "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_COUNT.67c66eb706", "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MAX.82e9a01fcf", "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MIN.cb99895dd8", "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.c43366f375", "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE.56d6db6fc6", "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT.8718680bf8", "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED.1e76008c62", "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.b5e50f7ef6", "test.aleo_models.not_null_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT.4a7dab96a7"], "model.aleo_models.test_core__programs_recent": ["test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_ID.1af206eea3", "test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP.838d46a1a2", "test.aleo_models.not_null_test_core__programs_recent_EDITION.33eec4e36a", "test.aleo_models.not_null_test_core__programs_recent_PROGRAM.549ff4fe35", "test.aleo_models.not_null_test_core__programs_recent_PROGRAM_ID.a5fad2813f", "test.aleo_models.not_null_test_core__programs_recent_VERIFYING_KEYS.79b5e3b4fd"], "model.aleo_models.test_core__blocks_recent": ["test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__blocks_recent_BLOCK_TIMESTAMP__hour__3.cb089947b4", "test.aleo_models.fsc_utils_sequence_gaps_test_core__blocks_recent_BLOCK_ID.f87a178f75", "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_ID.7aecad87b8", "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_TIMESTAMP.2225f971b2", "test.aleo_models.unique_test_core__blocks_recent_BLOCK_ID.c26b6eacc3"], "model.aleo_models.test_core__transfers_full": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_AMOUNT__FLOAT.a4c0d1b1f0", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_ID__NUMBER.db4a153014", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_TIMESTAMP__timestamp_ntz.a2acec0665", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_IS_NATIVE__BOOLEAN.457eaccf7b", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_RECEIVER__VARCHAR.ed72eb7f1c", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_SENDER__VARCHAR.fbd57ffc9e", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TOKEN_ADDRESS__VARCHAR.06afd1e0e1", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSFER_TYPE__VARCHAR.c590e4df83", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSITION_ID__VARCHAR.dfe94d6066", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_ID__VARCHAR.a4a360729b", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_SUCCEEDED__BOOLEAN.405c5b0551", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_full_BLOCK_TIMESTAMP__day__1.bed6c29261", "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_full_TRANSITION_ID__TX_ID__BLOCK_ID.43cdacc3a1", "test.aleo_models.not_null_test_core__transfers_full_AMOUNT.8a4b2f1b6d", "test.aleo_models.not_null_test_core__transfers_full_BLOCK_ID.44a0160596", "test.aleo_models.not_null_test_core__transfers_full_BLOCK_TIMESTAMP.680028f04e", "test.aleo_models.not_null_test_core__transfers_full_IS_NATIVE.2bd3fa38a4", "test.aleo_models.not_null_test_core__transfers_full_RECEIVER.2b9e95133e", "test.aleo_models.not_null_test_core__transfers_full_SENDER.3d5cbf9a67", "test.aleo_models.not_null_test_core__transfers_full_TOKEN_ADDRESS.7a33e30844", "test.aleo_models.not_null_test_core__transfers_full_TRANSFER_TYPE.c3b93be59e", "test.aleo_models.not_null_test_core__transfers_full_TRANSITION_ID.e4ae0e9c5a", "test.aleo_models.not_null_test_core__transfers_full_TX_ID.aa9e490b50", "test.aleo_models.not_null_test_core__transfers_full_TX_SUCCEEDED.d8326e4ad1"], "model.aleo_models.test_core__transfers_recent": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_AMOUNT__FLOAT.9b1e3d4bf7", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_BLOCK_TIMESTAMP__timestamp_ntz.cc15fe2f72", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_IS_NATIVE__BOOLEAN.4be4a86231", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_RECEIVER__VARCHAR.b5644d9fb7", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_SENDER__VARCHAR.cb70ccc9bc", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_TOKEN_ADDRESS__VARCHAR.5ac2f67dd9", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_recent_BLOCK_TIMESTAMP__hour__3.230c250397", "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_recent_TRANSITION_ID__TX_ID__BLOCK_ID.2cc09c6492", "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_ID.f6ecee38b4", "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_TIMESTAMP.ea43762e52", "test.aleo_models.not_null_test_core__transfers_recent_INDEX.7875007827", "test.aleo_models.not_null_test_core__transfers_recent_IS_NATIVE.3f4aa5f093", "test.aleo_models.not_null_test_core__transfers_recent_TRANSFER_TYPE.07b266a36e", "test.aleo_models.not_null_test_core__transfers_recent_TRANSITION_ID.cab60da5cc", "test.aleo_models.not_null_test_core__transfers_recent_TX_ID.accb7c73e5", "test.aleo_models.not_null_test_core__transfers_recent_TX_SUCCEEDED.4b6984e485"], "model.aleo_models.test_core__block_solutions_full": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_ADDRESS__varchar.02bfdb533b", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_ID__number.a9475a9a0f", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD__number.d15dabbd7b", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_TIMESTAMP__timestamp_ntz.361450a37d", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_COUNTER__varchar.d79fe043c3", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_EPOCH_HASH__varchar.e6c6288780", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD_RAW__number.78bfd5fac7", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD__float.ff45328781", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_SOLUTION_ID__varchar.056235cfd9", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_TARGET__number.16668ae8ed", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_full_BLOCK_TIMESTAMP__day__1.bb2d43e68e", "test.aleo_models.not_null_test_core__block_solutions_full_ADDRESS.3a1563be64", "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_ID.af65e503a3", "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD.091930da06", "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_TIMESTAMP.63c13702db", "test.aleo_models.not_null_test_core__block_solutions_full_COUNTER.93b37d2afb", "test.aleo_models.not_null_test_core__block_solutions_full_EPOCH_HASH.daf662ca58", "test.aleo_models.not_null_test_core__block_solutions_full_REWARD.ed62ea6e8e", "test.aleo_models.not_null_test_core__block_solutions_full_REWARD_RAW.1093af5149", "test.aleo_models.not_null_test_core__block_solutions_full_SOLUTION_ID.8a323cbd55", "test.aleo_models.not_null_test_core__block_solutions_full_TARGET.9197ff119b"], "model.aleo_models.test_core__block_solutions_recent": ["test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_recent_BLOCK_TIMESTAMP__hour__3.1d34ec0913", "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_solutions_recent_SOLUTION_ID__BLOCK_ID.e25c9f1601", "test.aleo_models.not_null_test_core__block_solutions_recent_ADDRESS.5ac1c26e6d", "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_ID.276b7669d8", "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_PUZZLE_REWARD.3a26876298", "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_TIMESTAMP.8556c30ded", "test.aleo_models.not_null_test_core__block_solutions_recent_COUNTER.676606a4cc", "test.aleo_models.not_null_test_core__block_solutions_recent_EPOCH_HASH.3ece27be86", "test.aleo_models.not_null_test_core__block_solutions_recent_REWARD_RAW.92470140bb", "test.aleo_models.not_null_test_core__block_solutions_recent_SOLUTION_ID.ed25c17e24", "test.aleo_models.not_null_test_core__block_solutions_recent_TARGET.58ba4e2d92"], "model.aleo_models.test_defi__swaps_recent": ["test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_defi__swaps_recent_BLOCK_TIMESTAMP__day__3.97d3ae46b6", "test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__swaps_recent_TX_ID__SWAPPER__BLOCK_ID.5b52cfad7b", "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_ID.0885e16138", "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_TIMESTAMP.aa9c91bac3"], "model.aleo_models.test_defi__liquidity_actions_recent": ["test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__liquidity_actions_recent_TX_ID__LIQUIDITY_POOL_PROTOCOL__LIQUIDITY_PROVIDER__TOKEN1_ID__TOKEN2_ID.385663127b", "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_ID.77677822d5", "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_TIMESTAMP.433bfa00a0"], "model.aleo_models.test_core__transitions_full": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_ID__NUMBER.330953c31f", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_TIMESTAMP__timestamp_ntz.34883a9ca8", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_FUNCTION__VARCHAR.ac1009a796", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INDEX__NUMBER.df84f98823", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INPUTS__VARIANT.6022be75ee", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_OUTPUTS__VARIANT.f224c5c2f2", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_PROGRAM_ID__VARCHAR.a3fe55fdb8", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TRANSITION_ID__VARCHAR.7414b60884", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TX_ID__VARCHAR.dcdaa15bc5", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_full_BLOCK_TIMESTAMP__day__1.10b89bf39b", "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_full_TRANSITION_ID__TX_ID__BLOCK_ID.14b5b60dfb", "test.aleo_models.not_null_test_core__transitions_full_BLOCK_ID.cec6b5a3b5", "test.aleo_models.not_null_test_core__transitions_full_BLOCK_TIMESTAMP.08683331a8", "test.aleo_models.not_null_test_core__transitions_full_INPUTS.a310350a3f", "test.aleo_models.not_null_test_core__transitions_full_OUTPUTS.7e84b2dd8b", "test.aleo_models.not_null_test_core__transitions_full_PROGRAM_ID.54aef3f41e", "test.aleo_models.not_null_test_core__transitions_full_TRANSITION_ID.b3f5414d72", "test.aleo_models.not_null_test_core__transitions_full_TX_ID.5e283fda3d"], "model.aleo_models.test_core__transitions_recent": ["test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_recent_BLOCK_TIMESTAMP__hour__3.94ee0b9ed0", "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_recent_TRANSITION_ID__TX_ID__BLOCK_ID.5baa0beb34", "test.aleo_models.not_null_test_core__transitions_recent_BLOCK_TIMESTAMP.40a1e65ad9", "test.aleo_models.not_null_test_core__transitions_recent_INPUTS.5407911e94", "test.aleo_models.not_null_test_core__transitions_recent_OUTPUTS.236aa37a1e", "test.aleo_models.not_null_test_core__transitions_recent_PROGRAM_ID.4fe73c31dc", "test.aleo_models.not_null_test_core__transitions_recent_TRANSITION_ID.278a50751b", "test.aleo_models.not_null_test_core__transitions_recent_TX_ID.0c1c4942f9"], "model.aleo_models.test_core__block_round_batches_recent": ["test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_recent_BLOCK_TIMESTAMP__hour__3.31f275ffcb", "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_round_batches_recent_BLOCK_ID__BATCH_ID__AUTHOR.d053219a63", "test.aleo_models.not_null_test_core__block_round_batches_recent_BATCH_ID.561ce0099f", "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_ID.d971186ebb", "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_TIMESTAMP.62dec4ef7e", "test.aleo_models.not_null_test_core__block_round_batches_recent_COMMITTEE_ID.7f6368c8f4", "test.aleo_models.not_null_test_core__block_round_batches_recent_ROUND.04290e7152"], "model.aleo_models.test_core__block_round_batches_full": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_AUTHOR__VARCHAR.5259a818e2", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BATCH_ID__VARCHAR.1fd6f06fa8", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_ID__NUMBER.8aaa3c9247", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.905525404b", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_COMMITTEE_ID__VARCHAR.1d92ec8574", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_ROUND__VARCHAR.37a81c3d55", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_full_BLOCK_TIMESTAMP__day__1.643c5f1859", "test.aleo_models.not_null_test_core__block_round_batches_full_AUTHOR.ad0397ca02", "test.aleo_models.not_null_test_core__block_round_batches_full_BATCH_ID.3e510992b1", "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_ID.62e487d703", "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_TIMESTAMP.2d68e82f29", "test.aleo_models.not_null_test_core__block_round_batches_full_COMMITTEE_ID.dbc5a638b0", "test.aleo_models.not_null_test_core__block_round_batches_full_ROUND.040dc0178d"], "model.aleo_models.test_core__transactions_recent": ["test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transactions_recent_BLOCK_TIMESTAMP__hour__3.106542823f", "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transactions_recent_TX_ID__BLOCK_ID.ec9bf4e9e1", "test.aleo_models.not_null_test_core__transactions_recent_BLOCK_TIMESTAMP.b35a37cfc9", "test.aleo_models.not_null_test_core__transactions_recent_TRANSITION_COUNT.b4f4994e62", "test.aleo_models.not_null_test_core__transactions_recent_TX_ID.f41922a071", "test.aleo_models.not_null_test_core__transactions_recent_TX_SUCCEEDED.dbcb46771f", "test.aleo_models.not_null_test_core__transactions_recent_TX_TYPE.bf23c504c9", "test.aleo_models.unique_test_core__transactions_recent_TX_ID.e391599cd6"], "model.aleo_models.price__fact_prices_ohlc_hourly": [], "model.aleo_models.price__ez_asset_metadata": [], "model.aleo_models.price__dim_asset_metadata": [], "model.aleo_models.price__ez_prices_hourly": ["model.aleo_models.stats__ez_core_metrics_hourly"], "model.aleo_models.github_actions__tasks": ["model.aleo_models.github_actions__task_history", "model.aleo_models.github_actions__task_schedule"], "model.aleo_models.github_actions__task_history": ["model.aleo_models.github_actions__task_performance"], "model.aleo_models.github_actions__task_schedule": ["model.aleo_models.github_actions__task_performance"], "model.aleo_models.github_actions__task_performance": ["model.aleo_models.github_actions__current_task_status"], "model.aleo_models.github_actions__current_task_status": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__2.c9f4d937df"], "model.aleo_models.streamline__blocks": ["model.aleo_models.streamline__blocks_realtime"], "model.aleo_models.streamline__chainhead": ["model.aleo_models.streamline__blocks"], "model.aleo_models._max_block_by_date": ["model.aleo_models.test_core__block_round_batches_recent", "model.aleo_models.test_core__block_solutions_recent", "model.aleo_models.test_core__blocks_recent", "model.aleo_models.test_core__programs_recent", "model.aleo_models.test_core__transactions_recent", "model.aleo_models.test_core__transfers_recent", "model.aleo_models.test_core__transitions_recent", "model.aleo_models.test_defi__liquidity_actions_recent", "model.aleo_models.test_defi__swaps_recent"], "model.aleo_models.streamline__blocks_realtime": [], "model.aleo_models.streamline__blocks_complete": ["model.aleo_models.streamline__blocks_realtime"], "model.aleo_models.silver__transactions": ["model.aleo_models.core__fact_transactions", "model.aleo_models.silver__programs", "model.aleo_models.silver__transitions", "model.aleo_models.silver__transitions_fee", "model.aleo_models.silver_observability__transactions_completeness", "model.aleo_models.silver_observability__transitions_completeness", "test.aleo_models.accepted_values_silver__transactions_TX_TYPE__deploy__execute__fee.c161516da6", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6", "test.aleo_models.not_null_silver__transactions_TX_TYPE.94f5edcf76"], "model.aleo_models.silver__transitions": ["model.aleo_models.core__fact_transitions", "model.aleo_models.silver__native_transfers", "model.aleo_models.silver__nonnative_transfers", "model.aleo_models.silver_observability__transitions_completeness", "test.aleo_models.not_null_silver__transitions_BLOCK_ID.bbe019b39d", "test.aleo_models.not_null_silver__transitions_BLOCK_TIMESTAMP.afd4cf24b8", "test.aleo_models.not_null_silver__transitions_FUNCTION.71fc03afe4", "test.aleo_models.not_null_silver__transitions_INDEX.48df867820", "test.aleo_models.not_null_silver__transitions_INPUTS.0bb14ba3c1", "test.aleo_models.not_null_silver__transitions_OUTPUTS.c2a5fb73fc", "test.aleo_models.not_null_silver__transitions_PROGRAM_ID.74bd45f9a1", "test.aleo_models.not_null_silver__transitions_TRANSITIONS_ID.4a45c510c7", "test.aleo_models.not_null_silver__transitions_TRANSITION_ID.7ee1f08ff1", "test.aleo_models.not_null_silver__transitions_TX_ID.b2db0c6105", "test.aleo_models.not_null_silver__transitions_TYPE.a2cee98629", "test.aleo_models.unique_silver__transitions_TRANSITIONS_ID.0b130702dd", "test.aleo_models.unique_silver__transitions_TRANSITION_ID.4afb2941b0"], "model.aleo_models.silver__labels": ["model.aleo_models.core__dim_labels"], "model.aleo_models.silver__transitions_fee": ["model.aleo_models.core__fact_transactions", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transitions_fee_BLOCK_ID__TX_ID__TRANSITION_ID.4605a65647", "test.aleo_models.not_null_silver__transitions_fee_BLOCK_ID.448830d765", "test.aleo_models.not_null_silver__transitions_fee_BLOCK_TIMESTAMP.da4eb0a3f0", "test.aleo_models.not_null_silver__transitions_fee_FUNCTION.b91e848824", "test.aleo_models.not_null_silver__transitions_fee_INPUTS.990589d691", "test.aleo_models.not_null_silver__transitions_fee_OUTPUTS.f3d1314c3a", "test.aleo_models.not_null_silver__transitions_fee_PROGRAM_ID.83e290b7f9", "test.aleo_models.not_null_silver__transitions_fee_SUCCEEDED.6c5db24350", "test.aleo_models.not_null_silver__transitions_fee_TRANSITION_ID.ca32598656", "test.aleo_models.not_null_silver__transitions_fee_TX_ID.ab5e58287c", "test.aleo_models.unique_silver__transitions_fee_TRANSITION_ID.b254898411"], "model.aleo_models.silver__nonnative_transfers": ["model.aleo_models.core__fact_transfers", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_AMOUNT__NUMBER__FLOAT.a8f76752f9", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_ID__NUMBER__FLOAT.60d1f0dd26", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0a10fe399f", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_RECEIVER__STRING__VARCHAR.f84d37e7f8", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_SENDER__STRING__VARCHAR.0ba22db44d", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSFER_TYPE__STRING__VARCHAR.e696b5a6e9", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSITION_ID__STRING__VARCHAR.9d8b17f55a", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_ID__STRING__VARCHAR.851fa74156", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_SUCCEEDED__BOOLEAN.90878c6c53", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__nonnative_transfers_INDEX__NUMBER.89aab49a7e", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nonnative_transfers_BLOCK_TIMESTAMP__day__1.9392199c66", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__nonnative_transfers_TRANSITION_ID.e6bf2f36fc", "test.aleo_models.not_null_silver__nonnative_transfers_AMOUNT.d7f1ebd098", "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_ID.f46d1d4fda", "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_TIMESTAMP.7304ed77b5", "test.aleo_models.not_null_silver__nonnative_transfers_INDEX.9e1f26a6b5", "test.aleo_models.not_null_silver__nonnative_transfers_RECEIVER.06a07e2030", "test.aleo_models.not_null_silver__nonnative_transfers_SENDER.aeb92dc6a2", "test.aleo_models.not_null_silver__nonnative_transfers_TRANSFER_TYPE.dedcc154e8", "test.aleo_models.not_null_silver__nonnative_transfers_TRANSITION_ID.a93330752b", "test.aleo_models.not_null_silver__nonnative_transfers_TX_ID.1426f62e21", "test.aleo_models.not_null_silver__nonnative_transfers_TX_SUCCEEDED.23e46f1519"], "model.aleo_models.silver__native_transfers": ["model.aleo_models.core__fact_transfers", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_AMOUNT__NUMBER__FLOAT.0748011a17", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_ID__NUMBER__FLOAT.81e7861daa", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.eb086929f1", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_RECEIVER__STRING__VARCHAR.1124d8fd7c", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_SENDER__STRING__VARCHAR.935658c650", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSFER_TYPE__STRING__VARCHAR.004b2c9c66", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSITION_ID__STRING__VARCHAR.3b2b1dd0a1", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_ID__STRING__VARCHAR.a7e979ed60", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_SUCCEEDED__BOOLEAN.d8f9dbf44f", "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__native_transfers_INDEX__NUMBER.eb69d10f39", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__native_transfers_BLOCK_TIMESTAMP__day__1.2d2bf40c31", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__native_transfers_TRANSITION_ID.6af961123b", "test.aleo_models.not_null_silver__native_transfers_AMOUNT.c135269c58", "test.aleo_models.not_null_silver__native_transfers_BLOCK_ID.5e3c7de616", "test.aleo_models.not_null_silver__native_transfers_BLOCK_TIMESTAMP.63641531f9", "test.aleo_models.not_null_silver__native_transfers_INDEX.61be8d9435", "test.aleo_models.not_null_silver__native_transfers_RECEIVER.1eab825a30", "test.aleo_models.not_null_silver__native_transfers_SENDER.179c4b18d1", "test.aleo_models.not_null_silver__native_transfers_TRANSFER_TYPE.427310e38e", "test.aleo_models.not_null_silver__native_transfers_TRANSITION_ID.54e8500287", "test.aleo_models.not_null_silver__native_transfers_TX_ID.01c9c62342", "test.aleo_models.not_null_silver__native_transfers_TX_SUCCEEDED.ea0c362e96"], "model.aleo_models.silver__block_round_batches": ["model.aleo_models.core__fact_block_round_batches", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_round_batches_BLOCK_TIMESTAMP__day__1.4ca9507b37", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_round_batches_BLOCK_ID__ROUND__BATCH_ID.cb50403c63", "test.aleo_models.not_null_silver__block_round_batches_AUTHOR.b517797091", "test.aleo_models.not_null_silver__block_round_batches_BATCH_ID.f79193cd9f", "test.aleo_models.not_null_silver__block_round_batches_BLOCK_ID.d56ba7eaa6", "test.aleo_models.not_null_silver__block_round_batches_BLOCK_TIMESTAMP.afe41027de", "test.aleo_models.not_null_silver__block_round_batches_COMMITTEE_ID.e9dcad2695", "test.aleo_models.not_null_silver__block_round_batches_ROUND.8d90a0fbe4", "test.aleo_models.not_null_silver__block_round_batches_TRANSMISSION_IDS.2943ef7ef2"], "model.aleo_models.silver__block_solutions": ["model.aleo_models.core__fact_block_solutions", "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_BLOCK_PUZZLE_REWARD__0.43a041aab9", "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_REWARD_RAW__0.995df7a67a", "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_TARGET__0.b9c2ef6877", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_BLOCK_PUZZLE_REWARD__NUMBER__FLOAT.434ba3d0af", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_TARGET__NUMBER__BIGINT.f884206507", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_solutions_BLOCK_TIMESTAMP__day__1.7ba6a86b55", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_solutions_BLOCK_ID__SOLUTION_ID.5138ce7dc4", "test.aleo_models.not_null_silver__block_solutions_ADDRESS.738847c2b0", "test.aleo_models.not_null_silver__block_solutions_BLOCK_ID.a77b783b26", "test.aleo_models.not_null_silver__block_solutions_BLOCK_PUZZLE_REWARD.24faf4f201", "test.aleo_models.not_null_silver__block_solutions_BLOCK_TIMESTAMP.a8fbe6f8fe", "test.aleo_models.not_null_silver__block_solutions_COUNTER.887b97bb42", "test.aleo_models.not_null_silver__block_solutions_EPOCH_HASH.cf3f348af3", "test.aleo_models.not_null_silver__block_solutions_REWARD_RAW.ae75e0236a", "test.aleo_models.not_null_silver__block_solutions_SOLUTION_ID.f2ff10acd9", "test.aleo_models.not_null_silver__block_solutions_TARGET.815fac748b", "test.aleo_models.unique_silver__block_solutions_SOLUTION_ID.e1537a54e8"], "model.aleo_models.silver__blocks": ["model.aleo_models._max_block_by_date", "model.aleo_models.core__fact_blocks", "model.aleo_models.silver__block_round_batches", "model.aleo_models.silver__block_solutions", "model.aleo_models.silver__transactions", "model.aleo_models.silver_observability__transactions_completeness", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER.fd6ec57c3f", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__blocks_NETWORK_ID__BLOCK_ID.38265c56e7", "test.aleo_models.fsc_utils_sequence_gaps_silver__blocks_BLOCK_ID.e07d1d836f", "test.aleo_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "test.aleo_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "test.aleo_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.aleo_models.not_null_silver__blocks_COINBASE_TARGET.2e46eb161a", "test.aleo_models.not_null_silver__blocks_CUMULATIVE_PROOF_TARGET.dc585148d7", "test.aleo_models.not_null_silver__blocks_CUMULATIVE_WEIGHT.4737bf66a0", "test.aleo_models.not_null_silver__blocks_NETWORK_ID.adae7960cd", "test.aleo_models.not_null_silver__blocks_PREVIOUS_HASH.c56022c694", "test.aleo_models.not_null_silver__blocks_ROUND.0477c585db", "test.aleo_models.not_null_silver__blocks_TX_COUNT.34525b51e6"], "model.aleo_models.silver__programs": ["model.aleo_models.core__dim_programs", "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_ID.80c2c7e905", "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_TIMESTAMP.5454b5bfed", "test.aleo_models.not_null_silver__programs_EDITION.5c5a948f60", "test.aleo_models.not_null_silver__programs_PROGRAM.1a50b41b8d", "test.aleo_models.not_null_silver__programs_PROGRAMS_ID.e9988abeeb", "test.aleo_models.not_null_silver__programs_PROGRAM_ID.fd89ca51af", "test.aleo_models.not_null_silver__programs_VERIFYING_KEYS.4ba2be9b2b", "test.aleo_models.unique_silver__programs_PROGRAMS_ID.243a1406df", "test.aleo_models.unique_silver__programs_PROGRAM_ID.4d3f704ad9"], "model.aleo_models.silver_observability__blocks_completeness": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__2.9d37175599", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284", "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff", "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37", "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd", "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7", "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce", "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041", "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7", "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc", "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63"], "model.aleo_models.silver_observability__transitions_completeness": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.4cb57045ba", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.7431a832ce", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_TESTED__NUMBER.0f3ccee52b", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.11b541324e", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK__NUMBER.eccd066a90", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.785fc84441", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK__NUMBER.6e7bd83175", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS__ARRAY.2808debeca", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.8a3c52ac2d", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT__NUMBER.cdb9dec65b", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__day__2.16c256a7fe", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transitions_completeness_TEST_TIMESTAMP.8cfd29e509", "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY.efb96ec4d2", "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT.9471e82f7f", "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_TESTED.d238ab65d5", "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK.a7e8d7d2cc", "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP.507a662a3b", "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK.909c537da8", "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP.d214840fc5", "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS.ec94b823a4", "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_TIMESTAMP.76b586c86c", "test.aleo_models.not_null_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT.55427aec67"], "model.aleo_models.silver_observability__transactions_completeness": ["test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__2.8e7ea4e843", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2", "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce", "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6", "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34", "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807", "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c", "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0", "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c", "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS.c9d4d14ef4", "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c", "test.aleo_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776"], "model.aleo_models.silver__custom_programs": ["model.aleo_models.core__dim_programs"], "model.aleo_models.silver__liquidity_pool_actions_arcane": ["model.aleo_models.defi__fact_liquidity_pool_actions", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_id.9ee382d87d", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_timestamp.607d46e17d", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_inserted_timestamp.b0fc383cba", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_action.08a6fb9778", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.49e98bc54d", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_provider.553f1a352b", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_modified_timestamp.76fa053692", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_root_action.31631b8121", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_succeeded.9a1609d450", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount.6dc753684d", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount_unadj.425b449bb0", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_id.c8c9ecae19", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_symbol.facc7331c3", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount.7bb30f88a5", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount_unadj.ae1f0f61ad", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_id.63e913cec4", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_symbol.95680fca93", "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_tx_id.b2781f4c38", "test.aleo_models.unique_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.dad8a89fd5"], "model.aleo_models.silver__swaps_arcane": ["model.aleo_models.defi__fact_swaps", "test.aleo_models.not_null_silver__swaps_arcane_block_id.ae07ea79bf", "test.aleo_models.not_null_silver__swaps_arcane_block_timestamp.7124d3ef74", "test.aleo_models.not_null_silver__swaps_arcane_from_amount.d952b8f13e", "test.aleo_models.not_null_silver__swaps_arcane_from_amount_unadj.262b7d15e0", "test.aleo_models.not_null_silver__swaps_arcane_from_id.499cc5f26d", "test.aleo_models.not_null_silver__swaps_arcane_from_symbol.0985ad2c91", "test.aleo_models.not_null_silver__swaps_arcane_root_action.04d5488b0d", "test.aleo_models.not_null_silver__swaps_arcane_succeeded.658ad63987", "test.aleo_models.not_null_silver__swaps_arcane_swapper.e30532ac6c", "test.aleo_models.not_null_silver__swaps_arcane_swaps_arcane_id.382e933a4b", "test.aleo_models.not_null_silver__swaps_arcane_to_amount.de80560a28", "test.aleo_models.not_null_silver__swaps_arcane_to_amount_unadj.4c5326450c", "test.aleo_models.not_null_silver__swaps_arcane_to_id.5a15570738", "test.aleo_models.not_null_silver__swaps_arcane_to_symbol.116dc88626", "test.aleo_models.not_null_silver__swaps_arcane_tx_id.da3758b4fc", "test.aleo_models.unique_silver__swaps_arcane_swaps_arcane_id.0e66a90f51"], "model.aleo_models.silver__token_registrations": ["model.aleo_models.core__dim_token_registrations", "model.aleo_models.silver__liquidity_pool_actions_arcane", "model.aleo_models.silver__swaps_arcane"], "model.aleo_models.silver_stats__core_metrics_block_hourly": ["model.aleo_models.stats__ez_core_metrics_hourly"], "model.aleo_models.silver_stats__core_metrics_hourly": ["model.aleo_models.stats__ez_core_metrics_hourly", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.5239671c2c", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TOTAL_FEES__DECIMAL__FLOAT__NUMBER.ada34dd6db", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.5f9df371b1", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.c5d0b2cc33", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.5a8e6e8880", "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.225f59bd1e", "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_stats__core_metrics_hourly__INSERTED_TIMESTAMP__day__1.874a5937d5", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.0797e73b88", "test.aleo_models.not_null_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.efdb4b7e98", "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TOTAL_FEES.558b8cb0c7", "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT.866f191153", "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED.4fe1d21e07", "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.5b82a449dd", "test.aleo_models.not_null_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT.1e73e0a934"], "model.aleo_models.silver__complete_provider_prices": ["model.aleo_models.price__fact_prices_ohlc_hourly", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_prices_ASSET_ID__RECORDED_HOUR__PROVIDER.6e3c3ab2b1", "test.aleo_models.not_null_silver__complete_provider_prices_ASSET_ID.a10e7dad30", "test.aleo_models.not_null_silver__complete_provider_prices_MODIFIED_TIMESTAMP.b205ba003b", "test.aleo_models.not_null_silver__complete_provider_prices_PROVIDER.982c1dc287", "test.aleo_models.not_null_silver__complete_provider_prices_RECORDED_HOUR.73c3cfdf0d", "test.aleo_models.unique_silver__complete_provider_prices_COMPLETE_PROVIDER_PRICES_ID.52bf8dd406"], "model.aleo_models.silver__complete_native_asset_metadata": ["model.aleo_models.price__ez_asset_metadata", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_asset_metadata_SYMBOL.6c5f561373", "test.aleo_models.not_null_silver__complete_native_asset_metadata_BLOCKCHAIN.fea8f73c16", "test.aleo_models.not_null_silver__complete_native_asset_metadata_MODIFIED_TIMESTAMP.c6bcef6cb9", "test.aleo_models.not_null_silver__complete_native_asset_metadata_PROVIDER.2f310e1236", "test.aleo_models.not_null_silver__complete_native_asset_metadata_SYMBOL.ff109ff1ee", "test.aleo_models.unique_silver__complete_native_asset_metadata_COMPLETE_NATIVE_ASSET_METADATA_ID.d98ec00bc9"], "model.aleo_models.silver__complete_token_prices": ["model.aleo_models.price__ez_prices_hourly", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_prices_HOUR__TOKEN_ADDRESS__BLOCKCHAIN.dde8fc55cf", "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192", "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e", "test.aleo_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b", "test.aleo_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e", "test.aleo_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6", "test.aleo_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae", "test.aleo_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3", "test.aleo_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df", "test.aleo_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90", "test.aleo_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79"], "model.aleo_models.silver__complete_native_prices": ["model.aleo_models.price__ez_prices_hourly", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_prices_HOUR__SYMBOL.9742f3d916", "test.aleo_models.not_null_silver__complete_native_prices_BLOCKCHAIN.3557f90197", "test.aleo_models.not_null_silver__complete_native_prices_HOUR.84672fd317", "test.aleo_models.not_null_silver__complete_native_prices_IS_IMPUTED.9b41704925", "test.aleo_models.not_null_silver__complete_native_prices_MODIFIED_TIMESTAMP.595acedfe2", "test.aleo_models.not_null_silver__complete_native_prices_PRICE.5d22b3dfe0", "test.aleo_models.not_null_silver__complete_native_prices_PROVIDER.391be2433a", "test.aleo_models.not_null_silver__complete_native_prices_SYMBOL.640aa16109", "test.aleo_models.not_null_silver__complete_native_prices__INSERTED_TIMESTAMP.030d747f3c", "test.aleo_models.unique_silver__complete_native_prices_COMPLETE_NATIVE_PRICES_ID.6e5981548b"], "model.aleo_models.silver__complete_token_asset_metadata": ["model.aleo_models.price__ez_asset_metadata", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_asset_metadata_TOKEN_ADDRESS__BLOCKCHAIN.d3d6b2a62b", "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91", "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322", "test.aleo_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480", "test.aleo_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852", "test.aleo_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67", "test.aleo_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588"], "model.aleo_models.silver__complete_provider_asset_metadata": ["model.aleo_models.price__dim_asset_metadata", "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_asset_metadata_ASSET_ID__TOKEN_ADDRESS__NAME__SYMBOL__PLATFORM__PLATFORM_ID__PROVIDER.e355e7b6b2", "test.aleo_models.not_null_silver__complete_provider_asset_metadata_ASSET_ID.b4b221e9f2", "test.aleo_models.not_null_silver__complete_provider_asset_metadata_MODIFIED_TIMESTAMP.47fee02027", "test.aleo_models.not_null_silver__complete_provider_asset_metadata_PROVIDER.b0c689d31b", "test.aleo_models.unique_silver__complete_provider_asset_metadata_COMPLETE_PROVIDER_ASSET_METADATA_ID.945e90b882"], "model.aleo_models.bronze__blocks_FR": ["model.aleo_models.silver__blocks", "model.aleo_models.streamline__blocks_complete"], "model.aleo_models.bronze__blocks": ["model.aleo_models.silver__blocks", "model.aleo_models.streamline__blocks_complete"], "model.aleo_models.bronze__complete_native_asset_metadata": ["model.aleo_models.silver__complete_native_asset_metadata"], "model.aleo_models.bronze__complete_provider_prices": ["model.aleo_models.silver__complete_provider_prices"], "model.aleo_models.bronze__complete_provider_asset_metadata": ["model.aleo_models.silver__complete_provider_asset_metadata", "model.aleo_models.silver__complete_provider_prices"], "model.aleo_models.bronze__complete_token_prices": ["model.aleo_models.silver__complete_token_prices"], "model.aleo_models.bronze__complete_token_asset_metadata": ["model.aleo_models.silver__complete_token_asset_metadata"], "model.aleo_models.bronze__complete_native_prices": ["model.aleo_models.silver__complete_native_prices"], "seed.aleo_models.github_actions__workflows": [], "operation.aleo_models.aleo_models-on-run-start-0": [], "operation.aleo_models.aleo_models-on-run-start-1": [], "operation.aleo_models.aleo_models-on-run-end-0": [], "model.fsc_utils._datashare___create_udfs": [], "model.fsc_utils._datashare___create_gold": [], "model.livequery_models.live__allow_list": [], "model.livequery_models._live": ["model.livequery_models.live"], "model.livequery_models.live": ["model.livequery_models.alchemy_nfts__alchemy_utils", "model.livequery_models.alchemy_tokens__alchemy_utils", "model.livequery_models.alchemy_transfers__alchemy_utils", "model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.allday__", "model.livequery_models.apilayer__", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bitquery__", "model.livequery_models.blockpour_utils__", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.chainbase_utils__", "model.livequery_models.cmc__", "model.livequery_models.coingecko__", "model.livequery_models.covalent__", "model.livequery_models.credmark_utils__", "model.livequery_models.dapplooker__", "model.livequery_models.dappradar__", "model.livequery_models.deepnftvalue__", "model.livequery_models.defillama__", "model.livequery_models.espn__", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.footprint_utils__footprint_utils", "model.livequery_models.fred__", "model.livequery_models.github_actions__github_utils", "model.livequery_models.github_utils__github_utils", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.helius_apis__helius_utils", "model.livequery_models.helius_das__helius_utils", "model.livequery_models.helius_utils__helius_utils", "model.livequery_models.live__allow_list", "model.livequery_models.nftscan__", "model.livequery_models.opensea__", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.playgrounds__", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet", "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "model.livequery_models.quicknode_utils__quicknode_utils", "model.livequery_models.reservoir__", "model.livequery_models.snapshot__", "model.livequery_models.solscan__", "model.livequery_models.stakingrewards__", "model.livequery_models.strangelove__", "model.livequery_models.subquery__", "model.livequery_models.topshot__", "model.livequery_models.transpose__", "model.livequery_models.zapper__", "model.livequery_models.zettablock__", "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8", "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456", "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb"], "model.livequery_models.utils": ["model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.live", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet", "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc", "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010", "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4", "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2", "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e", "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e", "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c", "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341", "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99", "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89", "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f", "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0", "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c", "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f", "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03", "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6", "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056", "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5", "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93", "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6", "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6", "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231", "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132", "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854", "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392", "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27", "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef", "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8", "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f", "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc", "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b", "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552", "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798", "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c", "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66", "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48"], "model.livequery_models._utils": ["model.livequery_models.live", "model.livequery_models.utils", "test.livequery_models.test___utils_udf_introspect.79bd27a18b"], "model.livequery_models.bitquery__": ["test.livequery_models.test_bitquery__graphql_status_200.11917beb18"], "model.livequery_models.quicknode_polygon_tokens__quicknode_utils": ["test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446", "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e", "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade", "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733", "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96"], "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils": ["test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2", "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d", "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431", "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850", "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c"], "model.livequery_models.quicknode_utils__quicknode_utils": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "model.livequery_models.quicknode_solana_nfts__quicknode_utils"], "model.livequery_models.quicknode_polygon_nfts__quicknode_utils": ["test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b", "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06", "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6", "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185", "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13"], "model.livequery_models.quicknode_solana_nfts__quicknode_utils": ["test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31", "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e"], "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils": ["test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e", "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb", "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64", "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642", "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510"], "model.livequery_models.fred__": ["test.livequery_models.test_fred__get_series_status_200.51822e30ca"], "model.livequery_models.strangelove__": ["test.livequery_models.test_strangelove__get_status_200.0a58865924"], "model.livequery_models.footprint_utils__footprint_utils": ["test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb"], "model.livequery_models.snapshot__": ["test.livequery_models.test_snapshot__query_status_200.35a2cffb40"], "model.livequery_models.credmark_utils__": ["test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e"], "model.livequery_models.zapper__": [], "model.livequery_models.allday__": ["test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1"], "model.livequery_models.transpose__": ["test.livequery_models.test_transpose__get_status_200.8721d94682"], "model.livequery_models.subquery__": ["test.livequery_models.test_subquery__graphql_status_200.02580cea10"], "model.livequery_models.defillama__": ["test.livequery_models.test_defillama__get_status_200.90864f8f89"], "model.livequery_models.reservoir__": ["test.livequery_models.test_reservoir__get_status_200.cb905ea233"], "model.livequery_models.apilayer__": ["test.livequery_models.test_apilayer__get_status_200.fa02bd0f30"], "model.livequery_models.helius_apis__helius_utils": ["test.livequery_models.test_helius_apis__balances_status_200.d668884644", "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da", "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0"], "model.livequery_models.helius_das__helius_utils": ["test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3", "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714", "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165", "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a", "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d", "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c", "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d", "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616"], "model.livequery_models.helius_utils__helius_utils": ["model.livequery_models.helius_apis__helius_utils", "model.livequery_models.helius_das__helius_utils"], "model.livequery_models.cmc__": ["test.livequery_models.test_cmc__get_status_200.bc3231cada"], "model.livequery_models.espn__": ["test.livequery_models.test_espn__get_status_200.b4f84cc829"], "model.livequery_models.opensea__": ["test.livequery_models.test_opensea__get_status_200.5de63cfbb1"], "model.livequery_models.coingecko__": ["test.livequery_models.test_coingecko__get_status_200.047f15c956"], "model.livequery_models.deepnftvalue__": ["test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb"], "model.livequery_models.github_utils__github_utils": ["model.livequery_models.github_actions__github_utils", "test.livequery_models.test_github_utils__octocat_status_200.3573395088"], "model.livequery_models.github_actions__github_utils": ["test.livequery_models.test_github_actions__runs_status_200.2d145a41cb", "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553", "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94"], "model.livequery_models.dappradar__": ["test.livequery_models.test_dappradar__get_status_200.86e3502ff3"], "model.livequery_models.chainbase_utils__": ["test.livequery_models.test_chainbase_utils__get_status_200.07b6733652"], "model.livequery_models.alchemy_transfers__alchemy_utils": ["test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4"], "model.livequery_models.alchemy_tokens__alchemy_utils": ["test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24", "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb", "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76"], "model.livequery_models.alchemy_utils__alchemy_utils": ["model.livequery_models.alchemy_nfts__alchemy_utils", "model.livequery_models.alchemy_tokens__alchemy_utils", "model.livequery_models.alchemy_transfers__alchemy_utils"], "model.livequery_models.alchemy_nfts__alchemy_utils": ["test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31", "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28", "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a", "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296", "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4", "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140", "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a", "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f", "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5", "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576", "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962", "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d", "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306", "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945", "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc", "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355", "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f", "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00", "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32", "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35"], "model.livequery_models.topshot__": ["test.livequery_models.test_topshot__graphql_status_200.fb93e3b220"], "model.livequery_models.zettablock__": [], "model.livequery_models.solscan__": ["test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6"], "model.livequery_models.covalent__": ["test.livequery_models.test_covalent__get_status_200.bb43bb7f69"], "model.livequery_models.stakingrewards__": ["test.livequery_models.test_stakingrewards__query_status_200.144a35304b"], "model.livequery_models.nftscan__": ["test.livequery_models.test_nftscan__get_status_200.33868e0f0d"], "model.livequery_models.playgrounds__": ["test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707", "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee"], "model.livequery_models.blockpour_utils__": [], "model.livequery_models.dapplooker__": ["test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822"], "model.livequery_models.bsc__testnet": [], "model.livequery_models.fantom__mainnet": [], "model.livequery_models.arbitrum_nova__mainnet": [], "model.livequery_models.celo__mainnet": [], "model.livequery_models.arbitrum_one__mainnet": [], "model.livequery_models.harmony__testnet": [], "model.livequery_models.polygon_zkevm__mainnet": [], "model.livequery_models.polygon_zkevm__testnet": [], "model.livequery_models.base__goerli": [], "model.livequery_models.polygon__testnet": [], "model.livequery_models.optimism__mainnet": [], "model.livequery_models.avalanche_c__testnet": [], "model.livequery_models.ethereum__goerli": [], "model.livequery_models.polygon__mainnet": [], "model.livequery_models.gnosis__mainnet": [], "model.livequery_models.harmony__mainnet": [], "model.livequery_models.avalanche_c__mainnet": [], "model.livequery_models.arbitrum_one__goerli": [], "model.livequery_models.optimism__goerli": [], "model.livequery_models.ethereum__sepolia": [], "model.livequery_models.ethereum__mainnet": [], "model.livequery_models.base__mainnet": [], "model.livequery_models.bsc__mainnet": [], "model.livequery_models._eth__decoded_logs": ["model.livequery_models.ethereum__mainnet"], "model.livequery_models._evm__native_symbol_map": ["analysis.livequery_models.test_crud_udfs_in_schema", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet"], "model.livequery_models._eth__logs": ["model.livequery_models.ethereum__mainnet"], "model.livequery_models._evm__abi_map": ["analysis.livequery_models.test_crud_udfs_in_schema", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet"], "model.livequery_models._evm__contracts_map": ["analysis.livequery_models.test_crud_udfs_in_schema", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet"], "analysis.livequery_models.test_functions_py": [], "analysis.livequery_models.test_crud_udfs_in_schema": [], "analysis.livequery_models.test_create_or_drop_function_from_config": [], "analysis.livequery_models.generate_test_udf_skeleton": [], "analysis.livequery_models.test_functions": [], "seed.livequery_models.live__verified_api_endpoints": [], "operation.livequery_models.livequery_models-on-run-start-0": [], "operation.livequery_models.livequery_models-on-run-end-0": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": [], "test.aleo_models.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER.9d55d56330": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_HASH.9b866752bd": [], "test.aleo_models.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": [], "test.aleo_models.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_NETWORK.ddb0a41282": [], "test.aleo_models.not_null_core__fact_blocks_NETWORK.b3fe8ae22a": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NETWORK__STRING__VARCHAR.d57c531d17": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": [], "test.aleo_models.not_null_core__fact_blocks_TX_COUNT.dd649c1087": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_TX_COUNT__NUMBER__FLOAT.389345389a": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PREVIOUS_HASH.303c5cdb2c": [], "test.aleo_models.not_null_core__fact_blocks_PREVIOUS_HASH.a5b9336c67": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_ROUND.e005d3250f": [], "test.aleo_models.not_null_core__fact_blocks_ROUND.6a7ae2c6cd": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_ROUND__NUMBER__FLOAT.713c92704e": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_COINBASE_TARGET.17ff1fa530": [], "test.aleo_models.not_null_core__fact_blocks_COINBASE_TARGET.59fb9ba542": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_COINBASE_TARGET__NUMBER__FLOAT.b3386b7291": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_PROOF_TARGET.5082e2821b": [], "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_PROOF_TARGET.94ec4ffc5d": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_PROOF_TARGET__NUMBER__FLOAT.e049f0f54d": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_CUMULATIVE_WEIGHT.54ded95d23": [], "test.aleo_models.not_null_core__fact_blocks_CUMULATIVE_WEIGHT.d5cc5607fc": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CUMULATIVE_WEIGHT__NUMBER__FLOAT.7998cba785": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_REWARD.8a7df7ccb4": [], "test.aleo_models.not_null_core__fact_blocks_BLOCK_REWARD.bb713926f5": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_REWARD__NUMBER__FLOAT.7b3f7c5222": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_PUZZLE_REWARD.9abdd6d4bc": [], "test.aleo_models.not_null_core__fact_blocks_PUZZLE_REWARD.7e6616d5f4": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PUZZLE_REWARD__NUMBER__FLOAT.deaa8237fa": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_FACT_BLOCKS_ID.9f3cfdc8fc": [], "test.aleo_models.not_null_core__fact_blocks_FACT_BLOCKS_ID.e04af95ef1": [], "test.aleo_models.unique_core__fact_blocks_FACT_BLOCKS_ID.ae21b89ade": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_INSERTED_TIMESTAMP.2409df43de": [], "test.aleo_models.not_null_core__fact_blocks_INSERTED_TIMESTAMP.2bc7f6716c": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_blocks_MODIFIED_TIMESTAMP.a134d35ed2": [], "test.aleo_models.not_null_core__fact_blocks_MODIFIED_TIMESTAMP.ba893bde8a": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_core__fact_blocks_NETWORK__BLOCK_ID.54f426e528": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TX_ID_CREATED.5d8f125e21": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_ID_CREATED.0f1db2f3a5": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_BLOCK_TIMESTAMP_CREATED.65bb29727d": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_ID.28ae55e881": [], "test.aleo_models.not_null_core__dim_token_registrations_TOKEN_ID.3af44258e3": [], "test.aleo_models.unique_core__dim_token_registrations_TOKEN_ID.022fc34b0d": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_TOKEN_NAME.c1a4850472": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL.c71d617563": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_DECIMALS.bd77ccf50f": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_MAX_SUPPLY.e1d9fb49f3": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_REQUIRED.4aad5b0f85": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_EXTERNAL_AUTH_PARTY.03ebb47f35": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_NAME_ENCODED.4ec37ad556": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_token_registrations_SYMBOL_ENCODED.ce6a79e6f0": [], "test.aleo_models.unique_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.805acb60e8": [], "test.aleo_models.not_null_core__dim_token_registrations_DIM_TOKEN_REGISTRATIONS_ID.66976bee8c": [], "test.aleo_models.not_null_core__dim_token_registrations_INSERTED_TIMESTAMP.d01fb16229": [], "test.aleo_models.not_null_core__dim_token_registrations_MODIFIED_TIMESTAMP.c241d92ffe": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_ID.22feac23a3": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_TIMESTAMP.934763eab7": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_solutions_BLOCK_TIMESTAMP__day__1.e8ab764679": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_BLOCK_PUZZLE_REWARD.558b82bad3": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_ADDRESS.de9211d159": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_COUNTER.1f899ec7a6": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_EPOCH_HASH.ca095229c0": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_SOLUTION_ID.8323de7856": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_TARGET.2d39d2be4f": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD_RAW.e8b02b6278": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_solutions_REWARD.fc3dbe3aca": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transfers_BLOCK_TIMESTAMP__day__1.b9bb12d3c2": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_IS_NATIVE.11f4a568d6": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_TOKEN_ADDRESS.87260f30a0": [], "test.aleo_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": [], "test.aleo_models.not_null_core__dim_labels_CREATOR.0c77d5749c": [], "test.aleo_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": [], "test.aleo_models.not_null_core__dim_labels_ADDRESS_NAME.0de78829a4": [], "test.aleo_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": [], "test.aleo_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": [], "test.aleo_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc": [], "test.aleo_models.not_null_core__dim_labels_DIM_LABELS_ID.671d381225": [], "test.aleo_models.unique_core__dim_labels_DIM_LABELS_ID.af1f2177a6": [], "test.aleo_models.not_null_core__dim_labels_INSERTED_TIMESTAMP.144fe0eb16": [], "test.aleo_models.not_null_core__dim_labels_MODIFIED_TIMESTAMP.02c7121cbb": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__ADDRESS.59b513fc33": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_INDEX.a65a072fb0": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_tx_succeeded.5b133acfaf": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_TYPE.b04b8ae75c": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_EXECUTION_MSG.d8744ee919": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_DEPLOYMENT_MSG.13dd6ba041": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_OWNER_MSG.48cf57eabb": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FINALIZE_MSG.47c5e66540": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_REJECTED_MSG.210e239eb5": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_TRANSITION_COUNT.6539e193ba": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_RAW.2a9f593582": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE.565debf673": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transactions_FEE_PAYER.2d86608e80": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_ID.4fe2c20e20": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_DEPLOYMENT_BLOCK_TIMESTAMP.5bfe8d93a4": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM_ID.d7959096fa": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_EDITION.2709d9ec21": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_PROGRAM.70cc7c152e": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__dim_programs_VERIFYING_KEYS.17d8e54386": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_ID.4dc5d2b080": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_BLOCK_TIMESTAMP.5d5ee056a0": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transitions_BLOCK_TIMESTAMP__day__1.8de7cb7750": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TX_ID.ed3d7d2fc4": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INDEX.bed4108c73": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_TRANSITION_ID.88d41f74b0": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_PROGRAM_ID.fff8434ef2": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_FUNCTION.304c84273d": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_INPUTS.0097435c46": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_transitions_OUTPUTS.473e6ec1d0": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_ID.0a9ca47434": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BLOCK_TIMESTAMP.40e237b77b": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_round_batches_BLOCK_TIMESTAMP__day__1.e07b524c9d": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_ROUND.792262cac5": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_BATCH_ID.0ee6fc7975": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_AUTHOR.c78428dd2c": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_COMMITTEE_ID.e43b6d6933": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_core__fact_block_round_batches_TRANSMISSION_IDS.73a1a1b8d4": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.d3d9a20445": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_TIMESTAMP.bc87b8d16e": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_BLOCK_ID.20580d4f45": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_BLOCK_ID.a63b3fcc13": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TX_ID.7452491d2a": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TX_ID.96aca3a8ff": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_SUCCEEDED.7fc7637654": [], "test.aleo_models.accepted_values_defi__fact_liquidity_pool_actions_SUCCEEDED__True__False.2845e63de8": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_SUCCEEDED.debfae0b10": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_ROOT_ACTION.6b8451c1d4": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_ROOT_ACTION.0ee8f28262": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.ed334466e8": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_ACTION.cb97f5de7e": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.f4f97ba237": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_PROVIDER.2fbeaace44": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_ID.20b62065f7": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_ID.79eaeab93d": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.f12d3712c8": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_SYMBOL.3f10a13478": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.577fe366a9": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT_UNADJ.0cfbe2f5f3": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.871c5bd4d6": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN1_AMOUNT.363b26c8b1": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_ID.ce9f959adf": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_ID.a4379c4ba5": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.fc64ae06cf": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_SYMBOL.bd3c630c8c": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.8dacf5d1d0": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT_UNADJ.00a3c4c0da": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.3e1ee01fe5": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_TOKEN2_AMOUNT.2d8079e808": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.cca0bcbfac": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_LIQUIDITY_POOL_PROTOCOL.a45c6618da": [], "test.aleo_models.unique_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.5554831fc3": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_FACT_LIQUIDITY_POOL_ACTIONS_ID.14dea1b963": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_INSERTED_TIMESTAMP.724ca84c98": [], "test.aleo_models.not_null_defi__fact_liquidity_pool_actions_MODIFIED_TIMESTAMP.665736575b": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_TIMESTAMP.12d6b07914": [], "test.aleo_models.not_null_defi__fact_swaps_BLOCK_TIMESTAMP.075d054d65": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_BLOCK_ID.a78a351c3d": [], "test.aleo_models.not_null_defi__fact_swaps_BLOCK_ID.e151cc187f": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TX_ID.67830b42e0": [], "test.aleo_models.not_null_defi__fact_swaps_TX_ID.84d994da53": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SUCCEEDED.f0f33f4970": [], "test.aleo_models.accepted_values_defi__fact_swaps_SUCCEEDED__True__False.d58188a7bb": [], "test.aleo_models.not_null_defi__fact_swaps_SUCCEEDED.b960e174a2": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_SWAPPER.9a749d86f0": [], "test.aleo_models.not_null_defi__fact_swaps_SWAPPER.a8497d4cd6": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT_UNADJ.0d34c88cec": [], "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT_UNADJ.5b2b90a289": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_AMOUNT.41696d7b42": [], "test.aleo_models.not_null_defi__fact_swaps_FROM_AMOUNT.4363eb7533": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_SYMBOL.ca24fe91ae": [], "test.aleo_models.not_null_defi__fact_swaps_FROM_SYMBOL.3d70a0a69b": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_FROM_ID.4527f01191": [], "test.aleo_models.not_null_defi__fact_swaps_FROM_ID.9d9142108f": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT_UNADJ.81b2f0514e": [], "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT_UNADJ.b963eea9e5": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_AMOUNT.daa015c5af": [], "test.aleo_models.not_null_defi__fact_swaps_TO_AMOUNT.6e0eb16794": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_SYMBOL.6221dd7cf9": [], "test.aleo_models.not_null_defi__fact_swaps_TO_SYMBOL.3739e95840": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_TO_ID.0f8c6c4f56": [], "test.aleo_models.not_null_defi__fact_swaps_TO_ID.c78dd0d92f": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_ROOT_ACTION.52722e1aba": [], "test.aleo_models.not_null_defi__fact_swaps_ROOT_ACTION.d78e8e179e": [], "test.aleo_models.dbt_expectations_expect_column_to_exist_defi__fact_swaps_PLATFORM.1b397af8a1": [], "test.aleo_models.not_null_defi__fact_swaps_PLATFORM.b6233329b7": [], "test.aleo_models.unique_defi__fact_swaps_FACT_SWAPS_ID.ef29d48647": [], "test.aleo_models.not_null_defi__fact_swaps_FACT_SWAPS_ID.cdd2d36e98": [], "test.aleo_models.not_null_defi__fact_swaps_INSERTED_TIMESTAMP.c931848598": [], "test.aleo_models.not_null_defi__fact_swaps_MODIFIED_TIMESTAMP.d083b26328": [], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.c43366f375": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.69de9bb1e9": [], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MIN.cb99895dd8": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MIN__NUMBER__FLOAT.1ea9989d27": [], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_ID_MAX.82e9a01fcf": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_ID_MAX__NUMBER__FLOAT.c0b6bda28a": [], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_BLOCK_COUNT.67c66eb706": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_BLOCK_COUNT__NUMBER__FLOAT.04a49945de": [], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT.8718680bf8": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.da21939902": [], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.b5e50f7ef6": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.1e160d8731": [], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED.1e76008c62": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.6291586797": [], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT.4a7dab96a7": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.cc092ab5ee": [], "test.aleo_models.not_null_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE.56d6db6fc6": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_stats__ez_core_metrics_hourly_TOTAL_FEES_NATIVE__DECIMAL__FLOAT__NUMBER.b9208111a7": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_stats__ez_core_metrics_hourly_INSERTED_TIMESTAMP__day__1.5cba713d8f": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_stats__ez_core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.f4cde92642": [], "test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_ID.1af206eea3": [], "test.aleo_models.not_null_test_core__programs_recent_DEPLOYMENT_BLOCK_TIMESTAMP.838d46a1a2": [], "test.aleo_models.not_null_test_core__programs_recent_PROGRAM_ID.a5fad2813f": [], "test.aleo_models.not_null_test_core__programs_recent_EDITION.33eec4e36a": [], "test.aleo_models.not_null_test_core__programs_recent_PROGRAM.549ff4fe35": [], "test.aleo_models.not_null_test_core__programs_recent_VERIFYING_KEYS.79b5e3b4fd": [], "test.aleo_models.unique_test_core__blocks_recent_BLOCK_ID.c26b6eacc3": [], "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_ID.7aecad87b8": [], "test.aleo_models.not_null_test_core__blocks_recent_BLOCK_TIMESTAMP.2225f971b2": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__blocks_recent_BLOCK_TIMESTAMP__hour__3.cb089947b4": [], "test.aleo_models.fsc_utils_sequence_gaps_test_core__blocks_recent_BLOCK_ID.f87a178f75": [], "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_ID.f6ecee38b4": [], "test.aleo_models.not_null_test_core__transfers_recent_BLOCK_TIMESTAMP.ea43762e52": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_BLOCK_TIMESTAMP__timestamp_ntz.cc15fe2f72": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_recent_BLOCK_TIMESTAMP__hour__3.230c250397": [], "test.aleo_models.not_null_test_core__transfers_recent_TX_ID.accb7c73e5": [], "test.aleo_models.not_null_test_core__transfers_recent_TRANSITION_ID.cab60da5cc": [], "test.aleo_models.not_null_test_core__transfers_recent_INDEX.7875007827": [], "test.aleo_models.not_null_test_core__transfers_recent_TX_SUCCEEDED.4b6984e485": [], "test.aleo_models.not_null_test_core__transfers_recent_TRANSFER_TYPE.07b266a36e": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_SENDER__VARCHAR.cb70ccc9bc": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_RECEIVER__VARCHAR.b5644d9fb7": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_AMOUNT__FLOAT.9b1e3d4bf7": [], "test.aleo_models.not_null_test_core__transfers_recent_IS_NATIVE.3f4aa5f093": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_IS_NATIVE__BOOLEAN.4be4a86231": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_recent_TOKEN_ADDRESS__VARCHAR.5ac2f67dd9": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_recent_TRANSITION_ID__TX_ID__BLOCK_ID.2cc09c6492": [], "test.aleo_models.not_null_test_core__transfers_full_BLOCK_ID.44a0160596": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_ID__NUMBER.db4a153014": [], "test.aleo_models.not_null_test_core__transfers_full_BLOCK_TIMESTAMP.680028f04e": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_BLOCK_TIMESTAMP__timestamp_ntz.a2acec0665": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transfers_full_BLOCK_TIMESTAMP__day__1.bed6c29261": [], "test.aleo_models.not_null_test_core__transfers_full_TX_ID.aa9e490b50": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_ID__VARCHAR.a4a360729b": [], "test.aleo_models.not_null_test_core__transfers_full_TX_SUCCEEDED.d8326e4ad1": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TX_SUCCEEDED__BOOLEAN.405c5b0551": [], "test.aleo_models.not_null_test_core__transfers_full_TRANSITION_ID.e4ae0e9c5a": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSITION_ID__VARCHAR.dfe94d6066": [], "test.aleo_models.not_null_test_core__transfers_full_TRANSFER_TYPE.c3b93be59e": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TRANSFER_TYPE__VARCHAR.c590e4df83": [], "test.aleo_models.not_null_test_core__transfers_full_SENDER.3d5cbf9a67": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_SENDER__VARCHAR.fbd57ffc9e": [], "test.aleo_models.not_null_test_core__transfers_full_RECEIVER.2b9e95133e": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_RECEIVER__VARCHAR.ed72eb7f1c": [], "test.aleo_models.not_null_test_core__transfers_full_AMOUNT.8a4b2f1b6d": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_AMOUNT__FLOAT.a4c0d1b1f0": [], "test.aleo_models.not_null_test_core__transfers_full_IS_NATIVE.2bd3fa38a4": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_IS_NATIVE__BOOLEAN.457eaccf7b": [], "test.aleo_models.not_null_test_core__transfers_full_TOKEN_ADDRESS.7a33e30844": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transfers_full_TOKEN_ADDRESS__VARCHAR.06afd1e0e1": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transfers_full_TRANSITION_ID__TX_ID__BLOCK_ID.43cdacc3a1": [], "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_ID.af65e503a3": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_ID__number.a9475a9a0f": [], "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_TIMESTAMP.63c13702db": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_TIMESTAMP__timestamp_ntz.361450a37d": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_full_BLOCK_TIMESTAMP__day__1.bb2d43e68e": [], "test.aleo_models.not_null_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD.091930da06": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_BLOCK_PUZZLE_REWARD__number.d15dabbd7b": [], "test.aleo_models.not_null_test_core__block_solutions_full_ADDRESS.3a1563be64": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_ADDRESS__varchar.02bfdb533b": [], "test.aleo_models.not_null_test_core__block_solutions_full_COUNTER.93b37d2afb": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_COUNTER__varchar.d79fe043c3": [], "test.aleo_models.not_null_test_core__block_solutions_full_EPOCH_HASH.daf662ca58": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_EPOCH_HASH__varchar.e6c6288780": [], "test.aleo_models.not_null_test_core__block_solutions_full_SOLUTION_ID.8a323cbd55": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_SOLUTION_ID__varchar.056235cfd9": [], "test.aleo_models.not_null_test_core__block_solutions_full_TARGET.9197ff119b": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_TARGET__number.16668ae8ed": [], "test.aleo_models.not_null_test_core__block_solutions_full_REWARD_RAW.1093af5149": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD_RAW__number.78bfd5fac7": [], "test.aleo_models.not_null_test_core__block_solutions_full_REWARD.ed62ea6e8e": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_solutions_full_REWARD__float.ff45328781": [], "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_ID.276b7669d8": [], "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_TIMESTAMP.8556c30ded": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_solutions_recent_BLOCK_TIMESTAMP__hour__3.1d34ec0913": [], "test.aleo_models.not_null_test_core__block_solutions_recent_BLOCK_PUZZLE_REWARD.3a26876298": [], "test.aleo_models.not_null_test_core__block_solutions_recent_ADDRESS.5ac1c26e6d": [], "test.aleo_models.not_null_test_core__block_solutions_recent_COUNTER.676606a4cc": [], "test.aleo_models.not_null_test_core__block_solutions_recent_EPOCH_HASH.3ece27be86": [], "test.aleo_models.not_null_test_core__block_solutions_recent_SOLUTION_ID.ed25c17e24": [], "test.aleo_models.not_null_test_core__block_solutions_recent_TARGET.58ba4e2d92": [], "test.aleo_models.not_null_test_core__block_solutions_recent_REWARD_RAW.92470140bb": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_solutions_recent_SOLUTION_ID__BLOCK_ID.e25c9f1601": [], "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_TIMESTAMP.aa9c91bac3": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_defi__swaps_recent_BLOCK_TIMESTAMP__day__3.97d3ae46b6": [], "test.aleo_models.not_null_test_defi__swaps_recent_BLOCK_ID.0885e16138": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__swaps_recent_TX_ID__SWAPPER__BLOCK_ID.5b52cfad7b": [], "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_TIMESTAMP.433bfa00a0": [], "test.aleo_models.not_null_test_defi__liquidity_actions_recent_BLOCK_ID.77677822d5": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_defi__liquidity_actions_recent_TX_ID__LIQUIDITY_POOL_PROTOCOL__LIQUIDITY_PROVIDER__TOKEN1_ID__TOKEN2_ID.385663127b": [], "test.aleo_models.not_null_test_core__transitions_recent_BLOCK_TIMESTAMP.40a1e65ad9": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_recent_BLOCK_TIMESTAMP__hour__3.94ee0b9ed0": [], "test.aleo_models.not_null_test_core__transitions_recent_TX_ID.0c1c4942f9": [], "test.aleo_models.not_null_test_core__transitions_recent_TRANSITION_ID.278a50751b": [], "test.aleo_models.not_null_test_core__transitions_recent_PROGRAM_ID.4fe73c31dc": [], "test.aleo_models.not_null_test_core__transitions_recent_INPUTS.5407911e94": [], "test.aleo_models.not_null_test_core__transitions_recent_OUTPUTS.236aa37a1e": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_recent_TRANSITION_ID__TX_ID__BLOCK_ID.5baa0beb34": [], "test.aleo_models.not_null_test_core__transitions_full_BLOCK_ID.cec6b5a3b5": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_ID__NUMBER.330953c31f": [], "test.aleo_models.not_null_test_core__transitions_full_BLOCK_TIMESTAMP.08683331a8": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_BLOCK_TIMESTAMP__timestamp_ntz.34883a9ca8": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transitions_full_BLOCK_TIMESTAMP__day__1.10b89bf39b": [], "test.aleo_models.not_null_test_core__transitions_full_TX_ID.5e283fda3d": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TX_ID__VARCHAR.dcdaa15bc5": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INDEX__NUMBER.df84f98823": [], "test.aleo_models.not_null_test_core__transitions_full_TRANSITION_ID.b3f5414d72": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_TRANSITION_ID__VARCHAR.7414b60884": [], "test.aleo_models.not_null_test_core__transitions_full_PROGRAM_ID.54aef3f41e": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_PROGRAM_ID__VARCHAR.a3fe55fdb8": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_FUNCTION__VARCHAR.ac1009a796": [], "test.aleo_models.not_null_test_core__transitions_full_INPUTS.a310350a3f": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_INPUTS__VARIANT.6022be75ee": [], "test.aleo_models.not_null_test_core__transitions_full_OUTPUTS.7e84b2dd8b": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__transitions_full_OUTPUTS__VARIANT.f224c5c2f2": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transitions_full_TRANSITION_ID__TX_ID__BLOCK_ID.14b5b60dfb": [], "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_ID.62e487d703": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_ID__NUMBER.8aaa3c9247": [], "test.aleo_models.not_null_test_core__block_round_batches_full_BLOCK_TIMESTAMP.2d68e82f29": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.905525404b": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_full_BLOCK_TIMESTAMP__day__1.643c5f1859": [], "test.aleo_models.not_null_test_core__block_round_batches_full_ROUND.040dc0178d": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_ROUND__VARCHAR.37a81c3d55": [], "test.aleo_models.not_null_test_core__block_round_batches_full_BATCH_ID.3e510992b1": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_BATCH_ID__VARCHAR.1fd6f06fa8": [], "test.aleo_models.not_null_test_core__block_round_batches_full_AUTHOR.ad0397ca02": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_AUTHOR__VARCHAR.5259a818e2": [], "test.aleo_models.not_null_test_core__block_round_batches_full_COMMITTEE_ID.dbc5a638b0": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_test_core__block_round_batches_full_COMMITTEE_ID__VARCHAR.1d92ec8574": [], "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_ID.d971186ebb": [], "test.aleo_models.not_null_test_core__block_round_batches_recent_BLOCK_TIMESTAMP.62dec4ef7e": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__block_round_batches_recent_BLOCK_TIMESTAMP__hour__3.31f275ffcb": [], "test.aleo_models.not_null_test_core__block_round_batches_recent_ROUND.04290e7152": [], "test.aleo_models.not_null_test_core__block_round_batches_recent_BATCH_ID.561ce0099f": [], "test.aleo_models.not_null_test_core__block_round_batches_recent_COMMITTEE_ID.7f6368c8f4": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__block_round_batches_recent_BLOCK_ID__BATCH_ID__AUTHOR.d053219a63": [], "test.aleo_models.not_null_test_core__transactions_recent_BLOCK_TIMESTAMP.b35a37cfc9": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_test_core__transactions_recent_BLOCK_TIMESTAMP__hour__3.106542823f": [], "test.aleo_models.not_null_test_core__transactions_recent_TX_ID.f41922a071": [], "test.aleo_models.unique_test_core__transactions_recent_TX_ID.e391599cd6": [], "test.aleo_models.not_null_test_core__transactions_recent_TX_SUCCEEDED.dbcb46771f": [], "test.aleo_models.not_null_test_core__transactions_recent_TX_TYPE.bf23c504c9": [], "test.aleo_models.not_null_test_core__transactions_recent_TRANSITION_COUNT.b4f4994e62": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_test_core__transactions_recent_TX_ID__BLOCK_ID.ec9bf4e9e1": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_PIPELINE_ACTIVE__True.4ee4a0365f": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_set_github_actions__current_task_status_SUCCESSES__2.c9f4d937df": [], "test.aleo_models.not_null_silver__block_round_batches_BLOCK_ID.d56ba7eaa6": [], "test.aleo_models.not_null_silver__block_round_batches_BLOCK_TIMESTAMP.afe41027de": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_round_batches_BLOCK_TIMESTAMP__day__1.4ca9507b37": [], "test.aleo_models.not_null_silver__block_round_batches_ROUND.8d90a0fbe4": [], "test.aleo_models.not_null_silver__block_round_batches_BATCH_ID.f79193cd9f": [], "test.aleo_models.not_null_silver__block_round_batches_AUTHOR.b517797091": [], "test.aleo_models.not_null_silver__block_round_batches_COMMITTEE_ID.e9dcad2695": [], "test.aleo_models.not_null_silver__block_round_batches_TRANSMISSION_IDS.2943ef7ef2": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_round_batches_BLOCK_ID__ROUND__BATCH_ID.cb50403c63": [], "test.aleo_models.not_null_silver__transitions_fee_BLOCK_ID.448830d765": [], "test.aleo_models.not_null_silver__transitions_fee_BLOCK_TIMESTAMP.da4eb0a3f0": [], "test.aleo_models.not_null_silver__transitions_fee_TX_ID.ab5e58287c": [], "test.aleo_models.not_null_silver__transitions_fee_SUCCEEDED.6c5db24350": [], "test.aleo_models.not_null_silver__transitions_fee_TRANSITION_ID.ca32598656": [], "test.aleo_models.unique_silver__transitions_fee_TRANSITION_ID.b254898411": [], "test.aleo_models.not_null_silver__transitions_fee_PROGRAM_ID.83e290b7f9": [], "test.aleo_models.not_null_silver__transitions_fee_FUNCTION.b91e848824": [], "test.aleo_models.not_null_silver__transitions_fee_INPUTS.990589d691": [], "test.aleo_models.not_null_silver__transitions_fee_OUTPUTS.f3d1314c3a": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transitions_fee_BLOCK_ID__TX_ID__TRANSITION_ID.4605a65647": [], "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_ID.f46d1d4fda": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_ID__NUMBER__FLOAT.60d1f0dd26": [], "test.aleo_models.not_null_silver__nonnative_transfers_BLOCK_TIMESTAMP.7304ed77b5": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nonnative_transfers_BLOCK_TIMESTAMP__day__1.9392199c66": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.0a10fe399f": [], "test.aleo_models.not_null_silver__nonnative_transfers_TX_ID.1426f62e21": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_ID__STRING__VARCHAR.851fa74156": [], "test.aleo_models.not_null_silver__nonnative_transfers_TRANSITION_ID.a93330752b": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSITION_ID__STRING__VARCHAR.9d8b17f55a": [], "test.aleo_models.not_null_silver__nonnative_transfers_INDEX.9e1f26a6b5": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__nonnative_transfers_INDEX__NUMBER.89aab49a7e": [], "test.aleo_models.not_null_silver__nonnative_transfers_TX_SUCCEEDED.23e46f1519": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TX_SUCCEEDED__BOOLEAN.90878c6c53": [], "test.aleo_models.not_null_silver__nonnative_transfers_TRANSFER_TYPE.dedcc154e8": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_TRANSFER_TYPE__STRING__VARCHAR.e696b5a6e9": [], "test.aleo_models.not_null_silver__nonnative_transfers_SENDER.aeb92dc6a2": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_SENDER__STRING__VARCHAR.0ba22db44d": [], "test.aleo_models.not_null_silver__nonnative_transfers_RECEIVER.06a07e2030": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_RECEIVER__STRING__VARCHAR.f84d37e7f8": [], "test.aleo_models.not_null_silver__nonnative_transfers_AMOUNT.d7f1ebd098": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nonnative_transfers_AMOUNT__NUMBER__FLOAT.a8f76752f9": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__nonnative_transfers_TRANSITION_ID.e6bf2f36fc": [], "test.aleo_models.not_null_silver__block_solutions_BLOCK_ID.a77b783b26": [], "test.aleo_models.not_null_silver__block_solutions_BLOCK_TIMESTAMP.a8fbe6f8fe": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_solutions_BLOCK_TIMESTAMP__day__1.7ba6a86b55": [], "test.aleo_models.not_null_silver__block_solutions_BLOCK_PUZZLE_REWARD.24faf4f201": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_BLOCK_PUZZLE_REWARD__NUMBER__FLOAT.434ba3d0af": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_BLOCK_PUZZLE_REWARD__0.43a041aab9": [], "test.aleo_models.not_null_silver__block_solutions_ADDRESS.738847c2b0": [], "test.aleo_models.not_null_silver__block_solutions_COUNTER.887b97bb42": [], "test.aleo_models.not_null_silver__block_solutions_EPOCH_HASH.cf3f348af3": [], "test.aleo_models.not_null_silver__block_solutions_SOLUTION_ID.f2ff10acd9": [], "test.aleo_models.unique_silver__block_solutions_SOLUTION_ID.e1537a54e8": [], "test.aleo_models.not_null_silver__block_solutions_TARGET.815fac748b": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__block_solutions_TARGET__NUMBER__BIGINT.f884206507": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_TARGET__0.b9c2ef6877": [], "test.aleo_models.not_null_silver__block_solutions_REWARD_RAW.ae75e0236a": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_between_silver__block_solutions_REWARD_RAW__0.995df7a67a": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__block_solutions_BLOCK_ID__SOLUTION_ID.5138ce7dc4": [], "test.aleo_models.not_null_silver__blocks_BLOCK_ID.2e78c008c9": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER.fd6ec57c3f": [], "test.aleo_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": [], "test.aleo_models.not_null_silver__blocks_NETWORK_ID.adae7960cd": [], "test.aleo_models.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": [], "test.aleo_models.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": [], "test.aleo_models.not_null_silver__blocks_PREVIOUS_HASH.c56022c694": [], "test.aleo_models.not_null_silver__blocks_ROUND.0477c585db": [], "test.aleo_models.not_null_silver__blocks_COINBASE_TARGET.2e46eb161a": [], "test.aleo_models.not_null_silver__blocks_CUMULATIVE_PROOF_TARGET.dc585148d7": [], "test.aleo_models.not_null_silver__blocks_CUMULATIVE_WEIGHT.4737bf66a0": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__blocks_NETWORK_ID__BLOCK_ID.38265c56e7": [], "test.aleo_models.fsc_utils_sequence_gaps_silver__blocks_BLOCK_ID.e07d1d836f": [], "test.aleo_models.not_null_silver__transitions_BLOCK_ID.bbe019b39d": [], "test.aleo_models.not_null_silver__transitions_BLOCK_TIMESTAMP.afd4cf24b8": [], "test.aleo_models.not_null_silver__transitions_TX_ID.b2db0c6105": [], "test.aleo_models.not_null_silver__transitions_INDEX.48df867820": [], "test.aleo_models.not_null_silver__transitions_TRANSITION_ID.7ee1f08ff1": [], "test.aleo_models.unique_silver__transitions_TRANSITION_ID.4afb2941b0": [], "test.aleo_models.not_null_silver__transitions_TYPE.a2cee98629": [], "test.aleo_models.not_null_silver__transitions_PROGRAM_ID.74bd45f9a1": [], "test.aleo_models.not_null_silver__transitions_FUNCTION.71fc03afe4": [], "test.aleo_models.not_null_silver__transitions_INPUTS.0bb14ba3c1": [], "test.aleo_models.not_null_silver__transitions_OUTPUTS.c2a5fb73fc": [], "test.aleo_models.unique_silver__transitions_TRANSITIONS_ID.0b130702dd": [], "test.aleo_models.not_null_silver__transitions_TRANSITIONS_ID.4a45c510c7": [], "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_ID.80c2c7e905": [], "test.aleo_models.not_null_silver__programs_DEPLOYMENT_BLOCK_TIMESTAMP.5454b5bfed": [], "test.aleo_models.not_null_silver__programs_PROGRAM_ID.fd89ca51af": [], "test.aleo_models.unique_silver__programs_PROGRAM_ID.4d3f704ad9": [], "test.aleo_models.not_null_silver__programs_EDITION.5c5a948f60": [], "test.aleo_models.not_null_silver__programs_PROGRAM.1a50b41b8d": [], "test.aleo_models.not_null_silver__programs_VERIFYING_KEYS.4ba2be9b2b": [], "test.aleo_models.not_null_silver__programs_PROGRAMS_ID.e9988abeeb": [], "test.aleo_models.unique_silver__programs_PROGRAMS_ID.243a1406df": [], "test.aleo_models.not_null_silver__transactions_TX_TYPE.94f5edcf76": [], "test.aleo_models.accepted_values_silver__transactions_TX_TYPE__deploy__execute__fee.c161516da6": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__transactions_BLOCK_ID__TX_ID.6709dcc0c6": [], "test.aleo_models.not_null_silver__native_transfers_BLOCK_ID.5e3c7de616": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_ID__NUMBER__FLOAT.81e7861daa": [], "test.aleo_models.not_null_silver__native_transfers_BLOCK_TIMESTAMP.63641531f9": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__native_transfers_BLOCK_TIMESTAMP__day__1.2d2bf40c31": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.eb086929f1": [], "test.aleo_models.not_null_silver__native_transfers_TX_ID.01c9c62342": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_ID__STRING__VARCHAR.a7e979ed60": [], "test.aleo_models.not_null_silver__native_transfers_TRANSITION_ID.54e8500287": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSITION_ID__STRING__VARCHAR.3b2b1dd0a1": [], "test.aleo_models.not_null_silver__native_transfers_INDEX.61be8d9435": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_of_type_silver__native_transfers_INDEX__NUMBER.eb69d10f39": [], "test.aleo_models.not_null_silver__native_transfers_TX_SUCCEEDED.ea0c362e96": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TX_SUCCEEDED__BOOLEAN.d8f9dbf44f": [], "test.aleo_models.not_null_silver__native_transfers_TRANSFER_TYPE.427310e38e": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_TRANSFER_TYPE__STRING__VARCHAR.004b2c9c66": [], "test.aleo_models.not_null_silver__native_transfers_SENDER.179c4b18d1": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_SENDER__STRING__VARCHAR.935658c650": [], "test.aleo_models.not_null_silver__native_transfers_RECEIVER.1eab825a30": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_RECEIVER__STRING__VARCHAR.1124d8fd7c": [], "test.aleo_models.not_null_silver__native_transfers_AMOUNT.c135269c58": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__native_transfers_AMOUNT__NUMBER__FLOAT.0748011a17": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__native_transfers_TRANSITION_ID.6af961123b": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK.4af2b23af0": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK__NUMBER.51e14f60c3": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK.50c69fa807": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK__NUMBER.0755018b30": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP.28414bd21c": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.36912ec1a4": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP.393ce5674c": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__day__2.8e7ea4e843": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e0abce29a3": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_TESTED.59886bcb34": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_TESTED__NUMBER.dbc1517e58": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT.f4ae0246b6": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.494cd8e7cc": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY.aac60558ce": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.cd77f4de74": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT.8cb651a776": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TRANSACTIONS_IMPACTED_COUNT__NUMBER.a1fa44c0ed": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS.c9d4d14ef4": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_FAILURE_DETAILS__ARRAY.eb9a498eeb": [], "test.aleo_models.not_null_silver_observability__transactions_completeness_TEST_TIMESTAMP.3032ce167c": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transactions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.2f750b5138": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transactions_completeness_TEST_TIMESTAMP.90d52eb4d2": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK.909c537da8": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK__NUMBER.6e7bd83175": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK.a7e8d7d2cc": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK__NUMBER.eccd066a90": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP.d214840fc5": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.785fc84441": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP.507a662a3b": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__day__2.16c256a7fe": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.11b541324e": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_TESTED.d238ab65d5": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_TESTED__NUMBER.0f3ccee52b": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT.9471e82f7f": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.7431a832ce": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY.efb96ec4d2": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.4cb57045ba": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT.55427aec67": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TRANSITIONS_IMPACTED_COUNT__NUMBER.cdb9dec65b": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS.ec94b823a4": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_FAILURE_DETAILS__ARRAY.2808debeca": [], "test.aleo_models.not_null_silver_observability__transitions_completeness_TEST_TIMESTAMP.76b586c86c": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__transitions_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.8a3c52ac2d": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__transitions_completeness_TEST_TIMESTAMP.8cfd29e509": [], "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK.b22743d041": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK__NUMBER.6ae5917fe6": [], "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK.bab1c25fe7": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK__NUMBER.f5b18e329c": [], "test.aleo_models.not_null_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP.6e5e182cb7": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MIN_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c5903adca1": [], "test.aleo_models.not_null_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP.1652ed78ce": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__day__2.9d37175599": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_MAX_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c9df4c6655": [], "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_TESTED.b4a5e5a3bd": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_TESTED__NUMBER.011a7ff222": [], "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT.e4f8e75b37": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_COUNT__NUMBER.ba241fbb03": [], "test.aleo_models.not_null_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY.1d3c357fff": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_BLOCKS_IMPACTED_ARRAY__ARRAY.3f190d1cf1": [], "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS.c4848b2bdc": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_FAILURE_DETAILS__ARRAY.05c156a928": [], "test.aleo_models.not_null_silver_observability__blocks_completeness_TEST_TIMESTAMP.636c89eb63": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_observability__blocks_completeness_TEST_TIMESTAMP__TIMESTAMP_NTZ.230d24d227": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_observability__blocks_completeness_TEST_TIMESTAMP.ab375ec284": [], "test.aleo_models.unique_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.dad8a89fd5": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_pool_actions_arcane_id.49e98bc54d": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_timestamp.607d46e17d": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_block_id.9ee382d87d": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_tx_id.b2781f4c38": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_succeeded.9a1609d450": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_root_action.31631b8121": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_action.08a6fb9778": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_liquidity_provider.553f1a352b": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount_unadj.425b449bb0": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_amount.6dc753684d": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_symbol.facc7331c3": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token1_id.c8c9ecae19": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount_unadj.ae1f0f61ad": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_amount.7bb30f88a5": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_symbol.95680fca93": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_token2_id.63e913cec4": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_inserted_timestamp.b0fc383cba": [], "test.aleo_models.not_null_silver__liquidity_pool_actions_arcane_modified_timestamp.76fa053692": [], "test.aleo_models.unique_silver__swaps_arcane_swaps_arcane_id.0e66a90f51": [], "test.aleo_models.not_null_silver__swaps_arcane_swaps_arcane_id.382e933a4b": [], "test.aleo_models.not_null_silver__swaps_arcane_block_timestamp.7124d3ef74": [], "test.aleo_models.not_null_silver__swaps_arcane_block_id.ae07ea79bf": [], "test.aleo_models.not_null_silver__swaps_arcane_tx_id.da3758b4fc": [], "test.aleo_models.not_null_silver__swaps_arcane_succeeded.658ad63987": [], "test.aleo_models.not_null_silver__swaps_arcane_swapper.e30532ac6c": [], "test.aleo_models.not_null_silver__swaps_arcane_from_amount_unadj.262b7d15e0": [], "test.aleo_models.not_null_silver__swaps_arcane_from_amount.d952b8f13e": [], "test.aleo_models.not_null_silver__swaps_arcane_from_symbol.0985ad2c91": [], "test.aleo_models.not_null_silver__swaps_arcane_from_id.499cc5f26d": [], "test.aleo_models.not_null_silver__swaps_arcane_to_amount_unadj.4c5326450c": [], "test.aleo_models.not_null_silver__swaps_arcane_to_amount.de80560a28": [], "test.aleo_models.not_null_silver__swaps_arcane_to_symbol.116dc88626": [], "test.aleo_models.not_null_silver__swaps_arcane_to_id.5a15570738": [], "test.aleo_models.not_null_silver__swaps_arcane_root_action.04d5488b0d": [], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.efdb4b7e98": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR__TIMESTAMP_LTZ__TIMESTAMP_NTZ.5239671c2c": [], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT.866f191153": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT__NUMBER__FLOAT.5a8e6e8880": [], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS.5b82a449dd": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_SUCCESS__NUMBER__FLOAT.c5d0b2cc33": [], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED.4fe1d21e07": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TRANSACTION_COUNT_FAILED__NUMBER__FLOAT.5f9df371b1": [], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT.1e73e0a934": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_UNIQUE_FROM_COUNT__NUMBER__FLOAT.225f59bd1e": [], "test.aleo_models.not_null_silver_stats__core_metrics_hourly_TOTAL_FEES.558b8cb0c7": [], "test.aleo_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_stats__core_metrics_hourly_TOTAL_FEES__DECIMAL__FLOAT__NUMBER.ada34dd6db": [], "test.aleo_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_stats__core_metrics_hourly__INSERTED_TIMESTAMP__day__1.874a5937d5": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver_stats__core_metrics_hourly_BLOCK_TIMESTAMP_HOUR.0797e73b88": [], "test.aleo_models.not_null_silver__complete_provider_asset_metadata_PROVIDER.b0c689d31b": [], "test.aleo_models.not_null_silver__complete_provider_asset_metadata_ASSET_ID.b4b221e9f2": [], "test.aleo_models.not_null_silver__complete_provider_asset_metadata_MODIFIED_TIMESTAMP.47fee02027": [], "test.aleo_models.unique_silver__complete_provider_asset_metadata_COMPLETE_PROVIDER_ASSET_METADATA_ID.945e90b882": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_asset_metadata_ASSET_ID__TOKEN_ADDRESS__NAME__SYMBOL__PLATFORM__PLATFORM_ID__PROVIDER.e355e7b6b2": [], "test.aleo_models.not_null_silver__complete_provider_prices_PROVIDER.982c1dc287": [], "test.aleo_models.not_null_silver__complete_provider_prices_ASSET_ID.a10e7dad30": [], "test.aleo_models.not_null_silver__complete_provider_prices_RECORDED_HOUR.73c3cfdf0d": [], "test.aleo_models.not_null_silver__complete_provider_prices_MODIFIED_TIMESTAMP.b205ba003b": [], "test.aleo_models.unique_silver__complete_provider_prices_COMPLETE_PROVIDER_PRICES_ID.52bf8dd406": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_provider_prices_ASSET_ID__RECORDED_HOUR__PROVIDER.6e3c3ab2b1": [], "test.aleo_models.not_null_silver__complete_native_prices_HOUR.84672fd317": [], "test.aleo_models.not_null_silver__complete_native_prices_SYMBOL.640aa16109": [], "test.aleo_models.not_null_silver__complete_native_prices_BLOCKCHAIN.3557f90197": [], "test.aleo_models.not_null_silver__complete_native_prices_PROVIDER.391be2433a": [], "test.aleo_models.not_null_silver__complete_native_prices_PRICE.5d22b3dfe0": [], "test.aleo_models.not_null_silver__complete_native_prices_IS_IMPUTED.9b41704925": [], "test.aleo_models.not_null_silver__complete_native_prices__INSERTED_TIMESTAMP.030d747f3c": [], "test.aleo_models.not_null_silver__complete_native_prices_MODIFIED_TIMESTAMP.595acedfe2": [], "test.aleo_models.unique_silver__complete_native_prices_COMPLETE_NATIVE_PRICES_ID.6e5981548b": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_prices_HOUR__SYMBOL.9742f3d916": [], "test.aleo_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852": [], "test.aleo_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67": [], "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91": [], "test.aleo_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322": [], "test.aleo_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480": [], "test.aleo_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_asset_metadata_TOKEN_ADDRESS__BLOCKCHAIN.d3d6b2a62b": [], "test.aleo_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b": [], "test.aleo_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df": [], "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192": [], "test.aleo_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e": [], "test.aleo_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3": [], "test.aleo_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae": [], "test.aleo_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e": [], "test.aleo_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90": [], "test.aleo_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6": [], "test.aleo_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_token_prices_HOUR__TOKEN_ADDRESS__BLOCKCHAIN.dde8fc55cf": [], "test.aleo_models.not_null_silver__complete_native_asset_metadata_PROVIDER.2f310e1236": [], "test.aleo_models.not_null_silver__complete_native_asset_metadata_SYMBOL.ff109ff1ee": [], "test.aleo_models.not_null_silver__complete_native_asset_metadata_BLOCKCHAIN.fea8f73c16": [], "test.aleo_models.not_null_silver__complete_native_asset_metadata_MODIFIED_TIMESTAMP.c6bcef6cb9": [], "test.aleo_models.unique_silver__complete_native_asset_metadata_COMPLETE_NATIVE_ASSET_METADATA_ID.d98ec00bc9": [], "test.aleo_models.dbt_utils_unique_combination_of_columns_silver__complete_native_asset_metadata_SYMBOL.6c5f561373": [], "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456": [], "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8": [], "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb": [], "test.livequery_models.test_secrets__udf_register_secret.85444b4425": [], "test.livequery_models.test_secrets__udf_get_secret.1762e1eb69": [], "test.livequery_models.test_secrets__udf_get_secrets.898812e6e2": [], "test.livequery_models.test_secrets__udf_create_secret.d42bc02506": [], "test.livequery_models.test_secrets__udf_delete_secret.9f28745276": [], "test.livequery_models.test_udf_utils__foo_1__result_jsonrpc_2_0_method_foo_params_id_1___udf_json_rpc_call.3395d64fdc": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_1.fdf94a3552": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_2.e6c560e798": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_space.cf1ebd5f66": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_special.2505297d48": [], "test.livequery_models.test_utils__udf_urlencode_dict_true_array.12987dd02c": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_1.b361ab7392": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_2.dea792bb27": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_space.76c5107ff8": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_special.03dea2520f": [], "test.livequery_models.test_utils__udf_urlencode_dict_false_array.4892af33ef": [], "test.livequery_models.test_utils__udf_urlencode_dict_1.4143f28231": [], "test.livequery_models.test_utils__udf_urlencode_dict_2.63c38fd132": [], "test.livequery_models.test_utils__udf_urlencode_dict_space.76152bfecc": [], "test.livequery_models.test_utils__udf_urlencode_dict_special.0500e3683b": [], "test.livequery_models.test_utils__udf_urlencode_dict_array.8619cd1854": [], "test.livequery_models.test_utils__udf_urlencode_array_true_1.4b277c2056": [], "test.livequery_models.test_utils__udf_urlencode_array_true_2.2a5d911cd5": [], "test.livequery_models.test_utils__udf_urlencode_array_true_space.86721ff4c6": [], "test.livequery_models.test_utils__udf_urlencode_array_true_special.6bc759dae6": [], "test.livequery_models.test_utils__udf_urlencode_array_true_array.d77b856f93": [], "test.livequery_models.test_utils__udf_urlencode_array_false_1.99efd6dd89": [], "test.livequery_models.test_utils__udf_urlencode_array_false_2.ee64ed1c8f": [], "test.livequery_models.test_utils__udf_urlencode_array_false_space.3b0c76787c": [], "test.livequery_models.test_utils__udf_urlencode_array_false_special.a99ce4744f": [], "test.livequery_models.test_utils__udf_urlencode_array_false_array.40ad1041f0": [], "test.livequery_models.test_utils__udf_urlencode_array_1.7986cadf5c": [], "test.livequery_models.test_utils__udf_urlencode_array_2.38e8c0c341": [], "test.livequery_models.test_utils__udf_urlencode_array_space.36db5e9d03": [], "test.livequery_models.test_utils__udf_urlencode_array_special.1e95f13cf6": [], "test.livequery_models.test_utils__udf_urlencode_array_array.9cb7c99c99": [], "test.livequery_models.test_utils__udf_int_to_binary.d833da9e2e": [], "test.livequery_models.test_utils__udf_int_to_binary_large_number.5d7360105e": [], "test.livequery_models.test_utils__udf_binary_to_int.ffcc7fc010": [], "test.livequery_models.test_utils__udf_binary_to_int_large_number.493e3262c4": [], "test.livequery_models.test_utils__udf_evm_decode_log.84691b80d2": [], "test.livequery_models.test___utils_udf_introspect.79bd27a18b": [], "test.livequery_models.test_bitquery__graphql_status_200.11917beb18": [], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446": [], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e": [], "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade": [], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733": [], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96": [], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e": [], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64": [], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb": [], "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642": [], "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510": [], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e": [], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c": [], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b": [], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6": [], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06": [], "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185": [], "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13": [], "test.livequery_models.test_fred__get_series_status_200.51822e30ca": [], "test.livequery_models.test_strangelove__get_status_200.0a58865924": [], "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.07ec1755eb": [], "test.livequery_models.test_snapshot__query_status_200.35a2cffb40": [], "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e": [], "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1": [], "test.livequery_models.test_transpose__get_status_200.8721d94682": [], "test.livequery_models.test_subquery__graphql_status_200.02580cea10": [], "test.livequery_models.test_defillama__get_status_200.90864f8f89": [], "test.livequery_models.test_reservoir__get_status_200.cb905ea233": [], "test.livequery_models.test_apilayer__get_status_200.fa02bd0f30": [], "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714": [], "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d": [], "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616": [], "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3": [], "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c": [], "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165": [], "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a": [], "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d": [], "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0": [], "test.livequery_models.test_helius_apis__balances_status_200.d668884644": [], "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da": [], "test.livequery_models.test_cmc__get_status_200.bc3231cada": [], "test.livequery_models.test_espn__get_status_200.b4f84cc829": [], "test.livequery_models.test_opensea__get_status_200.5de63cfbb1": [], "test.livequery_models.test_coingecko__get_status_200.047f15c956": [], "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb": [], "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94": [], "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb": [], "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553": [], "test.livequery_models.test_github_utils__octocat_status_200.3573395088": [], "test.livequery_models.test_dappradar__get_status_200.86e3502ff3": [], "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652": [], "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4": [], "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576": [], "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d": [], "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962": [], "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355": [], "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296": [], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a": [], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140": [], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a": [], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28": [], "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945": [], "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00": [], "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32": [], "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5": [], "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306": [], "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f": [], "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc": [], "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4": [], "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f": [], "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31": [], "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35": [], "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24": [], "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb": [], "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76": [], "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220": [], "test.livequery_models.test_solscan_public_api_get__get_status_200.1797b664d6": [], "test.livequery_models.test_covalent__get_status_200.bb43bb7f69": [], "test.livequery_models.test_stakingrewards__query_status_200.144a35304b": [], "test.livequery_models.test_nftscan__get_status_200.33868e0f0d": [], "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707": [], "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee": [], "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822": [], "source.aleo_models.crosschain.dim_labels": ["model.aleo_models.silver__labels"], "source.aleo_models.crosschain_silver.number_sequence": ["model.aleo_models.silver_observability__blocks_completeness", "model.aleo_models.streamline__blocks"], "source.aleo_models.crosschain_silver.labels_combined": [], "source.aleo_models.crosschain_silver.complete_token_asset_metadata": ["model.aleo_models.bronze__complete_token_asset_metadata"], "source.aleo_models.crosschain_silver.complete_token_prices": ["model.aleo_models.bronze__complete_token_prices"], "source.aleo_models.crosschain_silver.complete_provider_asset_metadata": ["model.aleo_models.bronze__complete_provider_asset_metadata"], "source.aleo_models.crosschain_silver.complete_provider_prices": ["model.aleo_models.bronze__complete_provider_prices"], "source.aleo_models.crosschain_silver.complete_native_asset_metadata": ["model.aleo_models.bronze__complete_native_asset_metadata"], "source.aleo_models.crosschain_silver.complete_native_prices": ["model.aleo_models.bronze__complete_native_prices"], "source.aleo_models.bronze_streamline.blocks": ["model.aleo_models.bronze__blocks", "model.aleo_models.bronze__blocks_FR"], "source.aleo_models.bronze_streamline.transactions": [], "source.aleo_models.github_actions.workflows": ["model.aleo_models.github_actions__tasks"], "source.livequery_models.crosschain.dim_date_hours": [], "source.livequery_models.crosschain.dim_contracts": ["model.livequery_models._evm__contracts_map"], "source.livequery_models.crosschain.dim_evm_event_abis": ["model.livequery_models._evm__abi_map"], "source.livequery_models.ethereum_core.fact_event_logs": ["model.livequery_models._eth__logs"], "source.livequery_models.ethereum_core.ez_decoded_event_logs": ["model.livequery_models._eth__decoded_logs"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}